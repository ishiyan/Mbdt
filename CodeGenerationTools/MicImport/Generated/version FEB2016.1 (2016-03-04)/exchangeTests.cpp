#include "mbsl/trading/exchange/exchange.h"
#include "mbsl/testharness.h"

// Generated automatically from the list of ISO 10383 Exchange/Market Identifier Codes, version FEB2016.1 (2016-03-04).
// http://www.iso15022.org/MIC/homepageMIC.htm

namespace {

TESTGROUP("trading::Exchange")
{
    using Exchange = mbsl::trading::Exchange;
    using ExchangeCountry = mbsl::trading::ExchangeCountry;
    using ExchangeMic = mbsl::trading::ExchangeMic;
    using EuronextMic = mbsl::trading::EuronextMic;

    TESTCASE("mic() returns value passed to the constructor")
    {
        EuronextMic euronext{ EuronextMic::Xpar };
        ExchangeMic expected{ ExchangeMic::Xpar };
        ExchangeMic empty{ static_cast<ExchangeMic>(0) };

        Exchange exchange0;
        ASSERT_EQUAL(empty, exchange0.mic()) << "empty";

        Exchange exchange1{ expected };
        ASSERT_EQUAL(expected, exchange1.mic()) << "exchange mic";

        Exchange exchange2{ euronext };
        ASSERT_EQUAL(expected, exchange2.mic()) << "euronext mic";
    }

    TESTCASE("mic() returns value passed via copy constructor")
    {
        const ExchangeMic expected{ ExchangeMic::Xpar };
        Exchange exchange1{ expected };

        Exchange exchange2{ exchange1 };
        ASSERT_EQUAL(expected, exchange2.mic()) << "copy constructor";
    }

    TESTCASE("mic() returns value passed via assignment")
    {
        const ExchangeMic expected{ ExchangeMic::Xpar };
        const ExchangeMic other{ ExchangeMic::Xams };

        Exchange exchange2{ other };
        ASSERT_EQUAL(other, exchange2.mic()) << "before assignment";

        Exchange exchange1{ expected };
        exchange2 = exchange1;
        ASSERT_EQUAL(expected, exchange2.mic()) << "after assignment";
    }

    TESTCASE("mic() returns correct value after mic(ExchangeMic) call")
    {
        const ExchangeMic expected{ ExchangeMic::Xpar };
        const ExchangeMic initial{ ExchangeMic::Xams };

        Exchange exchange{ initial };
        exchange.mic(expected);
        ASSERT_EQUAL(expected, exchange.mic()) << "exchange mic";
    }

    TESTCASE("mic() returns correct value after mic(EuronextMic) call")
    {
        const ExchangeMic expected{ ExchangeMic::Xpar };
        const EuronextMic euronext{ EuronextMic::Xpar };
        const ExchangeMic initial{ ExchangeMic::Xams };

        Exchange exchange{ initial };
        exchange.mic(euronext);
        ASSERT_EQUAL(expected, exchange.mic()) << "euronext mic"; 
    }

    TESTCASE("country() returns correct country of exchange")
    {
        Exchange exchange;

        exchange.mic(ExchangeMic::Xtir);
        ASSERT_EQUAL(ExchangeCountry::Albania, exchange.country()) << "Xtir";
        exchange.mic(ExchangeMic::Xalg);
        ASSERT_EQUAL(ExchangeCountry::Algeria, exchange.country()) << "Xalg";
        exchange.mic(ExchangeMic::Bace);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Bace";
        exchange.mic(ExchangeMic::Bcfs);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Bcfs";
        exchange.mic(ExchangeMic::Xmvl);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Xmvl";
        exchange.mic(ExchangeMic::Rofx);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Rofx";
        exchange.mic(ExchangeMic::Xbcc);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Xbcc";
        exchange.mic(ExchangeMic::Mvcx);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Mvcx";
        exchange.mic(ExchangeMic::Xbcm);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Xbcm";
        exchange.mic(ExchangeMic::Xbcx);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Xbcx";
        exchange.mic(ExchangeMic::Xbue);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Xbue";
        exchange.mic(ExchangeMic::Xmev);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Xmev";
        exchange.mic(ExchangeMic::Xcnf);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Xcnf";
        exchange.mic(ExchangeMic::Xmab);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Xmab";
        exchange.mic(ExchangeMic::Xmtb);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Xmtb";
        exchange.mic(ExchangeMic::Xros);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Xros";
        exchange.mic(ExchangeMic::Xrox);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Xrox";
        exchange.mic(ExchangeMic::Xtuc);
        ASSERT_EQUAL(ExchangeCountry::Argentina, exchange.country()) << "Xtuc";
        exchange.mic(ExchangeMic::Xarm);
        ASSERT_EQUAL(ExchangeCountry::Armenia, exchange.country()) << "Xarm";
        exchange.mic(ExchangeMic::Apxl);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Apxl";
        exchange.mic(ExchangeMic::Awbx);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Awbx";
        exchange.mic(ExchangeMic::Awex);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Awex";
        exchange.mic(ExchangeMic::Blev);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Blev";
        exchange.mic(ExchangeMic::Cgma);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Cgma";
        exchange.mic(ExchangeMic::Chia);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Chia";
        exchange.mic(ExchangeMic::Cxac);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Cxac";
        exchange.mic(ExchangeMic::Cxaf);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Cxaf";
        exchange.mic(ExchangeMic::Cxam);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Cxam";
        exchange.mic(ExchangeMic::Cxan);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Cxan";
        exchange.mic(ExchangeMic::Cxap);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Cxap";
        exchange.mic(ExchangeMic::Cxav);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Cxav";
        exchange.mic(ExchangeMic::Cxaw);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Cxaw";
        exchange.mic(ExchangeMic::Clau);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Clau";
        exchange.mic(ExchangeMic::Csau);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Csau";
        exchange.mic(ExchangeMic::Cfau);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Cfau";
        exchange.mic(ExchangeMic::Maqx);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Maqx";
        exchange.mic(ExchangeMic::Msal);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Msal";
        exchange.mic(ExchangeMic::Nsxb);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Nsxb";
        exchange.mic(ExchangeMic::Siga);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Siga";
        exchange.mic(ExchangeMic::Simv);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Simv";
        exchange.mic(ExchangeMic::Xasx);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Xasx";
        exchange.mic(ExchangeMic::Asxb);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Asxb";
        exchange.mic(ExchangeMic::Asxc);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Asxc";
        exchange.mic(ExchangeMic::Asxp);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Asxp";
        exchange.mic(ExchangeMic::Asxt);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Asxt";
        exchange.mic(ExchangeMic::Asxv);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Asxv";
        exchange.mic(ExchangeMic::Xsfe);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Xsfe";
        exchange.mic(ExchangeMic::Xfex);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Xfex";
        exchange.mic(ExchangeMic::Xnec);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Xnec";
        exchange.mic(ExchangeMic::Xyie);
        ASSERT_EQUAL(ExchangeCountry::Australia, exchange.country()) << "Xyie";
        exchange.mic(ExchangeMic::Exaa);
        ASSERT_EQUAL(ExchangeCountry::Austria, exchange.country()) << "Exaa";
        exchange.mic(ExchangeMic::Xwbo);
        ASSERT_EQUAL(ExchangeCountry::Austria, exchange.country()) << "Xwbo";
        exchange.mic(ExchangeMic::Wbah);
        ASSERT_EQUAL(ExchangeCountry::Austria, exchange.country()) << "Wbah";
        exchange.mic(ExchangeMic::Wbdm);
        ASSERT_EQUAL(ExchangeCountry::Austria, exchange.country()) << "Wbdm";
        exchange.mic(ExchangeMic::Wbgf);
        ASSERT_EQUAL(ExchangeCountry::Austria, exchange.country()) << "Wbgf";
        exchange.mic(ExchangeMic::Xceg);
        ASSERT_EQUAL(ExchangeCountry::Austria, exchange.country()) << "Xceg";
        exchange.mic(ExchangeMic::Xvie);
        ASSERT_EQUAL(ExchangeCountry::Austria, exchange.country()) << "Xvie";
        exchange.mic(ExchangeMic::Bsex);
        ASSERT_EQUAL(ExchangeCountry::Azerbaijan, exchange.country()) << "Bsex";
        exchange.mic(ExchangeMic::Xibe);
        ASSERT_EQUAL(ExchangeCountry::Azerbaijan, exchange.country()) << "Xibe";
        exchange.mic(ExchangeMic::Xbaa);
        ASSERT_EQUAL(ExchangeCountry::Bahamas, exchange.country()) << "Xbaa";
        exchange.mic(ExchangeMic::Bfex);
        ASSERT_EQUAL(ExchangeCountry::Bahrain, exchange.country()) << "Bfex";
        exchange.mic(ExchangeMic::Xbah);
        ASSERT_EQUAL(ExchangeCountry::Bahrain, exchange.country()) << "Xbah";
        exchange.mic(ExchangeMic::Xchg);
        ASSERT_EQUAL(ExchangeCountry::Bangladesh, exchange.country()) << "Xchg";
        exchange.mic(ExchangeMic::Xdha);
        ASSERT_EQUAL(ExchangeCountry::Bangladesh, exchange.country()) << "Xdha";
        exchange.mic(ExchangeMic::Xbab);
        ASSERT_EQUAL(ExchangeCountry::Barbados, exchange.country()) << "Xbab";
        exchange.mic(ExchangeMic::Bajm);
        ASSERT_EQUAL(ExchangeCountry::Barbados, exchange.country()) << "Bajm";
        exchange.mic(ExchangeMic::Bcse);
        ASSERT_EQUAL(ExchangeCountry::Belarus, exchange.country()) << "Bcse";
        exchange.mic(ExchangeMic::Blpx);
        ASSERT_EQUAL(ExchangeCountry::Belgium, exchange.country()) << "Blpx";
        exchange.mic(ExchangeMic::Bmts);
        ASSERT_EQUAL(ExchangeCountry::Belgium, exchange.country()) << "Bmts";
        exchange.mic(ExchangeMic::Mtsd);
        ASSERT_EQUAL(ExchangeCountry::Belgium, exchange.country()) << "Mtsd";
        exchange.mic(ExchangeMic::Mtsf);
        ASSERT_EQUAL(ExchangeCountry::Belgium, exchange.country()) << "Mtsf";
        exchange.mic(ExchangeMic::Xbru);
        ASSERT_EQUAL(ExchangeCountry::Belgium, exchange.country()) << "Xbru";
        exchange.mic(ExchangeMic::Alxb);
        ASSERT_EQUAL(ExchangeCountry::Belgium, exchange.country()) << "Alxb";
        exchange.mic(ExchangeMic::Enxb);
        ASSERT_EQUAL(ExchangeCountry::Belgium, exchange.country()) << "Enxb";
        exchange.mic(ExchangeMic::Mlxb);
        ASSERT_EQUAL(ExchangeCountry::Belgium, exchange.country()) << "Mlxb";
        exchange.mic(ExchangeMic::Tnlb);
        ASSERT_EQUAL(ExchangeCountry::Belgium, exchange.country()) << "Tnlb";
        exchange.mic(ExchangeMic::Vpxb);
        ASSERT_EQUAL(ExchangeCountry::Belgium, exchange.country()) << "Vpxb";
        exchange.mic(ExchangeMic::Xbrd);
        ASSERT_EQUAL(ExchangeCountry::Belgium, exchange.country()) << "Xbrd";
        exchange.mic(ExchangeMic::Xbda);
        ASSERT_EQUAL(ExchangeCountry::Bermuda, exchange.country()) << "Xbda";
        exchange.mic(ExchangeMic::Xbol);
        ASSERT_EQUAL(ExchangeCountry::Bolivia, exchange.country()) << "Xbol";
        exchange.mic(ExchangeMic::Xblb);
        ASSERT_EQUAL(ExchangeCountry::BosniaHerzegovina, exchange.country()) << "Xblb";
        exchange.mic(ExchangeMic::Blbf);
        ASSERT_EQUAL(ExchangeCountry::BosniaHerzegovina, exchange.country()) << "Blbf";
        exchange.mic(ExchangeMic::Xsse);
        ASSERT_EQUAL(ExchangeCountry::BosniaHerzegovina, exchange.country()) << "Xsse";
        exchange.mic(ExchangeMic::Xbot);
        ASSERT_EQUAL(ExchangeCountry::Botswana, exchange.country()) << "Xbot";
        exchange.mic(ExchangeMic::Bote);
        ASSERT_EQUAL(ExchangeCountry::Botswana, exchange.country()) << "Bote";
        exchange.mic(ExchangeMic::Botv);
        ASSERT_EQUAL(ExchangeCountry::Botswana, exchange.country()) << "Botv";
        exchange.mic(ExchangeMic::Bcmm);
        ASSERT_EQUAL(ExchangeCountry::Brazil, exchange.country()) << "Bcmm";
        exchange.mic(ExchangeMic::Bovm);
        ASSERT_EQUAL(ExchangeCountry::Brazil, exchange.country()) << "Bovm";
        exchange.mic(ExchangeMic::Brix);
        ASSERT_EQUAL(ExchangeCountry::Brazil, exchange.country()) << "Brix";
        exchange.mic(ExchangeMic::Bvmf);
        ASSERT_EQUAL(ExchangeCountry::Brazil, exchange.country()) << "Bvmf";
        exchange.mic(ExchangeMic::Ceti);
        ASSERT_EQUAL(ExchangeCountry::Brazil, exchange.country()) << "Ceti";
        exchange.mic(ExchangeMic::Selc);
        ASSERT_EQUAL(ExchangeCountry::Brazil, exchange.country()) << "Selc";
        exchange.mic(ExchangeMic::Ibex);
        ASSERT_EQUAL(ExchangeCountry::Bulgaria, exchange.country()) << "Ibex";
        exchange.mic(ExchangeMic::Xbul);
        ASSERT_EQUAL(ExchangeCountry::Bulgaria, exchange.country()) << "Xbul";
        exchange.mic(ExchangeMic::Xcsx);
        ASSERT_EQUAL(ExchangeCountry::Cambodia, exchange.country()) << "Xcsx";
        exchange.mic(ExchangeMic::Xdsx);
        ASSERT_EQUAL(ExchangeCountry::Cameroon, exchange.country()) << "Xdsx";
        exchange.mic(ExchangeMic::Canx);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Canx";
        exchange.mic(ExchangeMic::Chic);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Chic";
        exchange.mic(ExchangeMic::Xcx2);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Xcx2";
        exchange.mic(ExchangeMic::Cotc);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Cotc";
        exchange.mic(ExchangeMic::Ifca);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Ifca";
        exchange.mic(ExchangeMic::Ivzx);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Ivzx";
        exchange.mic(ExchangeMic::Lica);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Lica";
        exchange.mic(ExchangeMic::Matn);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Matn";
        exchange.mic(ExchangeMic::Neoe);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Neoe";
        exchange.mic(ExchangeMic::Ngxc);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Ngxc";
        exchange.mic(ExchangeMic::Omga);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Omga";
        exchange.mic(ExchangeMic::Lynx);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Lynx";
        exchange.mic(ExchangeMic::Tmxs);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Tmxs";
        exchange.mic(ExchangeMic::Xats);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Xats";
        exchange.mic(ExchangeMic::Xbbk);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Xbbk";
        exchange.mic(ExchangeMic::Xcnq);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Xcnq";
        exchange.mic(ExchangeMic::Pure);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Pure";
        exchange.mic(ExchangeMic::Xicx);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Xicx";
        exchange.mic(ExchangeMic::Xmoc);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Xmoc";
        exchange.mic(ExchangeMic::Xmod);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Xmod";
        exchange.mic(ExchangeMic::Xtse);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Xtse";
        exchange.mic(ExchangeMic::Xtsx);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Xtsx";
        exchange.mic(ExchangeMic::Xtnx);
        ASSERT_EQUAL(ExchangeCountry::Canada, exchange.country()) << "Xtnx";
        exchange.mic(ExchangeMic::Xbvc);
        ASSERT_EQUAL(ExchangeCountry::CapeVerde, exchange.country()) << "Xbvc";
        exchange.mic(ExchangeMic::Xcay);
        ASSERT_EQUAL(ExchangeCountry::CaymanIslands, exchange.country()) << "Xcay";
        exchange.mic(ExchangeMic::Bova);
        ASSERT_EQUAL(ExchangeCountry::Chile, exchange.country()) << "Bova";
        exchange.mic(ExchangeMic::Xbcl);
        ASSERT_EQUAL(ExchangeCountry::Chile, exchange.country()) << "Xbcl";
        exchange.mic(ExchangeMic::Xsgo);
        ASSERT_EQUAL(ExchangeCountry::Chile, exchange.country()) << "Xsgo";
        exchange.mic(ExchangeMic::Ccfx);
        ASSERT_EQUAL(ExchangeCountry::China, exchange.country()) << "Ccfx";
        exchange.mic(ExchangeMic::Cssx);
        ASSERT_EQUAL(ExchangeCountry::China, exchange.country()) << "Cssx";
        exchange.mic(ExchangeMic::Sgex);
        ASSERT_EQUAL(ExchangeCountry::China, exchange.country()) << "Sgex";
        exchange.mic(ExchangeMic::Xcfe);
        ASSERT_EQUAL(ExchangeCountry::China, exchange.country()) << "Xcfe";
        exchange.mic(ExchangeMic::Xdce);
        ASSERT_EQUAL(ExchangeCountry::China, exchange.country()) << "Xdce";
        exchange.mic(ExchangeMic::Xsge);
        ASSERT_EQUAL(ExchangeCountry::China, exchange.country()) << "Xsge";
        exchange.mic(ExchangeMic::Xine);
        ASSERT_EQUAL(ExchangeCountry::China, exchange.country()) << "Xine";
        exchange.mic(ExchangeMic::Xshe);
        ASSERT_EQUAL(ExchangeCountry::China, exchange.country()) << "Xshe";
        exchange.mic(ExchangeMic::Xsec);
        ASSERT_EQUAL(ExchangeCountry::China, exchange.country()) << "Xsec";
        exchange.mic(ExchangeMic::Xshg);
        ASSERT_EQUAL(ExchangeCountry::China, exchange.country()) << "Xshg";
        exchange.mic(ExchangeMic::Xssc);
        ASSERT_EQUAL(ExchangeCountry::China, exchange.country()) << "Xssc";
        exchange.mic(ExchangeMic::Xzce);
        ASSERT_EQUAL(ExchangeCountry::China, exchange.country()) << "Xzce";
        exchange.mic(ExchangeMic::Xbog);
        ASSERT_EQUAL(ExchangeCountry::Colombia, exchange.country()) << "Xbog";
        exchange.mic(ExchangeMic::Xbnv);
        ASSERT_EQUAL(ExchangeCountry::CostaRica, exchange.country()) << "Xbnv";
        exchange.mic(ExchangeMic::Xcro);
        ASSERT_EQUAL(ExchangeCountry::Croatia, exchange.country()) << "Xcro";
        exchange.mic(ExchangeMic::Xtrz);
        ASSERT_EQUAL(ExchangeCountry::Croatia, exchange.country()) << "Xtrz";
        exchange.mic(ExchangeMic::Xzag);
        ASSERT_EQUAL(ExchangeCountry::Croatia, exchange.country()) << "Xzag";
        exchange.mic(ExchangeMic::Xzam);
        ASSERT_EQUAL(ExchangeCountry::Croatia, exchange.country()) << "Xzam";
        exchange.mic(ExchangeMic::Dcsx);
        ASSERT_EQUAL(ExchangeCountry::Curacao, exchange.country()) << "Dcsx";
        exchange.mic(ExchangeMic::Xcys);
        ASSERT_EQUAL(ExchangeCountry::Cyprus, exchange.country()) << "Xcys";
        exchange.mic(ExchangeMic::Xcyo);
        ASSERT_EQUAL(ExchangeCountry::Cyprus, exchange.country()) << "Xcyo";
        exchange.mic(ExchangeMic::Xecm);
        ASSERT_EQUAL(ExchangeCountry::Cyprus, exchange.country()) << "Xecm";
        exchange.mic(ExchangeMic::Xpra);
        ASSERT_EQUAL(ExchangeCountry::CzechRepublic, exchange.country()) << "Xpra";
        exchange.mic(ExchangeMic::Xprm);
        ASSERT_EQUAL(ExchangeCountry::CzechRepublic, exchange.country()) << "Xprm";
        exchange.mic(ExchangeMic::Xpxe);
        ASSERT_EQUAL(ExchangeCountry::CzechRepublic, exchange.country()) << "Xpxe";
        exchange.mic(ExchangeMic::Xrmz);
        ASSERT_EQUAL(ExchangeCountry::CzechRepublic, exchange.country()) << "Xrmz";
        exchange.mic(ExchangeMic::Xrmo);
        ASSERT_EQUAL(ExchangeCountry::CzechRepublic, exchange.country()) << "Xrmo";
        exchange.mic(ExchangeMic::Dktc);
        ASSERT_EQUAL(ExchangeCountry::Denmark, exchange.country()) << "Dktc";
        exchange.mic(ExchangeMic::Gxgr);
        ASSERT_EQUAL(ExchangeCountry::Denmark, exchange.country()) << "Gxgr";
        exchange.mic(ExchangeMic::Gxgf);
        ASSERT_EQUAL(ExchangeCountry::Denmark, exchange.country()) << "Gxgf";
        exchange.mic(ExchangeMic::Gxgm);
        ASSERT_EQUAL(ExchangeCountry::Denmark, exchange.country()) << "Gxgm";
        exchange.mic(ExchangeMic::Npga);
        ASSERT_EQUAL(ExchangeCountry::Denmark, exchange.country()) << "Npga";
        exchange.mic(ExchangeMic::Xcse);
        ASSERT_EQUAL(ExchangeCountry::Denmark, exchange.country()) << "Xcse";
        exchange.mic(ExchangeMic::Dcse);
        ASSERT_EQUAL(ExchangeCountry::Denmark, exchange.country()) << "Dcse";
        exchange.mic(ExchangeMic::Dndk);
        ASSERT_EQUAL(ExchangeCountry::Denmark, exchange.country()) << "Dndk";
        exchange.mic(ExchangeMic::Fndk);
        ASSERT_EQUAL(ExchangeCountry::Denmark, exchange.country()) << "Fndk";
        exchange.mic(ExchangeMic::Xbvr);
        ASSERT_EQUAL(ExchangeCountry::DominicanRepublic, exchange.country()) << "Xbvr";
        exchange.mic(ExchangeMic::Xgua);
        ASSERT_EQUAL(ExchangeCountry::Ecuador, exchange.country()) << "Xgua";
        exchange.mic(ExchangeMic::Xqui);
        ASSERT_EQUAL(ExchangeCountry::Ecuador, exchange.country()) << "Xqui";
        exchange.mic(ExchangeMic::Nilx);
        ASSERT_EQUAL(ExchangeCountry::Egypt, exchange.country()) << "Nilx";
        exchange.mic(ExchangeMic::Xcai);
        ASSERT_EQUAL(ExchangeCountry::Egypt, exchange.country()) << "Xcai";
        exchange.mic(ExchangeMic::Xsva);
        ASSERT_EQUAL(ExchangeCountry::Salvador, exchange.country()) << "Xsva";
        exchange.mic(ExchangeMic::Xtal);
        ASSERT_EQUAL(ExchangeCountry::Estonia, exchange.country()) << "Xtal";
        exchange.mic(ExchangeMic::Fnee);
        ASSERT_EQUAL(ExchangeCountry::Estonia, exchange.country()) << "Fnee";
        exchange.mic(ExchangeMic::Vmfx);
        ASSERT_EQUAL(ExchangeCountry::FaroeIslands, exchange.country()) << "Vmfx";
        exchange.mic(ExchangeMic::Xsps);
        ASSERT_EQUAL(ExchangeCountry::Fiji, exchange.country()) << "Xsps";
        exchange.mic(ExchangeMic::Fgex);
        ASSERT_EQUAL(ExchangeCountry::Finland, exchange.country()) << "Fgex";
        exchange.mic(ExchangeMic::Xhel);
        ASSERT_EQUAL(ExchangeCountry::Finland, exchange.country()) << "Xhel";
        exchange.mic(ExchangeMic::Dhel);
        ASSERT_EQUAL(ExchangeCountry::Finland, exchange.country()) << "Dhel";
        exchange.mic(ExchangeMic::Dnfi);
        ASSERT_EQUAL(ExchangeCountry::Finland, exchange.country()) << "Dnfi";
        exchange.mic(ExchangeMic::Fnfi);
        ASSERT_EQUAL(ExchangeCountry::Finland, exchange.country()) << "Fnfi";
        exchange.mic(ExchangeMic::Coal);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Coal";
        exchange.mic(ExchangeMic::Epex);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Epex";
        exchange.mic(ExchangeMic::Fmts);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Fmts";
        exchange.mic(ExchangeMic::Gmtf);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Gmtf";
        exchange.mic(ExchangeMic::Lchc);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Lchc";
        exchange.mic(ExchangeMic::Xafr);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Xafr";
        exchange.mic(ExchangeMic::Xbln);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Xbln";
        exchange.mic(ExchangeMic::Xpar);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Xpar";
        exchange.mic(ExchangeMic::Alxp);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Alxp";
        exchange.mic(ExchangeMic::Mtch);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Mtch";
        exchange.mic(ExchangeMic::Xmat);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Xmat";
        exchange.mic(ExchangeMic::Xmli);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Xmli";
        exchange.mic(ExchangeMic::Xmon);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Xmon";
        exchange.mic(ExchangeMic::Xpow);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Xpow";
        exchange.mic(ExchangeMic::Xpsf);
        ASSERT_EQUAL(ExchangeCountry::France, exchange.country()) << "Xpsf";
        exchange.mic(ExchangeMic::Xgse);
        ASSERT_EQUAL(ExchangeCountry::Georgia, exchange.country()) << "Xgse";
        exchange.mic(ExchangeMic::X360T);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "X360T";
        exchange.mic(ExchangeMic::Cats);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Cats";
        exchange.mic(ExchangeMic::Dbox);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Dbox";
        exchange.mic(ExchangeMic::Auto);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Auto";
        exchange.mic(ExchangeMic::Tgat);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Tgat";
        exchange.mic(ExchangeMic::Xgat);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xgat";
        exchange.mic(ExchangeMic::Xgrm);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xgrm";
        exchange.mic(ExchangeMic::Xber);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xber";
        exchange.mic(ExchangeMic::Bera);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Bera";
        exchange.mic(ExchangeMic::Berb);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Berb";
        exchange.mic(ExchangeMic::Berc);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Berc";
        exchange.mic(ExchangeMic::Eqta);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Eqta";
        exchange.mic(ExchangeMic::Eqtb);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Eqtb";
        exchange.mic(ExchangeMic::Eqtc);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Eqtc";
        exchange.mic(ExchangeMic::Eqtd);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Eqtd";
        exchange.mic(ExchangeMic::Xeqt);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xeqt";
        exchange.mic(ExchangeMic::Zobx);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Zobx";
        exchange.mic(ExchangeMic::Xdus);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xdus";
        exchange.mic(ExchangeMic::Dusa);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Dusa";
        exchange.mic(ExchangeMic::Dusb);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Dusb";
        exchange.mic(ExchangeMic::Dusc);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Dusc";
        exchange.mic(ExchangeMic::Dusd);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Dusd";
        exchange.mic(ExchangeMic::Xqtx);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xqtx";
        exchange.mic(ExchangeMic::Xecb);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xecb";
        exchange.mic(ExchangeMic::Xecc);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xecc";
        exchange.mic(ExchangeMic::Xeee);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xeee";
        exchange.mic(ExchangeMic::Xeeo);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xeeo";
        exchange.mic(ExchangeMic::Xeer);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xeer";
        exchange.mic(ExchangeMic::Xeum);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xeum";
        exchange.mic(ExchangeMic::Xeur);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xeur";
        exchange.mic(ExchangeMic::Ecag);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Ecag";
        exchange.mic(ExchangeMic::Xere);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xere";
        exchange.mic(ExchangeMic::Xert);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xert";
        exchange.mic(ExchangeMic::Xeub);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xeub";
        exchange.mic(ExchangeMic::Xeup);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xeup";
        exchange.mic(ExchangeMic::Xfra);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xfra";
        exchange.mic(ExchangeMic::Fraa);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Fraa";
        exchange.mic(ExchangeMic::Frab);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Frab";
        exchange.mic(ExchangeMic::Frad);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Frad";
        exchange.mic(ExchangeMic::Xdbc);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xdbc";
        exchange.mic(ExchangeMic::Xdbv);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xdbv";
        exchange.mic(ExchangeMic::Xdbx);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xdbx";
        exchange.mic(ExchangeMic::Xeta);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xeta";
        exchange.mic(ExchangeMic::Xetb);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xetb";
        exchange.mic(ExchangeMic::Xetr);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xetr";
        exchange.mic(ExchangeMic::Xnew);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xnew";
        exchange.mic(ExchangeMic::Xham);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xham";
        exchange.mic(ExchangeMic::Hama);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Hama";
        exchange.mic(ExchangeMic::Hamb);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Hamb";
        exchange.mic(ExchangeMic::Xhan);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xhan";
        exchange.mic(ExchangeMic::Hana);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Hana";
        exchange.mic(ExchangeMic::Hanb);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Hanb";
        exchange.mic(ExchangeMic::Xinv);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xinv";
        exchange.mic(ExchangeMic::Xmun);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xmun";
        exchange.mic(ExchangeMic::Muna);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Muna";
        exchange.mic(ExchangeMic::Munb);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Munb";
        exchange.mic(ExchangeMic::Munc);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Munc";
        exchange.mic(ExchangeMic::Mund);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Mund";
        exchange.mic(ExchangeMic::Xsco);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xsco";
        exchange.mic(ExchangeMic::Xsc1);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xsc1";
        exchange.mic(ExchangeMic::Xsc2);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xsc2";
        exchange.mic(ExchangeMic::Xsc3);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xsc3";
        exchange.mic(ExchangeMic::Xstu);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xstu";
        exchange.mic(ExchangeMic::Euwx);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Euwx";
        exchange.mic(ExchangeMic::Stua);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Stua";
        exchange.mic(ExchangeMic::Stub);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Stub";
        exchange.mic(ExchangeMic::Xxsc);
        ASSERT_EQUAL(ExchangeCountry::Germany, exchange.country()) << "Xxsc";
        exchange.mic(ExchangeMic::Xgha);
        ASSERT_EQUAL(ExchangeCountry::Ghana, exchange.country()) << "Xgha";
        exchange.mic(ExchangeMic::Gsxl);
        ASSERT_EQUAL(ExchangeCountry::Gibraltar, exchange.country()) << "Gsxl";
        exchange.mic(ExchangeMic::Asex);
        ASSERT_EQUAL(ExchangeCountry::Greece, exchange.country()) << "Asex";
        exchange.mic(ExchangeMic::Enax);
        ASSERT_EQUAL(ExchangeCountry::Greece, exchange.country()) << "Enax";
        exchange.mic(ExchangeMic::Euax);
        ASSERT_EQUAL(ExchangeCountry::Greece, exchange.country()) << "Euax";
        exchange.mic(ExchangeMic::Hotc);
        ASSERT_EQUAL(ExchangeCountry::Greece, exchange.country()) << "Hotc";
        exchange.mic(ExchangeMic::Xade);
        ASSERT_EQUAL(ExchangeCountry::Greece, exchange.country()) << "Xade";
        exchange.mic(ExchangeMic::Xath);
        ASSERT_EQUAL(ExchangeCountry::Greece, exchange.country()) << "Xath";
        exchange.mic(ExchangeMic::Xipo);
        ASSERT_EQUAL(ExchangeCountry::Greece, exchange.country()) << "Xipo";
        exchange.mic(ExchangeMic::Hdat);
        ASSERT_EQUAL(ExchangeCountry::Greece, exchange.country()) << "Hdat";
        exchange.mic(ExchangeMic::Hemo);
        ASSERT_EQUAL(ExchangeCountry::Greece, exchange.country()) << "Hemo";
        exchange.mic(ExchangeMic::Xgtg);
        ASSERT_EQUAL(ExchangeCountry::Guatemala, exchange.country()) << "Xgtg";
        exchange.mic(ExchangeMic::Xcie);
        ASSERT_EQUAL(ExchangeCountry::ChannelIslands, exchange.country()) << "Xcie";
        exchange.mic(ExchangeMic::Gsci);
        ASSERT_EQUAL(ExchangeCountry::Guyana, exchange.country()) << "Gsci";
        exchange.mic(ExchangeMic::Xbcv);
        ASSERT_EQUAL(ExchangeCountry::Honduras, exchange.country()) << "Xbcv";
        exchange.mic(ExchangeMic::Cgmh);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Cgmh";
        exchange.mic(ExchangeMic::Clhk);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Clhk";
        exchange.mic(ExchangeMic::Cshk);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Cshk";
        exchange.mic(ExchangeMic::Cfhk);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Cfhk";
        exchange.mic(ExchangeMic::Dbhk);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Dbhk";
        exchange.mic(ExchangeMic::Eotc);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Eotc";
        exchange.mic(ExchangeMic::Hsxa);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Hsxa";
        exchange.mic(ExchangeMic::Maqh);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Maqh";
        exchange.mic(ExchangeMic::Sigh);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Sigh";
        exchange.mic(ExchangeMic::Tocp);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Tocp";
        exchange.mic(ExchangeMic::Ubsx);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Ubsx";
        exchange.mic(ExchangeMic::Xcgs);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Xcgs";
        exchange.mic(ExchangeMic::Xhkf);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Xhkf";
        exchange.mic(ExchangeMic::Xhkg);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Xhkg";
        exchange.mic(ExchangeMic::Shsc);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Shsc";
        exchange.mic(ExchangeMic::Xgem);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Xgem";
        exchange.mic(ExchangeMic::Xihk);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Xihk";
        exchange.mic(ExchangeMic::Xpst);
        ASSERT_EQUAL(ExchangeCountry::HongKong, exchange.country()) << "Xpst";
        exchange.mic(ExchangeMic::Beta);
        ASSERT_EQUAL(ExchangeCountry::Hungary, exchange.country()) << "Beta";
        exchange.mic(ExchangeMic::Hupx);
        ASSERT_EQUAL(ExchangeCountry::Hungary, exchange.country()) << "Hupx";
        exchange.mic(ExchangeMic::Kccp);
        ASSERT_EQUAL(ExchangeCountry::Hungary, exchange.country()) << "Kccp";
        exchange.mic(ExchangeMic::Xbud);
        ASSERT_EQUAL(ExchangeCountry::Hungary, exchange.country()) << "Xbud";
        exchange.mic(ExchangeMic::Xgas);
        ASSERT_EQUAL(ExchangeCountry::Hungary, exchange.country()) << "Xgas";
        exchange.mic(ExchangeMic::Xice);
        ASSERT_EQUAL(ExchangeCountry::Iceland, exchange.country()) << "Xice";
        exchange.mic(ExchangeMic::Dice);
        ASSERT_EQUAL(ExchangeCountry::Iceland, exchange.country()) << "Dice";
        exchange.mic(ExchangeMic::Dnis);
        ASSERT_EQUAL(ExchangeCountry::Iceland, exchange.country()) << "Dnis";
        exchange.mic(ExchangeMic::Fnis);
        ASSERT_EQUAL(ExchangeCountry::Iceland, exchange.country()) << "Fnis";
        exchange.mic(ExchangeMic::Acex);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Acex";
        exchange.mic(ExchangeMic::Cdsl);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Cdsl";
        exchange.mic(ExchangeMic::Icxl);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Icxl";
        exchange.mic(ExchangeMic::Isex);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Isex";
        exchange.mic(ExchangeMic::Mcxx);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Mcxx";
        exchange.mic(ExchangeMic::Nbot);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Nbot";
        exchange.mic(ExchangeMic::Nmce);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Nmce";
        exchange.mic(ExchangeMic::Otcx);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Otcx";
        exchange.mic(ExchangeMic::Pxil);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Pxil";
        exchange.mic(ExchangeMic::Xban);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Xban";
        exchange.mic(ExchangeMic::Xbom);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Xbom";
        exchange.mic(ExchangeMic::Bsme);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Bsme";
        exchange.mic(ExchangeMic::Xcal);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Xcal";
        exchange.mic(ExchangeMic::Xdes);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Xdes";
        exchange.mic(ExchangeMic::Ximc);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Ximc";
        exchange.mic(ExchangeMic::Xmds);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Xmds";
        exchange.mic(ExchangeMic::Xncd);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Xncd";
        exchange.mic(ExchangeMic::Xnse);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Xnse";
        exchange.mic(ExchangeMic::Xuse);
        ASSERT_EQUAL(ExchangeCountry::India, exchange.country()) << "Xuse";
        exchange.mic(ExchangeMic::Icdx);
        ASSERT_EQUAL(ExchangeCountry::Indonesia, exchange.country()) << "Icdx";
        exchange.mic(ExchangeMic::Xbbj);
        ASSERT_EQUAL(ExchangeCountry::Indonesia, exchange.country()) << "Xbbj";
        exchange.mic(ExchangeMic::Xidx);
        ASSERT_EQUAL(ExchangeCountry::Indonesia, exchange.country()) << "Xidx";
        exchange.mic(ExchangeMic::Xjnb);
        ASSERT_EQUAL(ExchangeCountry::Indonesia, exchange.country()) << "Xjnb";
        exchange.mic(ExchangeMic::Imex);
        ASSERT_EQUAL(ExchangeCountry::Iran, exchange.country()) << "Imex";
        exchange.mic(ExchangeMic::Xteh);
        ASSERT_EQUAL(ExchangeCountry::Iran, exchange.country()) << "Xteh";
        exchange.mic(ExchangeMic::Xiqs);
        ASSERT_EQUAL(ExchangeCountry::Iraq, exchange.country()) << "Xiqs";
        exchange.mic(ExchangeMic::Xpos);
        ASSERT_EQUAL(ExchangeCountry::Ireland, exchange.country()) << "Xpos";
        exchange.mic(ExchangeMic::Xcde);
        ASSERT_EQUAL(ExchangeCountry::Ireland, exchange.country()) << "Xcde";
        exchange.mic(ExchangeMic::Xdub);
        ASSERT_EQUAL(ExchangeCountry::Ireland, exchange.country()) << "Xdub";
        exchange.mic(ExchangeMic::Xatl);
        ASSERT_EQUAL(ExchangeCountry::Ireland, exchange.country()) << "Xatl";
        exchange.mic(ExchangeMic::Xesm);
        ASSERT_EQUAL(ExchangeCountry::Ireland, exchange.country()) << "Xesm";
        exchange.mic(ExchangeMic::Xeye);
        ASSERT_EQUAL(ExchangeCountry::Ireland, exchange.country()) << "Xeye";
        exchange.mic(ExchangeMic::Xmsm);
        ASSERT_EQUAL(ExchangeCountry::Ireland, exchange.country()) << "Xmsm";
        exchange.mic(ExchangeMic::Xebi);
        ASSERT_EQUAL(ExchangeCountry::Ireland, exchange.country()) << "Xebi";
        exchange.mic(ExchangeMic::Xtae);
        ASSERT_EQUAL(ExchangeCountry::Israel, exchange.country()) << "Xtae";
        exchange.mic(ExchangeMic::Cgit);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Cgit";
        exchange.mic(ExchangeMic::Cgcm);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Cgcm";
        exchange.mic(ExchangeMic::Cgdb);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Cgdb";
        exchange.mic(ExchangeMic::Cgeb);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Cgeb";
        exchange.mic(ExchangeMic::Cggd);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Cggd";
        exchange.mic(ExchangeMic::Cgnd);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Cgnd";
        exchange.mic(ExchangeMic::Cgqd);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Cgqd";
        exchange.mic(ExchangeMic::Cgqt);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Cgqt";
        exchange.mic(ExchangeMic::Cgtr);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Cgtr";
        exchange.mic(ExchangeMic::Emid);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Emid";
        exchange.mic(ExchangeMic::Emdr);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Emdr";
        exchange.mic(ExchangeMic::Emir);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Emir";
        exchange.mic(ExchangeMic::Etlx);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Etlx";
        exchange.mic(ExchangeMic::Hmtf);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Hmtf";
        exchange.mic(ExchangeMic::Hmod);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Hmod";
        exchange.mic(ExchangeMic::Mtsc);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Mtsc";
        exchange.mic(ExchangeMic::Bond);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Bond";
        exchange.mic(ExchangeMic::Mtsm);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Mtsm";
        exchange.mic(ExchangeMic::Ssob);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Ssob";
        exchange.mic(ExchangeMic::Xgme);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Xgme";
        exchange.mic(ExchangeMic::Xmil);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Xmil";
        exchange.mic(ExchangeMic::Etfp);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Etfp";
        exchange.mic(ExchangeMic::Mivx);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Mivx";
        exchange.mic(ExchangeMic::Motx);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Motx";
        exchange.mic(ExchangeMic::Mtaa);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Mtaa";
        exchange.mic(ExchangeMic::Mtah);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Mtah";
        exchange.mic(ExchangeMic::Sedx);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Sedx";
        exchange.mic(ExchangeMic::Xaim);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Xaim";
        exchange.mic(ExchangeMic::Xdmi);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Xdmi";
        exchange.mic(ExchangeMic::Xmot);
        ASSERT_EQUAL(ExchangeCountry::Italy, exchange.country()) << "Xmot";
        exchange.mic(ExchangeMic::Xbrv);
        ASSERT_EQUAL(ExchangeCountry::IvoryCoast, exchange.country()) << "Xbrv";
        exchange.mic(ExchangeMic::Xjam);
        ASSERT_EQUAL(ExchangeCountry::Jamaica, exchange.country()) << "Xjam";
        exchange.mic(ExchangeMic::Betp);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Betp";
        exchange.mic(ExchangeMic::Chij);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Chij";
        exchange.mic(ExchangeMic::Chis);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Chis";
        exchange.mic(ExchangeMic::Chiv);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Chiv";
        exchange.mic(ExchangeMic::Citx);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Citx";
        exchange.mic(ExchangeMic::Citd);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Citd";
        exchange.mic(ExchangeMic::Cljp);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Cljp";
        exchange.mic(ExchangeMic::Cmet);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Cmet";
        exchange.mic(ExchangeMic::Csjp);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Csjp";
        exchange.mic(ExchangeMic::Cfjp);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Cfjp";
        exchange.mic(ExchangeMic::Drct);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Drct";
        exchange.mic(ExchangeMic::Lxjp);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Lxjp";
        exchange.mic(ExchangeMic::Maqj);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Maqj";
        exchange.mic(ExchangeMic::Mizx);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Mizx";
        exchange.mic(ExchangeMic::Msms);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Msms";
        exchange.mic(ExchangeMic::Nmrj);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Nmrj";
        exchange.mic(ExchangeMic::Nxjp);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Nxjp";
        exchange.mic(ExchangeMic::Nxse);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Nxse";
        exchange.mic(ExchangeMic::Nxvw);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Nxvw";
        exchange.mic(ExchangeMic::Sbij);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Sbij";
        exchange.mic(ExchangeMic::Sbiu);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Sbiu";
        exchange.mic(ExchangeMic::Sbiv);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Sbiv";
        exchange.mic(ExchangeMic::Xsbi);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xsbi";
        exchange.mic(ExchangeMic::Sigj);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Sigj";
        exchange.mic(ExchangeMic::Xfka);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xfka";
        exchange.mic(ExchangeMic::Xijp);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xijp";
        exchange.mic(ExchangeMic::Jasr);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Jasr";
        exchange.mic(ExchangeMic::Xjpx);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xjpx";
        exchange.mic(ExchangeMic::Xjas);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xjas";
        exchange.mic(ExchangeMic::Xose);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xose";
        exchange.mic(ExchangeMic::Xosj);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xosj";
        exchange.mic(ExchangeMic::Xtam);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xtam";
        exchange.mic(ExchangeMic::Xtk1);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xtk1";
        exchange.mic(ExchangeMic::Xtk2);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xtk2";
        exchange.mic(ExchangeMic::Xtk3);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xtk3";
        exchange.mic(ExchangeMic::Xtks);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xtks";
        exchange.mic(ExchangeMic::Xkac);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xkac";
        exchange.mic(ExchangeMic::Xngo);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xngo";
        exchange.mic(ExchangeMic::Xnks);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xnks";
        exchange.mic(ExchangeMic::Xsap);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xsap";
        exchange.mic(ExchangeMic::Xtff);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xtff";
        exchange.mic(ExchangeMic::Xtkt);
        ASSERT_EQUAL(ExchangeCountry::Japan, exchange.country()) << "Xtkt";
        exchange.mic(ExchangeMic::Xamm);
        ASSERT_EQUAL(ExchangeCountry::Jordan, exchange.country()) << "Xamm";
        exchange.mic(ExchangeMic::Etsc);
        ASSERT_EQUAL(ExchangeCountry::Kazakhstan, exchange.country()) << "Etsc";
        exchange.mic(ExchangeMic::Xkaz);
        ASSERT_EQUAL(ExchangeCountry::Kazakhstan, exchange.country()) << "Xkaz";
        exchange.mic(ExchangeMic::Xnai);
        ASSERT_EQUAL(ExchangeCountry::Kenya, exchange.country()) << "Xnai";
        exchange.mic(ExchangeMic::Xkfb);
        ASSERT_EQUAL(ExchangeCountry::Korea, exchange.country()) << "Xkfb";
        exchange.mic(ExchangeMic::Xkrx);
        ASSERT_EQUAL(ExchangeCountry::Korea, exchange.country()) << "Xkrx";
        exchange.mic(ExchangeMic::Xkcm);
        ASSERT_EQUAL(ExchangeCountry::Korea, exchange.country()) << "Xkcm";
        exchange.mic(ExchangeMic::Xkem);
        ASSERT_EQUAL(ExchangeCountry::Korea, exchange.country()) << "Xkem";
        exchange.mic(ExchangeMic::Xkfe);
        ASSERT_EQUAL(ExchangeCountry::Korea, exchange.country()) << "Xkfe";
        exchange.mic(ExchangeMic::Xkon);
        ASSERT_EQUAL(ExchangeCountry::Korea, exchange.country()) << "Xkon";
        exchange.mic(ExchangeMic::Xkos);
        ASSERT_EQUAL(ExchangeCountry::Korea, exchange.country()) << "Xkos";
        exchange.mic(ExchangeMic::Xkuw);
        ASSERT_EQUAL(ExchangeCountry::Kuwait, exchange.country()) << "Xkuw";
        exchange.mic(ExchangeMic::Xkse);
        ASSERT_EQUAL(ExchangeCountry::Kyrgyzstan, exchange.country()) << "Xkse";
        exchange.mic(ExchangeMic::Xlao);
        ASSERT_EQUAL(ExchangeCountry::Laos, exchange.country()) << "Xlao";
        exchange.mic(ExchangeMic::Xris);
        ASSERT_EQUAL(ExchangeCountry::Latvia, exchange.country()) << "Xris";
        exchange.mic(ExchangeMic::Fnlv);
        ASSERT_EQUAL(ExchangeCountry::Latvia, exchange.country()) << "Fnlv";
        exchange.mic(ExchangeMic::Xbey);
        ASSERT_EQUAL(ExchangeCountry::Lebanon, exchange.country()) << "Xbey";
        exchange.mic(ExchangeMic::Xlsm);
        ASSERT_EQUAL(ExchangeCountry::LibyanArabJamahiriya, exchange.country()) << "Xlsm";
        exchange.mic(ExchangeMic::Bapx);
        ASSERT_EQUAL(ExchangeCountry::Lithuania, exchange.country()) << "Bapx";
        exchange.mic(ExchangeMic::Getb);
        ASSERT_EQUAL(ExchangeCountry::Lithuania, exchange.country()) << "Getb";
        exchange.mic(ExchangeMic::Xlit);
        ASSERT_EQUAL(ExchangeCountry::Lithuania, exchange.country()) << "Xlit";
        exchange.mic(ExchangeMic::Fnlt);
        ASSERT_EQUAL(ExchangeCountry::Lithuania, exchange.country()) << "Fnlt";
        exchange.mic(ExchangeMic::Cclx);
        ASSERT_EQUAL(ExchangeCountry::Luxembourg, exchange.country()) << "Cclx";
        exchange.mic(ExchangeMic::Xlux);
        ASSERT_EQUAL(ExchangeCountry::Luxembourg, exchange.country()) << "Xlux";
        exchange.mic(ExchangeMic::Emtf);
        ASSERT_EQUAL(ExchangeCountry::Luxembourg, exchange.country()) << "Emtf";
        exchange.mic(ExchangeMic::Xves);
        ASSERT_EQUAL(ExchangeCountry::Luxembourg, exchange.country()) << "Xves";
        exchange.mic(ExchangeMic::Xmae);
        ASSERT_EQUAL(ExchangeCountry::Macedonia, exchange.country()) << "Xmae";
        exchange.mic(ExchangeMic::Xmdg);
        ASSERT_EQUAL(ExchangeCountry::Madagascar, exchange.country()) << "Xmdg";
        exchange.mic(ExchangeMic::Xmsw);
        ASSERT_EQUAL(ExchangeCountry::Malawi, exchange.country()) << "Xmsw";
        exchange.mic(ExchangeMic::Xkls);
        ASSERT_EQUAL(ExchangeCountry::Malaysia, exchange.country()) << "Xkls";
        exchange.mic(ExchangeMic::Mesq);
        ASSERT_EQUAL(ExchangeCountry::Malaysia, exchange.country()) << "Mesq";
        exchange.mic(ExchangeMic::Xlfx);
        ASSERT_EQUAL(ExchangeCountry::Malaysia, exchange.country()) << "Xlfx";
        exchange.mic(ExchangeMic::Xrbm);
        ASSERT_EQUAL(ExchangeCountry::Malaysia, exchange.country()) << "Xrbm";
        exchange.mic(ExchangeMic::Malx);
        ASSERT_EQUAL(ExchangeCountry::Maldives, exchange.country()) << "Malx";
        exchange.mic(ExchangeMic::Ewsm);
        ASSERT_EQUAL(ExchangeCountry::Malta, exchange.country()) << "Ewsm";
        exchange.mic(ExchangeMic::Xmal);
        ASSERT_EQUAL(ExchangeCountry::Malta, exchange.country()) << "Xmal";
        exchange.mic(ExchangeMic::Gbot);
        ASSERT_EQUAL(ExchangeCountry::Mauritius, exchange.country()) << "Gbot";
        exchange.mic(ExchangeMic::Xafx);
        ASSERT_EQUAL(ExchangeCountry::Mauritius, exchange.country()) << "Xafx";
        exchange.mic(ExchangeMic::Xmau);
        ASSERT_EQUAL(ExchangeCountry::Mauritius, exchange.country()) << "Xmau";
        exchange.mic(ExchangeMic::Cgmx);
        ASSERT_EQUAL(ExchangeCountry::Mexico, exchange.country()) << "Cgmx";
        exchange.mic(ExchangeMic::Xemd);
        ASSERT_EQUAL(ExchangeCountry::Mexico, exchange.country()) << "Xemd";
        exchange.mic(ExchangeMic::Xmex);
        ASSERT_EQUAL(ExchangeCountry::Mexico, exchange.country()) << "Xmex";
        exchange.mic(ExchangeMic::Xmol);
        ASSERT_EQUAL(ExchangeCountry::Moldova, exchange.country()) << "Xmol";
        exchange.mic(ExchangeMic::Xula);
        ASSERT_EQUAL(ExchangeCountry::Mongolia, exchange.country()) << "Xula";
        exchange.mic(ExchangeMic::Xmnx);
        ASSERT_EQUAL(ExchangeCountry::Montenegro, exchange.country()) << "Xmnx";
        exchange.mic(ExchangeMic::Xcas);
        ASSERT_EQUAL(ExchangeCountry::Morocco, exchange.country()) << "Xcas";
        exchange.mic(ExchangeMic::Xbvm);
        ASSERT_EQUAL(ExchangeCountry::Mozambique, exchange.country()) << "Xbvm";
        exchange.mic(ExchangeMic::Xnam);
        ASSERT_EQUAL(ExchangeCountry::Namibia, exchange.country()) << "Xnam";
        exchange.mic(ExchangeMic::Xnep);
        ASSERT_EQUAL(ExchangeCountry::Nepal, exchange.country()) << "Xnep";
        exchange.mic(ExchangeMic::Nzfx);
        ASSERT_EQUAL(ExchangeCountry::NewZealand, exchange.country()) << "Nzfx";
        exchange.mic(ExchangeMic::Xnze);
        ASSERT_EQUAL(ExchangeCountry::NewZealand, exchange.country()) << "Xnze";
        exchange.mic(ExchangeMic::Xman);
        ASSERT_EQUAL(ExchangeCountry::Nicaragua, exchange.country()) << "Xman";
        exchange.mic(ExchangeMic::Nasx);
        ASSERT_EQUAL(ExchangeCountry::Nigeria, exchange.country()) << "Nasx";
        exchange.mic(ExchangeMic::Xnsa);
        ASSERT_EQUAL(ExchangeCountry::Nigeria, exchange.country()) << "Xnsa";
        exchange.mic(ExchangeMic::Fish);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Fish";
        exchange.mic(ExchangeMic::Fshx);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Fshx";
        exchange.mic(ExchangeMic::Icas);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Icas";
        exchange.mic(ExchangeMic::Nexo);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Nexo";
        exchange.mic(ExchangeMic::Nops);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Nops";
        exchange.mic(ExchangeMic::Norx);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Norx";
        exchange.mic(ExchangeMic::Nosc);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Nosc";
        exchange.mic(ExchangeMic::Notc);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Notc";
        exchange.mic(ExchangeMic::Oslc);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Oslc";
        exchange.mic(ExchangeMic::Xima);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Xima";
        exchange.mic(ExchangeMic::Xosl);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Xosl";
        exchange.mic(ExchangeMic::Merd);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Merd";
        exchange.mic(ExchangeMic::Merk);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Merk";
        exchange.mic(ExchangeMic::Nibr);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Nibr";
        exchange.mic(ExchangeMic::Xoad);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Xoad";
        exchange.mic(ExchangeMic::Xoam);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Xoam";
        exchange.mic(ExchangeMic::Xoas);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Xoas";
        exchange.mic(ExchangeMic::Xosc);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Xosc";
        exchange.mic(ExchangeMic::Xosd);
        ASSERT_EQUAL(ExchangeCountry::Norway, exchange.country()) << "Xosd";
        exchange.mic(ExchangeMic::Xmus);
        ASSERT_EQUAL(ExchangeCountry::Oman, exchange.country()) << "Xmus";
        exchange.mic(ExchangeMic::Ncel);
        ASSERT_EQUAL(ExchangeCountry::Pakistan, exchange.country()) << "Ncel";
        exchange.mic(ExchangeMic::Xisl);
        ASSERT_EQUAL(ExchangeCountry::Pakistan, exchange.country()) << "Xisl";
        exchange.mic(ExchangeMic::Xkar);
        ASSERT_EQUAL(ExchangeCountry::Pakistan, exchange.country()) << "Xkar";
        exchange.mic(ExchangeMic::Xlah);
        ASSERT_EQUAL(ExchangeCountry::Pakistan, exchange.country()) << "Xlah";
        exchange.mic(ExchangeMic::Xpae);
        ASSERT_EQUAL(ExchangeCountry::PalestinianTerritory, exchange.country()) << "Xpae";
        exchange.mic(ExchangeMic::Xpty);
        ASSERT_EQUAL(ExchangeCountry::Panama, exchange.country()) << "Xpty";
        exchange.mic(ExchangeMic::Xpom);
        ASSERT_EQUAL(ExchangeCountry::PapuaNewGuinea, exchange.country()) << "Xpom";
        exchange.mic(ExchangeMic::Xvpa);
        ASSERT_EQUAL(ExchangeCountry::Paraguay, exchange.country()) << "Xvpa";
        exchange.mic(ExchangeMic::Xlim);
        ASSERT_EQUAL(ExchangeCountry::Peru, exchange.country()) << "Xlim";
        exchange.mic(ExchangeMic::Clph);
        ASSERT_EQUAL(ExchangeCountry::Philippines, exchange.country()) << "Clph";
        exchange.mic(ExchangeMic::Pdex);
        ASSERT_EQUAL(ExchangeCountry::Philippines, exchange.country()) << "Pdex";
        exchange.mic(ExchangeMic::Xphs);
        ASSERT_EQUAL(ExchangeCountry::Philippines, exchange.country()) << "Xphs";
        exchange.mic(ExchangeMic::Kdpw);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Kdpw";
        exchange.mic(ExchangeMic::Xwar);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Xwar";
        exchange.mic(ExchangeMic::Bosp);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Bosp";
        exchange.mic(ExchangeMic::Plpd);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Plpd";
        exchange.mic(ExchangeMic::Plpx);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Plpx";
        exchange.mic(ExchangeMic::Rpwc);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Rpwc";
        exchange.mic(ExchangeMic::Tbsp);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Tbsp";
        exchange.mic(ExchangeMic::Wbcl);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Wbcl";
        exchange.mic(ExchangeMic::Wbon);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Wbon";
        exchange.mic(ExchangeMic::Wder);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Wder";
        exchange.mic(ExchangeMic::Wetp);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Wetp";
        exchange.mic(ExchangeMic::Wgas);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Wgas";
        exchange.mic(ExchangeMic::Wind);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Wind";
        exchange.mic(ExchangeMic::Wmtf);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Wmtf";
        exchange.mic(ExchangeMic::Xnco);
        ASSERT_EQUAL(ExchangeCountry::Poland, exchange.country()) << "Xnco";
        exchange.mic(ExchangeMic::Omic);
        ASSERT_EQUAL(ExchangeCountry::Portugal, exchange.country()) << "Omic";
        exchange.mic(ExchangeMic::Opex);
        ASSERT_EQUAL(ExchangeCountry::Portugal, exchange.country()) << "Opex";
        exchange.mic(ExchangeMic::Xlis);
        ASSERT_EQUAL(ExchangeCountry::Portugal, exchange.country()) << "Xlis";
        exchange.mic(ExchangeMic::Alxl);
        ASSERT_EQUAL(ExchangeCountry::Portugal, exchange.country()) << "Alxl";
        exchange.mic(ExchangeMic::Enxl);
        ASSERT_EQUAL(ExchangeCountry::Portugal, exchange.country()) << "Enxl";
        exchange.mic(ExchangeMic::Mfox);
        ASSERT_EQUAL(ExchangeCountry::Portugal, exchange.country()) << "Mfox";
        exchange.mic(ExchangeMic::Omip);
        ASSERT_EQUAL(ExchangeCountry::Portugal, exchange.country()) << "Omip";
        exchange.mic(ExchangeMic::Wqxl);
        ASSERT_EQUAL(ExchangeCountry::Portugal, exchange.country()) << "Wqxl";
        exchange.mic(ExchangeMic::Dsmd);
        ASSERT_EQUAL(ExchangeCountry::Qatar, exchange.country()) << "Dsmd";
        exchange.mic(ExchangeMic::Trpx);
        ASSERT_EQUAL(ExchangeCountry::RepublicOfSeychelles, exchange.country()) << "Trpx";
        exchange.mic(ExchangeMic::Bmfx);
        ASSERT_EQUAL(ExchangeCountry::Romania, exchange.country()) << "Bmfx";
        exchange.mic(ExchangeMic::Bmfa);
        ASSERT_EQUAL(ExchangeCountry::Romania, exchange.country()) << "Bmfa";
        exchange.mic(ExchangeMic::Bmfm);
        ASSERT_EQUAL(ExchangeCountry::Romania, exchange.country()) << "Bmfm";
        exchange.mic(ExchangeMic::Sbmf);
        ASSERT_EQUAL(ExchangeCountry::Romania, exchange.country()) << "Sbmf";
        exchange.mic(ExchangeMic::Xbrm);
        ASSERT_EQUAL(ExchangeCountry::Romania, exchange.country()) << "Xbrm";
        exchange.mic(ExchangeMic::Xbse);
        ASSERT_EQUAL(ExchangeCountry::Romania, exchange.country()) << "Xbse";
        exchange.mic(ExchangeMic::Xbsd);
        ASSERT_EQUAL(ExchangeCountry::Romania, exchange.country()) << "Xbsd";
        exchange.mic(ExchangeMic::Xcan);
        ASSERT_EQUAL(ExchangeCountry::Romania, exchange.country()) << "Xcan";
        exchange.mic(ExchangeMic::Xras);
        ASSERT_EQUAL(ExchangeCountry::Romania, exchange.country()) << "Xras";
        exchange.mic(ExchangeMic::Xrpm);
        ASSERT_EQUAL(ExchangeCountry::Romania, exchange.country()) << "Xrpm";
        exchange.mic(ExchangeMic::Misx);
        ASSERT_EQUAL(ExchangeCountry::Russia, exchange.country()) << "Misx";
        exchange.mic(ExchangeMic::Rtsx);
        ASSERT_EQUAL(ExchangeCountry::Russia, exchange.country()) << "Rtsx";
        exchange.mic(ExchangeMic::Namx);
        ASSERT_EQUAL(ExchangeCountry::Russia, exchange.country()) << "Namx";
        exchange.mic(ExchangeMic::Rpdx);
        ASSERT_EQUAL(ExchangeCountry::Russia, exchange.country()) << "Rpdx";
        exchange.mic(ExchangeMic::Rusx);
        ASSERT_EQUAL(ExchangeCountry::Russia, exchange.country()) << "Rusx";
        exchange.mic(ExchangeMic::Spim);
        ASSERT_EQUAL(ExchangeCountry::Russia, exchange.country()) << "Spim";
        exchange.mic(ExchangeMic::Xmos);
        ASSERT_EQUAL(ExchangeCountry::Russia, exchange.country()) << "Xmos";
        exchange.mic(ExchangeMic::Xpet);
        ASSERT_EQUAL(ExchangeCountry::Russia, exchange.country()) << "Xpet";
        exchange.mic(ExchangeMic::Xpic);
        ASSERT_EQUAL(ExchangeCountry::Russia, exchange.country()) << "Xpic";
        exchange.mic(ExchangeMic::Xrus);
        ASSERT_EQUAL(ExchangeCountry::Russia, exchange.country()) << "Xrus";
        exchange.mic(ExchangeMic::Xsam);
        ASSERT_EQUAL(ExchangeCountry::Russia, exchange.country()) << "Xsam";
        exchange.mic(ExchangeMic::Xsib);
        ASSERT_EQUAL(ExchangeCountry::Russia, exchange.country()) << "Xsib";
        exchange.mic(ExchangeMic::Rotc);
        ASSERT_EQUAL(ExchangeCountry::Rwanda, exchange.country()) << "Rotc";
        exchange.mic(ExchangeMic::Rsex);
        ASSERT_EQUAL(ExchangeCountry::Rwanda, exchange.country()) << "Rsex";
        exchange.mic(ExchangeMic::Xecs);
        ASSERT_EQUAL(ExchangeCountry::SaintKittsNevis, exchange.country()) << "Xecs";
        exchange.mic(ExchangeMic::Xsau);
        ASSERT_EQUAL(ExchangeCountry::SaudiArabia, exchange.country()) << "Xsau";
        exchange.mic(ExchangeMic::Xbel);
        ASSERT_EQUAL(ExchangeCountry::Serbia, exchange.country()) << "Xbel";
        exchange.mic(ExchangeMic::Cltd);
        ASSERT_EQUAL(ExchangeCountry::Singapore, exchange.country()) << "Cltd";
        exchange.mic(ExchangeMic::Ecal);
        ASSERT_EQUAL(ExchangeCountry::Singapore, exchange.country()) << "Ecal";
        exchange.mic(ExchangeMic::Eeal);
        ASSERT_EQUAL(ExchangeCountry::Singapore, exchange.country()) << "Eeal";
        exchange.mic(ExchangeMic::Ifsg);
        ASSERT_EQUAL(ExchangeCountry::Singapore, exchange.country()) << "Ifsg";
        exchange.mic(ExchangeMic::Jadx);
        ASSERT_EQUAL(ExchangeCountry::Singapore, exchange.country()) << "Jadx";
        exchange.mic(ExchangeMic::Smex);
        ASSERT_EQUAL(ExchangeCountry::Singapore, exchange.country()) << "Smex";
        exchange.mic(ExchangeMic::Tfsa);
        ASSERT_EQUAL(ExchangeCountry::Singapore, exchange.country()) << "Tfsa";
        exchange.mic(ExchangeMic::Xses);
        ASSERT_EQUAL(ExchangeCountry::Singapore, exchange.country()) << "Xses";
        exchange.mic(ExchangeMic::Xsca);
        ASSERT_EQUAL(ExchangeCountry::Singapore, exchange.country()) << "Xsca";
        exchange.mic(ExchangeMic::Xsce);
        ASSERT_EQUAL(ExchangeCountry::Singapore, exchange.country()) << "Xsce";
        exchange.mic(ExchangeMic::Xsim);
        ASSERT_EQUAL(ExchangeCountry::Singapore, exchange.country()) << "Xsim";
        exchange.mic(ExchangeMic::Spxe);
        ASSERT_EQUAL(ExchangeCountry::Slovakia, exchange.country()) << "Spxe";
        exchange.mic(ExchangeMic::Xbra);
        ASSERT_EQUAL(ExchangeCountry::Slovakia, exchange.country()) << "Xbra";
        exchange.mic(ExchangeMic::Xlju);
        ASSERT_EQUAL(ExchangeCountry::Slovenia, exchange.country()) << "Xlju";
        exchange.mic(ExchangeMic::Xsop);
        ASSERT_EQUAL(ExchangeCountry::Slovenia, exchange.country()) << "Xsop";
        exchange.mic(ExchangeMic::Xjse);
        ASSERT_EQUAL(ExchangeCountry::SouthAfrica, exchange.country()) << "Xjse";
        exchange.mic(ExchangeMic::Altx);
        ASSERT_EQUAL(ExchangeCountry::SouthAfrica, exchange.country()) << "Altx";
        exchange.mic(ExchangeMic::Xbes);
        ASSERT_EQUAL(ExchangeCountry::SouthAfrica, exchange.country()) << "Xbes";
        exchange.mic(ExchangeMic::Xsaf);
        ASSERT_EQUAL(ExchangeCountry::SouthAfrica, exchange.country()) << "Xsaf";
        exchange.mic(ExchangeMic::Xsfa);
        ASSERT_EQUAL(ExchangeCountry::SouthAfrica, exchange.country()) << "Xsfa";
        exchange.mic(ExchangeMic::Yldx);
        ASSERT_EQUAL(ExchangeCountry::SouthAfrica, exchange.country()) << "Yldx";
        exchange.mic(ExchangeMic::Bmex);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Bmex";
        exchange.mic(ExchangeMic::Bmcl);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Bmcl";
        exchange.mic(ExchangeMic::Mabx);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Mabx";
        exchange.mic(ExchangeMic::Marf);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Marf";
        exchange.mic(ExchangeMic::Merf);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Merf";
        exchange.mic(ExchangeMic::Send);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Send";
        exchange.mic(ExchangeMic::Xbar);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Xbar";
        exchange.mic(ExchangeMic::Xbil);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Xbil";
        exchange.mic(ExchangeMic::Xdrf);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Xdrf";
        exchange.mic(ExchangeMic::Xlat);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Xlat";
        exchange.mic(ExchangeMic::Xmad);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Xmad";
        exchange.mic(ExchangeMic::Xmce);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Xmce";
        exchange.mic(ExchangeMic::Xmpw);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Xmpw";
        exchange.mic(ExchangeMic::Xmrv);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Xmrv";
        exchange.mic(ExchangeMic::Xval);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Xval";
        exchange.mic(ExchangeMic::Ibgh);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Ibgh";
        exchange.mic(ExchangeMic::Mibg);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Mibg";
        exchange.mic(ExchangeMic::Omel);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Omel";
        exchange.mic(ExchangeMic::Pave);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Pave";
        exchange.mic(ExchangeMic::Xdpa);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Xdpa";
        exchange.mic(ExchangeMic::Xnaf);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Xnaf";
        exchange.mic(ExchangeMic::Xsrm);
        ASSERT_EQUAL(ExchangeCountry::Spain, exchange.country()) << "Xsrm";
        exchange.mic(ExchangeMic::Xcol);
        ASSERT_EQUAL(ExchangeCountry::SriLanka, exchange.country()) << "Xcol";
        exchange.mic(ExchangeMic::Xkha);
        ASSERT_EQUAL(ExchangeCountry::Sudan, exchange.country()) << "Xkha";
        exchange.mic(ExchangeMic::Xswa);
        ASSERT_EQUAL(ExchangeCountry::Swaziland, exchange.country()) << "Xswa";
        exchange.mic(ExchangeMic::Cryd);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Cryd";
        exchange.mic(ExchangeMic::Cryx);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Cryx";
        exchange.mic(ExchangeMic::Sebx);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Sebx";
        exchange.mic(ExchangeMic::Ensx);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Ensx";
        exchange.mic(ExchangeMic::Xngm);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Xngm";
        exchange.mic(ExchangeMic::Nmtf);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Nmtf";
        exchange.mic(ExchangeMic::Xndx);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Xndx";
        exchange.mic(ExchangeMic::Xnmr);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Xnmr";
        exchange.mic(ExchangeMic::Xsat);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Xsat";
        exchange.mic(ExchangeMic::Xsto);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Xsto";
        exchange.mic(ExchangeMic::Csto);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Csto";
        exchange.mic(ExchangeMic::Dnse);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Dnse";
        exchange.mic(ExchangeMic::Dsto);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Dsto";
        exchange.mic(ExchangeMic::Fnse);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Fnse";
        exchange.mic(ExchangeMic::Xopv);
        ASSERT_EQUAL(ExchangeCountry::Sweden, exchange.country()) << "Xopv";
        exchange.mic(ExchangeMic::Aixe);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Aixe";
        exchange.mic(ExchangeMic::Dots);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Dots";
        exchange.mic(ExchangeMic::Euch);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Euch";
        exchange.mic(ExchangeMic::Eurm);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Eurm";
        exchange.mic(ExchangeMic::Eusc);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Eusc";
        exchange.mic(ExchangeMic::Eusp);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Eusp";
        exchange.mic(ExchangeMic::Stox);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Stox";
        exchange.mic(ExchangeMic::Xscu);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Xscu";
        exchange.mic(ExchangeMic::Xstv);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Xstv";
        exchange.mic(ExchangeMic::Xstx);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Xstx";
        exchange.mic(ExchangeMic::Ubsg);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Ubsg";
        exchange.mic(ExchangeMic::Ubsc);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Ubsc";
        exchange.mic(ExchangeMic::Ubsf);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Ubsf";
        exchange.mic(ExchangeMic::Xbrn);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Xbrn";
        exchange.mic(ExchangeMic::Xswx);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Xswx";
        exchange.mic(ExchangeMic::Xbtr);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Xbtr";
        exchange.mic(ExchangeMic::Xicb);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Xicb";
        exchange.mic(ExchangeMic::Xqmh);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Xqmh";
        exchange.mic(ExchangeMic::Xvtx);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Xvtx";
        exchange.mic(ExchangeMic::Zkbx);
        ASSERT_EQUAL(ExchangeCountry::Switzerland, exchange.country()) << "Zkbx";
        exchange.mic(ExchangeMic::Xdse);
        ASSERT_EQUAL(ExchangeCountry::Syria, exchange.country()) << "Xdse";
        exchange.mic(ExchangeMic::Roco);
        ASSERT_EQUAL(ExchangeCountry::Taiwan, exchange.country()) << "Roco";
        exchange.mic(ExchangeMic::Xtaf);
        ASSERT_EQUAL(ExchangeCountry::Taiwan, exchange.country()) << "Xtaf";
        exchange.mic(ExchangeMic::Xtai);
        ASSERT_EQUAL(ExchangeCountry::Taiwan, exchange.country()) << "Xtai";
        exchange.mic(ExchangeMic::Xdar);
        ASSERT_EQUAL(ExchangeCountry::Tanzania, exchange.country()) << "Xdar";
        exchange.mic(ExchangeMic::Afet);
        ASSERT_EQUAL(ExchangeCountry::Thailand, exchange.country()) << "Afet";
        exchange.mic(ExchangeMic::Beex);
        ASSERT_EQUAL(ExchangeCountry::Thailand, exchange.country()) << "Beex";
        exchange.mic(ExchangeMic::Tfex);
        ASSERT_EQUAL(ExchangeCountry::Thailand, exchange.country()) << "Tfex";
        exchange.mic(ExchangeMic::Xbkk);
        ASSERT_EQUAL(ExchangeCountry::Thailand, exchange.country()) << "Xbkk";
        exchange.mic(ExchangeMic::Xbkf);
        ASSERT_EQUAL(ExchangeCountry::Thailand, exchange.country()) << "Xbkf";
        exchange.mic(ExchangeMic::Xmai);
        ASSERT_EQUAL(ExchangeCountry::Thailand, exchange.country()) << "Xmai";
        exchange.mic(ExchangeMic::Clmx);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Clmx";
        exchange.mic(ExchangeMic::Hchc);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Hchc";
        exchange.mic(ExchangeMic::Ndex);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Ndex";
        exchange.mic(ExchangeMic::Ndxs);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Ndxs";
        exchange.mic(ExchangeMic::Nlpx);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Nlpx";
        exchange.mic(ExchangeMic::Tomx);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Tomx";
        exchange.mic(ExchangeMic::Tomd);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Tomd";
        exchange.mic(ExchangeMic::Xams);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Xams";
        exchange.mic(ExchangeMic::Alxa);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Alxa";
        exchange.mic(ExchangeMic::Tnla);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Tnla";
        exchange.mic(ExchangeMic::Xeuc);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Xeuc";
        exchange.mic(ExchangeMic::Xeue);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Xeue";
        exchange.mic(ExchangeMic::Xeui);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Xeui";
        exchange.mic(ExchangeMic::Xems);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Xems";
        exchange.mic(ExchangeMic::Xhft);
        ASSERT_EQUAL(ExchangeCountry::Netherlands, exchange.country()) << "Xhft";
        exchange.mic(ExchangeMic::Xtrn);
        ASSERT_EQUAL(ExchangeCountry::TrinidadTobago, exchange.country()) << "Xtrn";
        exchange.mic(ExchangeMic::Xtun);
        ASSERT_EQUAL(ExchangeCountry::Tunisia, exchange.country()) << "Xtun";
        exchange.mic(ExchangeMic::Xist);
        ASSERT_EQUAL(ExchangeCountry::Turkey, exchange.country()) << "Xist";
        exchange.mic(ExchangeMic::Xdsm);
        ASSERT_EQUAL(ExchangeCountry::Turkey, exchange.country()) << "Xdsm";
        exchange.mic(ExchangeMic::Xeqy);
        ASSERT_EQUAL(ExchangeCountry::Turkey, exchange.country()) << "Xeqy";
        exchange.mic(ExchangeMic::Xfno);
        ASSERT_EQUAL(ExchangeCountry::Turkey, exchange.country()) << "Xfno";
        exchange.mic(ExchangeMic::Xpms);
        ASSERT_EQUAL(ExchangeCountry::Turkey, exchange.country()) << "Xpms";
        exchange.mic(ExchangeMic::Ultx);
        ASSERT_EQUAL(ExchangeCountry::Uganda, exchange.country()) << "Ultx";
        exchange.mic(ExchangeMic::Xuga);
        ASSERT_EQUAL(ExchangeCountry::Uganda, exchange.country()) << "Xuga";
        exchange.mic(ExchangeMic::Eese);
        ASSERT_EQUAL(ExchangeCountry::Ukraine, exchange.country()) << "Eese";
        exchange.mic(ExchangeMic::Pfts);
        ASSERT_EQUAL(ExchangeCountry::Ukraine, exchange.country()) << "Pfts";
        exchange.mic(ExchangeMic::Pftq);
        ASSERT_EQUAL(ExchangeCountry::Ukraine, exchange.country()) << "Pftq";
        exchange.mic(ExchangeMic::Sepe);
        ASSERT_EQUAL(ExchangeCountry::Ukraine, exchange.country()) << "Sepe";
        exchange.mic(ExchangeMic::Ukex);
        ASSERT_EQUAL(ExchangeCountry::Ukraine, exchange.country()) << "Ukex";
        exchange.mic(ExchangeMic::Xdfb);
        ASSERT_EQUAL(ExchangeCountry::Ukraine, exchange.country()) << "Xdfb";
        exchange.mic(ExchangeMic::Xkhr);
        ASSERT_EQUAL(ExchangeCountry::Ukraine, exchange.country()) << "Xkhr";
        exchange.mic(ExchangeMic::Xkie);
        ASSERT_EQUAL(ExchangeCountry::Ukraine, exchange.country()) << "Xkie";
        exchange.mic(ExchangeMic::Xkis);
        ASSERT_EQUAL(ExchangeCountry::Ukraine, exchange.country()) << "Xkis";
        exchange.mic(ExchangeMic::Xode);
        ASSERT_EQUAL(ExchangeCountry::Ukraine, exchange.country()) << "Xode";
        exchange.mic(ExchangeMic::Xpri);
        ASSERT_EQUAL(ExchangeCountry::Ukraine, exchange.country()) << "Xpri";
        exchange.mic(ExchangeMic::Xuax);
        ASSERT_EQUAL(ExchangeCountry::Ukraine, exchange.country()) << "Xuax";
        exchange.mic(ExchangeMic::Xukr);
        ASSERT_EQUAL(ExchangeCountry::Ukraine, exchange.country()) << "Xukr";
        exchange.mic(ExchangeMic::Dgcx);
        ASSERT_EQUAL(ExchangeCountry::ArabEmirates, exchange.country()) << "Dgcx";
        exchange.mic(ExchangeMic::Difx);
        ASSERT_EQUAL(ExchangeCountry::ArabEmirates, exchange.country()) << "Difx";
        exchange.mic(ExchangeMic::Dumx);
        ASSERT_EQUAL(ExchangeCountry::ArabEmirates, exchange.country()) << "Dumx";
        exchange.mic(ExchangeMic::Xads);
        ASSERT_EQUAL(ExchangeCountry::ArabEmirates, exchange.country()) << "Xads";
        exchange.mic(ExchangeMic::Xdfm);
        ASSERT_EQUAL(ExchangeCountry::ArabEmirates, exchange.country()) << "Xdfm";
        exchange.mic(ExchangeMic::Aqxe);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Aqxe";
        exchange.mic(ExchangeMic::Balt);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Balt";
        exchange.mic(ExchangeMic::Bltx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Bltx";
        exchange.mic(ExchangeMic::Bcxe);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Bcxe";
        exchange.mic(ExchangeMic::Batd);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Batd";
        exchange.mic(ExchangeMic::Bate);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Bate";
        exchange.mic(ExchangeMic::Batf);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Batf";
        exchange.mic(ExchangeMic::Batp);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Batp";
        exchange.mic(ExchangeMic::Botc);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Botc";
        exchange.mic(ExchangeMic::Chid);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Chid";
        exchange.mic(ExchangeMic::Chio);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Chio";
        exchange.mic(ExchangeMic::Chix);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Chix";
        exchange.mic(ExchangeMic::Bgci);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Bgci";
        exchange.mic(ExchangeMic::Bgcb);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Bgcb";
        exchange.mic(ExchangeMic::Blox);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Blox";
        exchange.mic(ExchangeMic::Bmtf);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Bmtf";
        exchange.mic(ExchangeMic::Boat);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Boat";
        exchange.mic(ExchangeMic::Bosc);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Bosc";
        exchange.mic(ExchangeMic::Brnx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Brnx";
        exchange.mic(ExchangeMic::Caze);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Caze";
        exchange.mic(ExchangeMic::Cco2);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Cco2";
        exchange.mic(ExchangeMic::Cgme);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Cgme";
        exchange.mic(ExchangeMic::Chev);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Chev";
        exchange.mic(ExchangeMic::Blnk);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Blnk";
        exchange.mic(ExchangeMic::Cmee);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Cmee";
        exchange.mic(ExchangeMic::Cmec);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Cmec";
        exchange.mic(ExchangeMic::Cmed);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Cmed";
        exchange.mic(ExchangeMic::Cmmt);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Cmmt";
        exchange.mic(ExchangeMic::Cseu);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Cseu";
        exchange.mic(ExchangeMic::Cscf);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Cscf";
        exchange.mic(ExchangeMic::Dbix);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Dbix";
        exchange.mic(ExchangeMic::Dbcr);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Dbcr";
        exchange.mic(ExchangeMic::Dbcx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Dbcx";
        exchange.mic(ExchangeMic::Dbdc);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Dbdc";
        exchange.mic(ExchangeMic::Dbmo);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Dbmo";
        exchange.mic(ExchangeMic::Dbse);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Dbse";
        exchange.mic(ExchangeMic::Encl);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Encl";
        exchange.mic(ExchangeMic::Eqld);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Eqld";
        exchange.mic(ExchangeMic::Exeu);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Exeu";
        exchange.mic(ExchangeMic::Exbo);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Exbo";
        exchange.mic(ExchangeMic::Excp);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Excp";
        exchange.mic(ExchangeMic::Exmp);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Exmp";
        exchange.mic(ExchangeMic::Exor);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Exor";
        exchange.mic(ExchangeMic::Exsi);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Exsi";
        exchange.mic(ExchangeMic::Exvp);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Exvp";
        exchange.mic(ExchangeMic::Fair);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Fair";
        exchange.mic(ExchangeMic::Gemx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Gemx";
        exchange.mic(ExchangeMic::Gfic);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Gfic";
        exchange.mic(ExchangeMic::Gfif);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Gfif";
        exchange.mic(ExchangeMic::Gfin);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Gfin";
        exchange.mic(ExchangeMic::Gfir);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Gfir";
        exchange.mic(ExchangeMic::Gmeg);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Gmeg";
        exchange.mic(ExchangeMic::Xgcx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xgcx";
        exchange.mic(ExchangeMic::Xgdx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xgdx";
        exchange.mic(ExchangeMic::Xgsx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xgsx";
        exchange.mic(ExchangeMic::Xldx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xldx";
        exchange.mic(ExchangeMic::Grif);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Grif";
        exchange.mic(ExchangeMic::Grse);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Grse";
        exchange.mic(ExchangeMic::Hsxe);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Hsxe";
        exchange.mic(ExchangeMic::Ibal);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Ibal";
        exchange.mic(ExchangeMic::Icap);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Icap";
        exchange.mic(ExchangeMic::Btee);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Btee";
        exchange.mic(ExchangeMic::Ebsx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Ebsx";
        exchange.mic(ExchangeMic::Icah);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Icah";
        exchange.mic(ExchangeMic::Icen);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Icen";
        exchange.mic(ExchangeMic::Icse);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Icse";
        exchange.mic(ExchangeMic::Ictq);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Ictq";
        exchange.mic(ExchangeMic::Isdx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Isdx";
        exchange.mic(ExchangeMic::Wclk);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Wclk";
        exchange.mic(ExchangeMic::Ifeu);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Ifeu";
        exchange.mic(ExchangeMic::Cxrt);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Cxrt";
        exchange.mic(ExchangeMic::Ifen);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Ifen";
        exchange.mic(ExchangeMic::Ifll);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Ifll";
        exchange.mic(ExchangeMic::Iflo);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Iflo";
        exchange.mic(ExchangeMic::Iflx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Iflx";
        exchange.mic(ExchangeMic::Ifut);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Ifut";
        exchange.mic(ExchangeMic::Iswa);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Iswa";
        exchange.mic(ExchangeMic::Kleu);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Kleu";
        exchange.mic(ExchangeMic::Liqu);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Liqu";
        exchange.mic(ExchangeMic::Liqf);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Liqf";
        exchange.mic(ExchangeMic::Liqh);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Liqh";
        exchange.mic(ExchangeMic::Lmax);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Lmax";
        exchange.mic(ExchangeMic::Lmad);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Lmad";
        exchange.mic(ExchangeMic::Lmae);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Lmae";
        exchange.mic(ExchangeMic::Lmaf);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Lmaf";
        exchange.mic(ExchangeMic::Lmao);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Lmao";
        exchange.mic(ExchangeMic::Lmec);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Lmec";
        exchange.mic(ExchangeMic::Lotc);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Lotc";
        exchange.mic(ExchangeMic::Pldx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Pldx";
        exchange.mic(ExchangeMic::Lppm);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Lppm";
        exchange.mic(ExchangeMic::Mael);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Mael";
        exchange.mic(ExchangeMic::Mfgl);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Mfgl";
        exchange.mic(ExchangeMic::Mlxn);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Mlxn";
        exchange.mic(ExchangeMic::Mlax);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Mlax";
        exchange.mic(ExchangeMic::Mleu);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Mleu";
        exchange.mic(ExchangeMic::Mlve);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Mlve";
        exchange.mic(ExchangeMic::Msip);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Msip";
        exchange.mic(ExchangeMic::Mytr);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Mytr";
        exchange.mic(ExchangeMic::N2Ex);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "N2Ex";
        exchange.mic(ExchangeMic::Ndcm);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Ndcm";
        exchange.mic(ExchangeMic::Noff);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Noff";
        exchange.mic(ExchangeMic::Nuro);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Nuro";
        exchange.mic(ExchangeMic::Nurd);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Nurd";
        exchange.mic(ExchangeMic::Xnlx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xnlx";
        exchange.mic(ExchangeMic::Nxeu);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Nxeu";
        exchange.mic(ExchangeMic::Peel);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Peel";
        exchange.mic(ExchangeMic::Xphx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xphx";
        exchange.mic(ExchangeMic::Xrsp);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xrsp";
        exchange.mic(ExchangeMic::Pieu);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Pieu";
        exchange.mic(ExchangeMic::Pirm);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Pirm";
        exchange.mic(ExchangeMic::Qwix);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Qwix";
        exchange.mic(ExchangeMic::Rbce);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Rbce";
        exchange.mic(ExchangeMic::Rbsx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Rbsx";
        exchange.mic(ExchangeMic::Rtsl);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Rtsl";
        exchange.mic(ExchangeMic::Secf);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Secf";
        exchange.mic(ExchangeMic::Sgmx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Sgmx";
        exchange.mic(ExchangeMic::Shar);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Shar";
        exchange.mic(ExchangeMic::Spec);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Spec";
        exchange.mic(ExchangeMic::Sprz);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Sprz";
        exchange.mic(ExchangeMic::Ssex);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Ssex";
        exchange.mic(ExchangeMic::Swap);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Swap";
        exchange.mic(ExchangeMic::Tfsv);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Tfsv";
        exchange.mic(ExchangeMic::Tpie);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Tpie";
        exchange.mic(ExchangeMic::Trde);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Trde";
        exchange.mic(ExchangeMic::Dbvx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Dbvx";
        exchange.mic(ExchangeMic::Parx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Parx";
        exchange.mic(ExchangeMic::Tcds);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Tcds";
        exchange.mic(ExchangeMic::Tfsg);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Tfsg";
        exchange.mic(ExchangeMic::Trdx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Trdx";
        exchange.mic(ExchangeMic::Vola);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Vola";
        exchange.mic(ExchangeMic::Treu);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Treu";
        exchange.mic(ExchangeMic::Trqx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Trqx";
        exchange.mic(ExchangeMic::Trqm);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Trqm";
        exchange.mic(ExchangeMic::Ubsl);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Ubsl";
        exchange.mic(ExchangeMic::Ubse);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Ubse";
        exchange.mic(ExchangeMic::Ukgd);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Ukgd";
        exchange.mic(ExchangeMic::Ukpx);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Ukpx";
        exchange.mic(ExchangeMic::Vega);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Vega";
        exchange.mic(ExchangeMic::Wins);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Wins";
        exchange.mic(ExchangeMic::Xalt);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xalt";
        exchange.mic(ExchangeMic::Xcor);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xcor";
        exchange.mic(ExchangeMic::Xgcl);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xgcl";
        exchange.mic(ExchangeMic::Xlbm);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xlbm";
        exchange.mic(ExchangeMic::Xlch);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xlch";
        exchange.mic(ExchangeMic::Xldn);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xldn";
        exchange.mic(ExchangeMic::Xlme);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xlme";
        exchange.mic(ExchangeMic::Xlon);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xlon";
        exchange.mic(ExchangeMic::Xlod);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xlod";
        exchange.mic(ExchangeMic::Xmts);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xmts";
        exchange.mic(ExchangeMic::Amts);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Amts";
        exchange.mic(ExchangeMic::Bvuk);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Bvuk";
        exchange.mic(ExchangeMic::Eacm);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Eacm";
        exchange.mic(ExchangeMic::Emts);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Emts";
        exchange.mic(ExchangeMic::Gmts);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Gmts";
        exchange.mic(ExchangeMic::Hung);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Hung";
        exchange.mic(ExchangeMic::Imts);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Imts";
        exchange.mic(ExchangeMic::Mczk);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Mczk";
        exchange.mic(ExchangeMic::Mtsa);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Mtsa";
        exchange.mic(ExchangeMic::Mtsg);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Mtsg";
        exchange.mic(ExchangeMic::Mtss);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Mtss";
        exchange.mic(ExchangeMic::Mtsw);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Mtsw";
        exchange.mic(ExchangeMic::Port);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Port";
        exchange.mic(ExchangeMic::Prme);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Prme";
        exchange.mic(ExchangeMic::Rmts);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Rmts";
        exchange.mic(ExchangeMic::Smts);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Smts";
        exchange.mic(ExchangeMic::Vmts);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Vmts";
        exchange.mic(ExchangeMic::Xsga);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xsga";
        exchange.mic(ExchangeMic::Xsmp);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xsmp";
        exchange.mic(ExchangeMic::Xswb);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xswb";
        exchange.mic(ExchangeMic::Xtup);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xtup";
        exchange.mic(ExchangeMic::Tben);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Tben";
        exchange.mic(ExchangeMic::Tbla);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Tbla";
        exchange.mic(ExchangeMic::Tpcd);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Tpcd";
        exchange.mic(ExchangeMic::Tpeq);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Tpeq";
        exchange.mic(ExchangeMic::Tpfd);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Tpfd";
        exchange.mic(ExchangeMic::Tpre);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Tpre";
        exchange.mic(ExchangeMic::Tpsd);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Tpsd";
        exchange.mic(ExchangeMic::Tpsp);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Tpsp";
        exchange.mic(ExchangeMic::Xtpe);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xtpe";
        exchange.mic(ExchangeMic::Xubs);
        ASSERT_EQUAL(ExchangeCountry::UnitedKingdom, exchange.country()) << "Xubs";
        exchange.mic(ExchangeMic::Aats);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Aats";
        exchange.mic(ExchangeMic::Aqua);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Aqua";
        exchange.mic(ExchangeMic::Atdf);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Atdf";
        exchange.mic(ExchangeMic::Core);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Core";
        exchange.mic(ExchangeMic::Baml);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Baml";
        exchange.mic(ExchangeMic::Mlco);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mlco";
        exchange.mic(ExchangeMic::Mlvx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mlvx";
        exchange.mic(ExchangeMic::Barx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Barx";
        exchange.mic(ExchangeMic::Bard);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bard";
        exchange.mic(ExchangeMic::Barl);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Barl";
        exchange.mic(ExchangeMic::Bcdx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bcdx";
        exchange.mic(ExchangeMic::Bats);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bats";
        exchange.mic(ExchangeMic::Bato);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bato";
        exchange.mic(ExchangeMic::Baty);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Baty";
        exchange.mic(ExchangeMic::Byxd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Byxd";
        exchange.mic(ExchangeMic::Bzxd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bzxd";
        exchange.mic(ExchangeMic::Bbsf);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bbsf";
        exchange.mic(ExchangeMic::Bgcf);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bgcf";
        exchange.mic(ExchangeMic::Bgcd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bgcd";
        exchange.mic(ExchangeMic::Bids);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bids";
        exchange.mic(ExchangeMic::Bltd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bltd";
        exchange.mic(ExchangeMic::Bpol);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bpol";
        exchange.mic(ExchangeMic::Bndd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bndd";
        exchange.mic(ExchangeMic::Bnyc);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bnyc";
        exchange.mic(ExchangeMic::Nyfx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Nyfx";
        exchange.mic(ExchangeMic::Vtex);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Vtex";
        exchange.mic(ExchangeMic::Btec);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Btec";
        exchange.mic(ExchangeMic::Icsu);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Icsu";
        exchange.mic(ExchangeMic::Cded);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Cded";
        exchange.mic(ExchangeMic::Cgmi);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Cgmi";
        exchange.mic(ExchangeMic::Cblc);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Cblc";
        exchange.mic(ExchangeMic::Cgmu);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Cgmu";
        exchange.mic(ExchangeMic::Cicx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Cicx";
        exchange.mic(ExchangeMic::Lqfi);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Lqfi";
        exchange.mic(ExchangeMic::Cmsf);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Cmsf";
        exchange.mic(ExchangeMic::Cred);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Cred";
        exchange.mic(ExchangeMic::Caes);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Caes";
        exchange.mic(ExchangeMic::Cslp);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Cslp";
        exchange.mic(ExchangeMic::Dbsx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Dbsx";
        exchange.mic(ExchangeMic::Deal);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Deal";
        exchange.mic(ExchangeMic::Edge);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Edge";
        exchange.mic(ExchangeMic::Eddp);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Eddp";
        exchange.mic(ExchangeMic::Edga);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Edga";
        exchange.mic(ExchangeMic::Edgd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Edgd";
        exchange.mic(ExchangeMic::Edgo);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Edgo";
        exchange.mic(ExchangeMic::Edgx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Edgx";
        exchange.mic(ExchangeMic::Eris);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Eris";
        exchange.mic(ExchangeMic::Fast);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Fast";
        exchange.mic(ExchangeMic::Finr);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Finr";
        exchange.mic(ExchangeMic::Finn);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Finn";
        exchange.mic(ExchangeMic::Fino);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Fino";
        exchange.mic(ExchangeMic::Finy);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Finy";
        exchange.mic(ExchangeMic::Ootc);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Ootc";
        exchange.mic(ExchangeMic::Xadf);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xadf";
        exchange.mic(ExchangeMic::Fxal);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Fxal";
        exchange.mic(ExchangeMic::Fxcm);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Fxcm";
        exchange.mic(ExchangeMic::G1xx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "G1xx";
        exchange.mic(ExchangeMic::Gllc);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Gllc";
        exchange.mic(ExchangeMic::Glps);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Glps";
        exchange.mic(ExchangeMic::Govx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Govx";
        exchange.mic(ExchangeMic::Gree);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Gree";
        exchange.mic(ExchangeMic::Gsef);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Gsef";
        exchange.mic(ExchangeMic::Gtco);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Gtco";
        exchange.mic(ExchangeMic::Hegx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Hegx";
        exchange.mic(ExchangeMic::Hppo);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Hppo";
        exchange.mic(ExchangeMic::Hsfx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Hsfx";
        exchange.mic(ExchangeMic::Icel);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Icel";
        exchange.mic(ExchangeMic::Iexg);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Iexg";
        exchange.mic(ExchangeMic::Ifus);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Ifus";
        exchange.mic(ExchangeMic::Ices);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Ices";
        exchange.mic(ExchangeMic::Iepa);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Iepa";
        exchange.mic(ExchangeMic::Ifed);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Ifed";
        exchange.mic(ExchangeMic::Imag);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Imag";
        exchange.mic(ExchangeMic::Imbd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Imbd";
        exchange.mic(ExchangeMic::Imcc);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Imcc";
        exchange.mic(ExchangeMic::Imcg);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Imcg";
        exchange.mic(ExchangeMic::Imco);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Imco";
        exchange.mic(ExchangeMic::Imcr);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Imcr";
        exchange.mic(ExchangeMic::Imen);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Imen";
        exchange.mic(ExchangeMic::Imeq);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Imeq";
        exchange.mic(ExchangeMic::Imfx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Imfx";
        exchange.mic(ExchangeMic::Imir);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Imir";
        exchange.mic(ExchangeMic::Isda);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Isda";
        exchange.mic(ExchangeMic::Itgi);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Itgi";
        exchange.mic(ExchangeMic::Jefx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Jefx";
        exchange.mic(ExchangeMic::Jpmx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Jpmx";
        exchange.mic(ExchangeMic::Jsef);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Jsef";
        exchange.mic(ExchangeMic::Jses);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Jses";
        exchange.mic(ExchangeMic::Jsjx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Jsjx";
        exchange.mic(ExchangeMic::Knig);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Knig";
        exchange.mic(ExchangeMic::Kncm);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Kncm";
        exchange.mic(ExchangeMic::Knem);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Knem";
        exchange.mic(ExchangeMic::Knli);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Knli";
        exchange.mic(ExchangeMic::Knmx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Knmx";
        exchange.mic(ExchangeMic::Lasf);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Lasf";
        exchange.mic(ExchangeMic::Levl);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Levl";
        exchange.mic(ExchangeMic::Lius);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Lius";
        exchange.mic(ExchangeMic::Lifi);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Lifi";
        exchange.mic(ExchangeMic::Liuh);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Liuh";
        exchange.mic(ExchangeMic::Lqed);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Lqed";
        exchange.mic(ExchangeMic::Ltaa);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Ltaa";
        exchange.mic(ExchangeMic::Lmnx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Lmnx";
        exchange.mic(ExchangeMic::Mihi);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mihi";
        exchange.mic(ExchangeMic::Mprl);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mprl";
        exchange.mic(ExchangeMic::Xmio);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xmio";
        exchange.mic(ExchangeMic::Msco);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Msco";
        exchange.mic(ExchangeMic::Mslp);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mslp";
        exchange.mic(ExchangeMic::Mspl);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mspl";
        exchange.mic(ExchangeMic::Msrp);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Msrp";
        exchange.mic(ExchangeMic::Mstx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mstx";
        exchange.mic(ExchangeMic::Mtus);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mtus";
        exchange.mic(ExchangeMic::Bvus);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bvus";
        exchange.mic(ExchangeMic::Mtsb);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mtsb";
        exchange.mic(ExchangeMic::Mtxx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mtxx";
        exchange.mic(ExchangeMic::Mtxa);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mtxa";
        exchange.mic(ExchangeMic::Mtxc);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mtxc";
        exchange.mic(ExchangeMic::Mtxm);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mtxm";
        exchange.mic(ExchangeMic::Mtxs);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mtxs";
        exchange.mic(ExchangeMic::Nblx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Nblx";
        exchange.mic(ExchangeMic::Nfsc);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Nfsc";
        exchange.mic(ExchangeMic::Nfsa);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Nfsa";
        exchange.mic(ExchangeMic::Nfsd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Nfsd";
        exchange.mic(ExchangeMic::Xstm);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xstm";
        exchange.mic(ExchangeMic::Nmra);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Nmra";
        exchange.mic(ExchangeMic::Nodx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Nodx";
        exchange.mic(ExchangeMic::Nxus);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Nxus";
        exchange.mic(ExchangeMic::Nypc);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Nypc";
        exchange.mic(ExchangeMic::Ollc);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Ollc";
        exchange.mic(ExchangeMic::Opra);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Opra";
        exchange.mic(ExchangeMic::Otcm);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Otcm";
        exchange.mic(ExchangeMic::Cave);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Cave";
        exchange.mic(ExchangeMic::Otcb);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Otcb";
        exchange.mic(ExchangeMic::Otcq);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Otcq";
        exchange.mic(ExchangeMic::Pinc);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Pinc";
        exchange.mic(ExchangeMic::Pini);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Pini";
        exchange.mic(ExchangeMic::Pinl);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Pinl";
        exchange.mic(ExchangeMic::Pinx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Pinx";
        exchange.mic(ExchangeMic::Psgm);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Psgm";
        exchange.mic(ExchangeMic::Pdqx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Pdqx";
        exchange.mic(ExchangeMic::Pdqd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Pdqd";
        exchange.mic(ExchangeMic::Pipe);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Pipe";
        exchange.mic(ExchangeMic::Prse);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Prse";
        exchange.mic(ExchangeMic::Pulx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Pulx";
        exchange.mic(ExchangeMic::Ricx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Ricx";
        exchange.mic(ExchangeMic::Ricd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Ricd";
        exchange.mic(ExchangeMic::Sgma);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Sgma";
        exchange.mic(ExchangeMic::Shaw);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Shaw";
        exchange.mic(ExchangeMic::Shad);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Shad";
        exchange.mic(ExchangeMic::Soho);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Soho";
        exchange.mic(ExchangeMic::Sstx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Sstx";
        exchange.mic(ExchangeMic::Tera);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Tera";
        exchange.mic(ExchangeMic::Tfsu);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Tfsu";
        exchange.mic(ExchangeMic::Trck);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Trck";
        exchange.mic(ExchangeMic::Trux);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Trux";
        exchange.mic(ExchangeMic::Tru1);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Tru1";
        exchange.mic(ExchangeMic::Tru2);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Tru2";
        exchange.mic(ExchangeMic::Trwb);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Trwb";
        exchange.mic(ExchangeMic::Dwsf);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Dwsf";
        exchange.mic(ExchangeMic::Twsf);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Twsf";
        exchange.mic(ExchangeMic::Tsbx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Tsbx";
        exchange.mic(ExchangeMic::Tsef);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Tsef";
        exchange.mic(ExchangeMic::Ubsa);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Ubsa";
        exchange.mic(ExchangeMic::Ubsp);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Ubsp";
        exchange.mic(ExchangeMic::Welx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Welx";
        exchange.mic(ExchangeMic::Wsag);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Wsag";
        exchange.mic(ExchangeMic::Xaqs);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xaqs";
        exchange.mic(ExchangeMic::Xbox);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xbox";
        exchange.mic(ExchangeMic::Xcbo);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xcbo";
        exchange.mic(ExchangeMic::C2Ox);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "C2Ox";
        exchange.mic(ExchangeMic::Cbsx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Cbsx";
        exchange.mic(ExchangeMic::Xcbf);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xcbf";
        exchange.mic(ExchangeMic::Xcbt);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xcbt";
        exchange.mic(ExchangeMic::Fcbt);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Fcbt";
        exchange.mic(ExchangeMic::Xkbt);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xkbt";
        exchange.mic(ExchangeMic::Xcff);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xcff";
        exchange.mic(ExchangeMic::Xchi);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xchi";
        exchange.mic(ExchangeMic::Xcis);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xcis";
        exchange.mic(ExchangeMic::Xcme);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xcme";
        exchange.mic(ExchangeMic::Cbts);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Cbts";
        exchange.mic(ExchangeMic::Cecs);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Cecs";
        exchange.mic(ExchangeMic::Cmes);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Cmes";
        exchange.mic(ExchangeMic::Fcme);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Fcme";
        exchange.mic(ExchangeMic::Glbx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Glbx";
        exchange.mic(ExchangeMic::Nyms);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Nyms";
        exchange.mic(ExchangeMic::Ximm);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Ximm";
        exchange.mic(ExchangeMic::Xiom);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xiom";
        exchange.mic(ExchangeMic::Xcur);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xcur";
        exchange.mic(ExchangeMic::Xelx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xelx";
        exchange.mic(ExchangeMic::Xfci);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xfci";
        exchange.mic(ExchangeMic::Xgmx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xgmx";
        exchange.mic(ExchangeMic::Xins);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xins";
        exchange.mic(ExchangeMic::Iblx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Iblx";
        exchange.mic(ExchangeMic::Icbx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Icbx";
        exchange.mic(ExchangeMic::Icro);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Icro";
        exchange.mic(ExchangeMic::Iidx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Iidx";
        exchange.mic(ExchangeMic::Mocx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mocx";
        exchange.mic(ExchangeMic::Rcbx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Rcbx";
        exchange.mic(ExchangeMic::Xisx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xisx";
        exchange.mic(ExchangeMic::Gmni);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Gmni";
        exchange.mic(ExchangeMic::Mcry);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Mcry";
        exchange.mic(ExchangeMic::Xisa);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xisa";
        exchange.mic(ExchangeMic::Xise);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xise";
        exchange.mic(ExchangeMic::Xmer);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xmer";
        exchange.mic(ExchangeMic::Xmge);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xmge";
        exchange.mic(ExchangeMic::Xnas);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xnas";
        exchange.mic(ExchangeMic::Bosd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Bosd";
        exchange.mic(ExchangeMic::Espd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Espd";
        exchange.mic(ExchangeMic::Nasd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Nasd";
        exchange.mic(ExchangeMic::Xbos);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xbos";
        exchange.mic(ExchangeMic::Xbrt);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xbrt";
        exchange.mic(ExchangeMic::Xbxo);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xbxo";
        exchange.mic(ExchangeMic::Xncm);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xncm";
        exchange.mic(ExchangeMic::Xndq);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xndq";
        exchange.mic(ExchangeMic::Xngs);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xngs";
        exchange.mic(ExchangeMic::Xnim);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xnim";
        exchange.mic(ExchangeMic::Xnms);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xnms";
        exchange.mic(ExchangeMic::Xpbt);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xpbt";
        exchange.mic(ExchangeMic::Xphl);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xphl";
        exchange.mic(ExchangeMic::Xpho);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xpho";
        exchange.mic(ExchangeMic::Xpor);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xpor";
        exchange.mic(ExchangeMic::Xpsx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xpsx";
        exchange.mic(ExchangeMic::Xnym);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xnym";
        exchange.mic(ExchangeMic::Xcec);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xcec";
        exchange.mic(ExchangeMic::Xnye);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xnye";
        exchange.mic(ExchangeMic::Xnyl);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xnyl";
        exchange.mic(ExchangeMic::Xnys);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xnys";
        exchange.mic(ExchangeMic::Aldp);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Aldp";
        exchange.mic(ExchangeMic::Amxo);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Amxo";
        exchange.mic(ExchangeMic::Arcd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Arcd";
        exchange.mic(ExchangeMic::Arco);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Arco";
        exchange.mic(ExchangeMic::Arcx);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Arcx";
        exchange.mic(ExchangeMic::Nysd);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Nysd";
        exchange.mic(ExchangeMic::Xase);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xase";
        exchange.mic(ExchangeMic::Xnli);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xnli";
        exchange.mic(ExchangeMic::Xoch);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xoch";
        exchange.mic(ExchangeMic::Xotc);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xotc";
        exchange.mic(ExchangeMic::Xsef);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xsef";
        exchange.mic(ExchangeMic::Xwee);
        ASSERT_EQUAL(ExchangeCountry::UnitedStates, exchange.country()) << "Xwee";
        exchange.mic(ExchangeMic::Bvur);
        ASSERT_EQUAL(ExchangeCountry::Uruguay, exchange.country()) << "Bvur";
        exchange.mic(ExchangeMic::Xmnt);
        ASSERT_EQUAL(ExchangeCountry::Uruguay, exchange.country()) << "Xmnt";
        exchange.mic(ExchangeMic::Xcet);
        ASSERT_EQUAL(ExchangeCountry::Uzbekistan, exchange.country()) << "Xcet";
        exchange.mic(ExchangeMic::Xcue);
        ASSERT_EQUAL(ExchangeCountry::Uzbekistan, exchange.country()) << "Xcue";
        exchange.mic(ExchangeMic::Xkce);
        ASSERT_EQUAL(ExchangeCountry::Uzbekistan, exchange.country()) << "Xkce";
        exchange.mic(ExchangeMic::Xste);
        ASSERT_EQUAL(ExchangeCountry::Uzbekistan, exchange.country()) << "Xste";
        exchange.mic(ExchangeMic::Xuni);
        ASSERT_EQUAL(ExchangeCountry::Uzbekistan, exchange.country()) << "Xuni";
        exchange.mic(ExchangeMic::Gxma);
        ASSERT_EQUAL(ExchangeCountry::Vanuatu, exchange.country()) << "Gxma";
        exchange.mic(ExchangeMic::Bvca);
        ASSERT_EQUAL(ExchangeCountry::Venezuela, exchange.country()) << "Bvca";
        exchange.mic(ExchangeMic::Hstc);
        ASSERT_EQUAL(ExchangeCountry::VietNam, exchange.country()) << "Hstc";
        exchange.mic(ExchangeMic::Xhnx);
        ASSERT_EQUAL(ExchangeCountry::VietNam, exchange.country()) << "Xhnx";
        exchange.mic(ExchangeMic::Xstc);
        ASSERT_EQUAL(ExchangeCountry::VietNam, exchange.country()) << "Xstc";
        exchange.mic(ExchangeMic::Xlus);
        ASSERT_EQUAL(ExchangeCountry::Zambia, exchange.country()) << "Xlus";
        exchange.mic(ExchangeMic::Xzim);
        ASSERT_EQUAL(ExchangeCountry::Zimbabwe, exchange.country()) << "Xzim";
        exchange.mic(ExchangeMic::Xoff);
        ASSERT_EQUAL(ExchangeCountry::NoCountry, exchange.country()) << "Xoff";
        exchange.mic(ExchangeMic::Xxxx);
        ASSERT_EQUAL(ExchangeCountry::NoCountry, exchange.country()) << "Xxxx";
        exchange.mic(ExchangeMic::Xxxx);
        ASSERT_EQUAL(ExchangeCountry::NoCountry, exchange.country()) << "Xxxx";
    }

    TESTCASE("timeZoneMinutes() returns correct time zone value in minutes")
    {
        Exchange exchange;

        exchange.mic(ExchangeMic::Xtir);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xtir";
        exchange.mic(ExchangeMic::Xalg);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xalg";
        exchange.mic(ExchangeMic::Exaa);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Exaa";
        exchange.mic(ExchangeMic::Xwbo);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xwbo";
        exchange.mic(ExchangeMic::Wbah);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Wbah";
        exchange.mic(ExchangeMic::Wbdm);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Wbdm";
        exchange.mic(ExchangeMic::Wbgf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Wbgf";
        exchange.mic(ExchangeMic::Xceg);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xceg";
        exchange.mic(ExchangeMic::Xvie);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xvie";
        exchange.mic(ExchangeMic::Blpx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Blpx";
        exchange.mic(ExchangeMic::Bmts);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Bmts";
        exchange.mic(ExchangeMic::Mtsd);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Mtsd";
        exchange.mic(ExchangeMic::Mtsf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Mtsf";
        exchange.mic(ExchangeMic::Xbru);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xbru";
        exchange.mic(ExchangeMic::Alxb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Alxb";
        exchange.mic(ExchangeMic::Enxb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Enxb";
        exchange.mic(ExchangeMic::Mlxb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Mlxb";
        exchange.mic(ExchangeMic::Tnlb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Tnlb";
        exchange.mic(ExchangeMic::Vpxb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Vpxb";
        exchange.mic(ExchangeMic::Xbrd);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xbrd";
        exchange.mic(ExchangeMic::Xpra);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xpra";
        exchange.mic(ExchangeMic::Xprm);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xprm";
        exchange.mic(ExchangeMic::Xpxe);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xpxe";
        exchange.mic(ExchangeMic::Xrmz);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xrmz";
        exchange.mic(ExchangeMic::Xrmo);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xrmo";
        exchange.mic(ExchangeMic::Dktc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Dktc";
        exchange.mic(ExchangeMic::Gxgr);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Gxgr";
        exchange.mic(ExchangeMic::Gxgf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Gxgf";
        exchange.mic(ExchangeMic::Gxgm);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Gxgm";
        exchange.mic(ExchangeMic::Npga);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Npga";
        exchange.mic(ExchangeMic::Xcse);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xcse";
        exchange.mic(ExchangeMic::Dcse);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Dcse";
        exchange.mic(ExchangeMic::Dndk);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Dndk";
        exchange.mic(ExchangeMic::Fndk);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Fndk";
        exchange.mic(ExchangeMic::Coal);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Coal";
        exchange.mic(ExchangeMic::Epex);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Epex";
        exchange.mic(ExchangeMic::Fmts);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Fmts";
        exchange.mic(ExchangeMic::Gmtf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Gmtf";
        exchange.mic(ExchangeMic::Lchc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Lchc";
        exchange.mic(ExchangeMic::Xafr);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xafr";
        exchange.mic(ExchangeMic::Xbln);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xbln";
        exchange.mic(ExchangeMic::Xpar);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xpar";
        exchange.mic(ExchangeMic::Alxp);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Alxp";
        exchange.mic(ExchangeMic::Mtch);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Mtch";
        exchange.mic(ExchangeMic::Xmat);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xmat";
        exchange.mic(ExchangeMic::Xmli);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xmli";
        exchange.mic(ExchangeMic::Xmon);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xmon";
        exchange.mic(ExchangeMic::Xpow);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xpow";
        exchange.mic(ExchangeMic::Xpsf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xpsf";
        exchange.mic(ExchangeMic::X360T);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "X360T";
        exchange.mic(ExchangeMic::Cats);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Cats";
        exchange.mic(ExchangeMic::Dbox);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Dbox";
        exchange.mic(ExchangeMic::Auto);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Auto";
        exchange.mic(ExchangeMic::Tgat);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Tgat";
        exchange.mic(ExchangeMic::Xgat);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xgat";
        exchange.mic(ExchangeMic::Xgrm);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xgrm";
        exchange.mic(ExchangeMic::Xber);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xber";
        exchange.mic(ExchangeMic::Bera);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Bera";
        exchange.mic(ExchangeMic::Berb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Berb";
        exchange.mic(ExchangeMic::Berc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Berc";
        exchange.mic(ExchangeMic::Eqta);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Eqta";
        exchange.mic(ExchangeMic::Eqtb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Eqtb";
        exchange.mic(ExchangeMic::Eqtc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Eqtc";
        exchange.mic(ExchangeMic::Eqtd);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Eqtd";
        exchange.mic(ExchangeMic::Xeqt);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xeqt";
        exchange.mic(ExchangeMic::Zobx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Zobx";
        exchange.mic(ExchangeMic::Xdus);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xdus";
        exchange.mic(ExchangeMic::Dusa);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Dusa";
        exchange.mic(ExchangeMic::Dusb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Dusb";
        exchange.mic(ExchangeMic::Dusc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Dusc";
        exchange.mic(ExchangeMic::Dusd);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Dusd";
        exchange.mic(ExchangeMic::Xqtx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xqtx";
        exchange.mic(ExchangeMic::Xecb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xecb";
        exchange.mic(ExchangeMic::Xecc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xecc";
        exchange.mic(ExchangeMic::Xeee);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xeee";
        exchange.mic(ExchangeMic::Xeeo);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xeeo";
        exchange.mic(ExchangeMic::Xeer);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xeer";
        exchange.mic(ExchangeMic::Xeum);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xeum";
        exchange.mic(ExchangeMic::Xeur);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xeur";
        exchange.mic(ExchangeMic::Ecag);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Ecag";
        exchange.mic(ExchangeMic::Xere);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xere";
        exchange.mic(ExchangeMic::Xert);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xert";
        exchange.mic(ExchangeMic::Xeub);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xeub";
        exchange.mic(ExchangeMic::Xeup);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xeup";
        exchange.mic(ExchangeMic::Xfra);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xfra";
        exchange.mic(ExchangeMic::Fraa);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Fraa";
        exchange.mic(ExchangeMic::Frab);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Frab";
        exchange.mic(ExchangeMic::Frad);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Frad";
        exchange.mic(ExchangeMic::Xdbc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xdbc";
        exchange.mic(ExchangeMic::Xdbv);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xdbv";
        exchange.mic(ExchangeMic::Xdbx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xdbx";
        exchange.mic(ExchangeMic::Xeta);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xeta";
        exchange.mic(ExchangeMic::Xetb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xetb";
        exchange.mic(ExchangeMic::Xetr);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xetr";
        exchange.mic(ExchangeMic::Xnew);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xnew";
        exchange.mic(ExchangeMic::Xham);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xham";
        exchange.mic(ExchangeMic::Hama);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Hama";
        exchange.mic(ExchangeMic::Hamb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Hamb";
        exchange.mic(ExchangeMic::Xhan);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xhan";
        exchange.mic(ExchangeMic::Hana);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Hana";
        exchange.mic(ExchangeMic::Hanb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Hanb";
        exchange.mic(ExchangeMic::Xinv);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xinv";
        exchange.mic(ExchangeMic::Xmun);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xmun";
        exchange.mic(ExchangeMic::Muna);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Muna";
        exchange.mic(ExchangeMic::Munb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Munb";
        exchange.mic(ExchangeMic::Munc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Munc";
        exchange.mic(ExchangeMic::Mund);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Mund";
        exchange.mic(ExchangeMic::Xsco);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xsco";
        exchange.mic(ExchangeMic::Xsc1);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xsc1";
        exchange.mic(ExchangeMic::Xsc2);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xsc2";
        exchange.mic(ExchangeMic::Xsc3);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xsc3";
        exchange.mic(ExchangeMic::Xstu);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xstu";
        exchange.mic(ExchangeMic::Euwx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Euwx";
        exchange.mic(ExchangeMic::Stua);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Stua";
        exchange.mic(ExchangeMic::Stub);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Stub";
        exchange.mic(ExchangeMic::Xxsc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xxsc";
        exchange.mic(ExchangeMic::Cgit);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Cgit";
        exchange.mic(ExchangeMic::Cgcm);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Cgcm";
        exchange.mic(ExchangeMic::Cgdb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Cgdb";
        exchange.mic(ExchangeMic::Cgeb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Cgeb";
        exchange.mic(ExchangeMic::Cggd);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Cggd";
        exchange.mic(ExchangeMic::Cgnd);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Cgnd";
        exchange.mic(ExchangeMic::Cgqd);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Cgqd";
        exchange.mic(ExchangeMic::Cgqt);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Cgqt";
        exchange.mic(ExchangeMic::Cgtr);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Cgtr";
        exchange.mic(ExchangeMic::Emid);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Emid";
        exchange.mic(ExchangeMic::Emdr);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Emdr";
        exchange.mic(ExchangeMic::Emir);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Emir";
        exchange.mic(ExchangeMic::Etlx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Etlx";
        exchange.mic(ExchangeMic::Hmtf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Hmtf";
        exchange.mic(ExchangeMic::Hmod);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Hmod";
        exchange.mic(ExchangeMic::Mtsc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Mtsc";
        exchange.mic(ExchangeMic::Bond);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Bond";
        exchange.mic(ExchangeMic::Mtsm);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Mtsm";
        exchange.mic(ExchangeMic::Ssob);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Ssob";
        exchange.mic(ExchangeMic::Xgme);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xgme";
        exchange.mic(ExchangeMic::Xmil);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xmil";
        exchange.mic(ExchangeMic::Etfp);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Etfp";
        exchange.mic(ExchangeMic::Mivx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Mivx";
        exchange.mic(ExchangeMic::Motx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Motx";
        exchange.mic(ExchangeMic::Mtaa);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Mtaa";
        exchange.mic(ExchangeMic::Mtah);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Mtah";
        exchange.mic(ExchangeMic::Sedx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Sedx";
        exchange.mic(ExchangeMic::Xaim);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xaim";
        exchange.mic(ExchangeMic::Xdmi);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xdmi";
        exchange.mic(ExchangeMic::Xmot);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xmot";
        exchange.mic(ExchangeMic::Spxe);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Spxe";
        exchange.mic(ExchangeMic::Xbra);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xbra";
        exchange.mic(ExchangeMic::Bmex);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Bmex";
        exchange.mic(ExchangeMic::Bmcl);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Bmcl";
        exchange.mic(ExchangeMic::Mabx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Mabx";
        exchange.mic(ExchangeMic::Marf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Marf";
        exchange.mic(ExchangeMic::Merf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Merf";
        exchange.mic(ExchangeMic::Send);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Send";
        exchange.mic(ExchangeMic::Xbar);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xbar";
        exchange.mic(ExchangeMic::Xbil);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xbil";
        exchange.mic(ExchangeMic::Xdrf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xdrf";
        exchange.mic(ExchangeMic::Xlat);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xlat";
        exchange.mic(ExchangeMic::Xmad);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xmad";
        exchange.mic(ExchangeMic::Xmce);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xmce";
        exchange.mic(ExchangeMic::Xmpw);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xmpw";
        exchange.mic(ExchangeMic::Xmrv);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xmrv";
        exchange.mic(ExchangeMic::Xval);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xval";
        exchange.mic(ExchangeMic::Ibgh);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Ibgh";
        exchange.mic(ExchangeMic::Mibg);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Mibg";
        exchange.mic(ExchangeMic::Omel);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Omel";
        exchange.mic(ExchangeMic::Pave);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Pave";
        exchange.mic(ExchangeMic::Xdpa);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xdpa";
        exchange.mic(ExchangeMic::Xnaf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xnaf";
        exchange.mic(ExchangeMic::Xsrm);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xsrm";
        exchange.mic(ExchangeMic::Cryd);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Cryd";
        exchange.mic(ExchangeMic::Cryx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Cryx";
        exchange.mic(ExchangeMic::Sebx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Sebx";
        exchange.mic(ExchangeMic::Ensx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Ensx";
        exchange.mic(ExchangeMic::Xngm);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xngm";
        exchange.mic(ExchangeMic::Nmtf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Nmtf";
        exchange.mic(ExchangeMic::Xndx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xndx";
        exchange.mic(ExchangeMic::Xnmr);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xnmr";
        exchange.mic(ExchangeMic::Xsat);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xsat";
        exchange.mic(ExchangeMic::Xsto);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xsto";
        exchange.mic(ExchangeMic::Csto);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Csto";
        exchange.mic(ExchangeMic::Dnse);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Dnse";
        exchange.mic(ExchangeMic::Dsto);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Dsto";
        exchange.mic(ExchangeMic::Fnse);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Fnse";
        exchange.mic(ExchangeMic::Xopv);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xopv";
        exchange.mic(ExchangeMic::Aixe);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Aixe";
        exchange.mic(ExchangeMic::Dots);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Dots";
        exchange.mic(ExchangeMic::Euch);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Euch";
        exchange.mic(ExchangeMic::Eurm);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Eurm";
        exchange.mic(ExchangeMic::Eusc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Eusc";
        exchange.mic(ExchangeMic::Eusp);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Eusp";
        exchange.mic(ExchangeMic::Stox);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Stox";
        exchange.mic(ExchangeMic::Xscu);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xscu";
        exchange.mic(ExchangeMic::Xstv);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xstv";
        exchange.mic(ExchangeMic::Xstx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xstx";
        exchange.mic(ExchangeMic::Ubsg);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Ubsg";
        exchange.mic(ExchangeMic::Ubsc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Ubsc";
        exchange.mic(ExchangeMic::Ubsf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Ubsf";
        exchange.mic(ExchangeMic::Xbrn);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xbrn";
        exchange.mic(ExchangeMic::Xswx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xswx";
        exchange.mic(ExchangeMic::Xbtr);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xbtr";
        exchange.mic(ExchangeMic::Xicb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xicb";
        exchange.mic(ExchangeMic::Xqmh);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xqmh";
        exchange.mic(ExchangeMic::Xvtx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xvtx";
        exchange.mic(ExchangeMic::Zkbx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Zkbx";
        exchange.mic(ExchangeMic::Clmx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Clmx";
        exchange.mic(ExchangeMic::Hchc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Hchc";
        exchange.mic(ExchangeMic::Ndex);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Ndex";
        exchange.mic(ExchangeMic::Ndxs);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Ndxs";
        exchange.mic(ExchangeMic::Nlpx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Nlpx";
        exchange.mic(ExchangeMic::Tomx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Tomx";
        exchange.mic(ExchangeMic::Tomd);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Tomd";
        exchange.mic(ExchangeMic::Xams);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xams";
        exchange.mic(ExchangeMic::Alxa);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Alxa";
        exchange.mic(ExchangeMic::Tnla);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Tnla";
        exchange.mic(ExchangeMic::Xeuc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xeuc";
        exchange.mic(ExchangeMic::Xeue);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xeue";
        exchange.mic(ExchangeMic::Xeui);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xeui";
        exchange.mic(ExchangeMic::Xems);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xems";
        exchange.mic(ExchangeMic::Xhft);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xhft";
        exchange.mic(ExchangeMic::Xbel);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xbel";
        exchange.mic(ExchangeMic::Nasx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Nasx";
        exchange.mic(ExchangeMic::Xnsa);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xnsa";
        exchange.mic(ExchangeMic::Kdpw);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Kdpw";
        exchange.mic(ExchangeMic::Xwar);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xwar";
        exchange.mic(ExchangeMic::Bosp);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Bosp";
        exchange.mic(ExchangeMic::Plpd);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Plpd";
        exchange.mic(ExchangeMic::Plpx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Plpx";
        exchange.mic(ExchangeMic::Rpwc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Rpwc";
        exchange.mic(ExchangeMic::Tbsp);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Tbsp";
        exchange.mic(ExchangeMic::Wbcl);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Wbcl";
        exchange.mic(ExchangeMic::Wbon);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Wbon";
        exchange.mic(ExchangeMic::Wder);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Wder";
        exchange.mic(ExchangeMic::Wetp);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Wetp";
        exchange.mic(ExchangeMic::Wgas);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Wgas";
        exchange.mic(ExchangeMic::Wind);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Wind";
        exchange.mic(ExchangeMic::Wmtf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Wmtf";
        exchange.mic(ExchangeMic::Xnco);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xnco";
        exchange.mic(ExchangeMic::Fish);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Fish";
        exchange.mic(ExchangeMic::Fshx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Fshx";
        exchange.mic(ExchangeMic::Icas);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Icas";
        exchange.mic(ExchangeMic::Nexo);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Nexo";
        exchange.mic(ExchangeMic::Nops);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Nops";
        exchange.mic(ExchangeMic::Norx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Norx";
        exchange.mic(ExchangeMic::Nosc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Nosc";
        exchange.mic(ExchangeMic::Notc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Notc";
        exchange.mic(ExchangeMic::Oslc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Oslc";
        exchange.mic(ExchangeMic::Xima);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xima";
        exchange.mic(ExchangeMic::Xosl);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xosl";
        exchange.mic(ExchangeMic::Merd);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Merd";
        exchange.mic(ExchangeMic::Merk);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Merk";
        exchange.mic(ExchangeMic::Nibr);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Nibr";
        exchange.mic(ExchangeMic::Xoad);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xoad";
        exchange.mic(ExchangeMic::Xoam);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xoam";
        exchange.mic(ExchangeMic::Xoas);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xoas";
        exchange.mic(ExchangeMic::Xosc);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xosc";
        exchange.mic(ExchangeMic::Xosd);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xosd";
        exchange.mic(ExchangeMic::Xnam);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xnam";
        exchange.mic(ExchangeMic::Xmnx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xmnx";
        exchange.mic(ExchangeMic::Ewsm);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Ewsm";
        exchange.mic(ExchangeMic::Xmal);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xmal";
        exchange.mic(ExchangeMic::Xmae);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xmae";
        exchange.mic(ExchangeMic::Cclx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Cclx";
        exchange.mic(ExchangeMic::Xlux);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xlux";
        exchange.mic(ExchangeMic::Emtf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Emtf";
        exchange.mic(ExchangeMic::Xves);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xves";
        exchange.mic(ExchangeMic::Beta);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Beta";
        exchange.mic(ExchangeMic::Hupx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Hupx";
        exchange.mic(ExchangeMic::Kccp);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Kccp";
        exchange.mic(ExchangeMic::Xbud);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xbud";
        exchange.mic(ExchangeMic::Xgas);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xgas";
        exchange.mic(ExchangeMic::Xblb);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xblb";
        exchange.mic(ExchangeMic::Blbf);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Blbf";
        exchange.mic(ExchangeMic::Xsse);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xsse";
        exchange.mic(ExchangeMic::Xcro);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xcro";
        exchange.mic(ExchangeMic::Xtrz);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xtrz";
        exchange.mic(ExchangeMic::Xzag);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xzag";
        exchange.mic(ExchangeMic::Xzam);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xzam";
        exchange.mic(ExchangeMic::Xtun);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xtun";
        exchange.mic(ExchangeMic::Xdsx);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xdsx";
        exchange.mic(ExchangeMic::Bcse);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Bcse";
        exchange.mic(ExchangeMic::Xcys);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xcys";
        exchange.mic(ExchangeMic::Xcyo);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xcyo";
        exchange.mic(ExchangeMic::Xecm);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xecm";
        exchange.mic(ExchangeMic::Xtal);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xtal";
        exchange.mic(ExchangeMic::Fnee);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Fnee";
        exchange.mic(ExchangeMic::Asex);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Asex";
        exchange.mic(ExchangeMic::Enax);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Enax";
        exchange.mic(ExchangeMic::Euax);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Euax";
        exchange.mic(ExchangeMic::Hotc);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Hotc";
        exchange.mic(ExchangeMic::Xade);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xade";
        exchange.mic(ExchangeMic::Xath);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xath";
        exchange.mic(ExchangeMic::Xipo);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xipo";
        exchange.mic(ExchangeMic::Hdat);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Hdat";
        exchange.mic(ExchangeMic::Hemo);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Hemo";
        exchange.mic(ExchangeMic::Fgex);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Fgex";
        exchange.mic(ExchangeMic::Xhel);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xhel";
        exchange.mic(ExchangeMic::Dhel);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Dhel";
        exchange.mic(ExchangeMic::Dnfi);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Dnfi";
        exchange.mic(ExchangeMic::Fnfi);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Fnfi";
        exchange.mic(ExchangeMic::Xtae);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xtae";
        exchange.mic(ExchangeMic::Xbey);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xbey";
        exchange.mic(ExchangeMic::Xris);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xris";
        exchange.mic(ExchangeMic::Fnlv);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Fnlv";
        exchange.mic(ExchangeMic::Bapx);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Bapx";
        exchange.mic(ExchangeMic::Getb);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Getb";
        exchange.mic(ExchangeMic::Xlit);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xlit";
        exchange.mic(ExchangeMic::Fnlt);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Fnlt";
        exchange.mic(ExchangeMic::Xmol);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xmol";
        exchange.mic(ExchangeMic::Xjse);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xjse";
        exchange.mic(ExchangeMic::Altx);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Altx";
        exchange.mic(ExchangeMic::Xbes);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xbes";
        exchange.mic(ExchangeMic::Xsaf);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xsaf";
        exchange.mic(ExchangeMic::Xsfa);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xsfa";
        exchange.mic(ExchangeMic::Yldx);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Yldx";
        exchange.mic(ExchangeMic::Xist);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xist";
        exchange.mic(ExchangeMic::Xdsm);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xdsm";
        exchange.mic(ExchangeMic::Xeqy);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xeqy";
        exchange.mic(ExchangeMic::Xfno);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xfno";
        exchange.mic(ExchangeMic::Xpms);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xpms";
        exchange.mic(ExchangeMic::Eese);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Eese";
        exchange.mic(ExchangeMic::Pfts);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Pfts";
        exchange.mic(ExchangeMic::Pftq);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Pftq";
        exchange.mic(ExchangeMic::Sepe);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Sepe";
        exchange.mic(ExchangeMic::Ukex);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Ukex";
        exchange.mic(ExchangeMic::Xdfb);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xdfb";
        exchange.mic(ExchangeMic::Xkhr);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xkhr";
        exchange.mic(ExchangeMic::Xkie);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xkie";
        exchange.mic(ExchangeMic::Xkis);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xkis";
        exchange.mic(ExchangeMic::Xode);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xode";
        exchange.mic(ExchangeMic::Xpri);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xpri";
        exchange.mic(ExchangeMic::Xuax);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xuax";
        exchange.mic(ExchangeMic::Xukr);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xukr";
        exchange.mic(ExchangeMic::Bmfx);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Bmfx";
        exchange.mic(ExchangeMic::Bmfa);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Bmfa";
        exchange.mic(ExchangeMic::Bmfm);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Bmfm";
        exchange.mic(ExchangeMic::Sbmf);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Sbmf";
        exchange.mic(ExchangeMic::Xbrm);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xbrm";
        exchange.mic(ExchangeMic::Xbse);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xbse";
        exchange.mic(ExchangeMic::Xbsd);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xbsd";
        exchange.mic(ExchangeMic::Xcan);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xcan";
        exchange.mic(ExchangeMic::Xras);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xras";
        exchange.mic(ExchangeMic::Xrpm);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xrpm";
        exchange.mic(ExchangeMic::Rotc);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Rotc";
        exchange.mic(ExchangeMic::Rsex);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Rsex";
        exchange.mic(ExchangeMic::Xpae);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xpae";
        exchange.mic(ExchangeMic::Xamm);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xamm";
        exchange.mic(ExchangeMic::Nilx);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Nilx";
        exchange.mic(ExchangeMic::Xcai);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xcai";
        exchange.mic(ExchangeMic::Ibex);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Ibex";
        exchange.mic(ExchangeMic::Xbul);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xbul";
        exchange.mic(ExchangeMic::Xswa);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xswa";
        exchange.mic(ExchangeMic::Xbvm);
        ASSERT_EQUAL(120, exchange.timeZoneMinutes()) << "Xbvm";
        exchange.mic(ExchangeMic::Misx);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Misx";
        exchange.mic(ExchangeMic::Rtsx);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Rtsx";
        exchange.mic(ExchangeMic::Namx);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Namx";
        exchange.mic(ExchangeMic::Rpdx);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Rpdx";
        exchange.mic(ExchangeMic::Rusx);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Rusx";
        exchange.mic(ExchangeMic::Spim);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Spim";
        exchange.mic(ExchangeMic::Xmos);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xmos";
        exchange.mic(ExchangeMic::Xpet);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xpet";
        exchange.mic(ExchangeMic::Xpic);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xpic";
        exchange.mic(ExchangeMic::Xrus);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xrus";
        exchange.mic(ExchangeMic::Xsam);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xsam";
        exchange.mic(ExchangeMic::Xsib);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xsib";
        exchange.mic(ExchangeMic::Dsmd);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Dsmd";
        exchange.mic(ExchangeMic::Xkuw);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xkuw";
        exchange.mic(ExchangeMic::Xnai);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xnai";
        exchange.mic(ExchangeMic::Xiqs);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xiqs";
        exchange.mic(ExchangeMic::Bfex);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Bfex";
        exchange.mic(ExchangeMic::Xbah);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xbah";
        exchange.mic(ExchangeMic::Ultx);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Ultx";
        exchange.mic(ExchangeMic::Xuga);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xuga";
        exchange.mic(ExchangeMic::Xdar);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xdar";
        exchange.mic(ExchangeMic::Xkha);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xkha";
        exchange.mic(ExchangeMic::Xmdg);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xmdg";
        exchange.mic(ExchangeMic::Xdse);
        ASSERT_EQUAL(180, exchange.timeZoneMinutes()) << "Xdse";
        exchange.mic(ExchangeMic::Imex);
        ASSERT_EQUAL(210, exchange.timeZoneMinutes()) << "Imex";
        exchange.mic(ExchangeMic::Xteh);
        ASSERT_EQUAL(210, exchange.timeZoneMinutes()) << "Xteh";
        exchange.mic(ExchangeMic::Dgcx);
        ASSERT_EQUAL(240, exchange.timeZoneMinutes()) << "Dgcx";
        exchange.mic(ExchangeMic::Difx);
        ASSERT_EQUAL(240, exchange.timeZoneMinutes()) << "Difx";
        exchange.mic(ExchangeMic::Dumx);
        ASSERT_EQUAL(240, exchange.timeZoneMinutes()) << "Dumx";
        exchange.mic(ExchangeMic::Xads);
        ASSERT_EQUAL(240, exchange.timeZoneMinutes()) << "Xads";
        exchange.mic(ExchangeMic::Xdfm);
        ASSERT_EQUAL(240, exchange.timeZoneMinutes()) << "Xdfm";
        exchange.mic(ExchangeMic::Xecs);
        ASSERT_EQUAL(240, exchange.timeZoneMinutes()) << "Xecs";
        exchange.mic(ExchangeMic::Gbot);
        ASSERT_EQUAL(240, exchange.timeZoneMinutes()) << "Gbot";
        exchange.mic(ExchangeMic::Xafx);
        ASSERT_EQUAL(240, exchange.timeZoneMinutes()) << "Xafx";
        exchange.mic(ExchangeMic::Xmau);
        ASSERT_EQUAL(240, exchange.timeZoneMinutes()) << "Xmau";
        exchange.mic(ExchangeMic::Xarm);
        ASSERT_EQUAL(240, exchange.timeZoneMinutes()) << "Xarm";
        exchange.mic(ExchangeMic::Bsex);
        ASSERT_EQUAL(240, exchange.timeZoneMinutes()) << "Bsex";
        exchange.mic(ExchangeMic::Xibe);
        ASSERT_EQUAL(240, exchange.timeZoneMinutes()) << "Xibe";
        exchange.mic(ExchangeMic::Xmus);
        ASSERT_EQUAL(240, exchange.timeZoneMinutes()) << "Xmus";
        exchange.mic(ExchangeMic::Ncel);
        ASSERT_EQUAL(300, exchange.timeZoneMinutes()) << "Ncel";
        exchange.mic(ExchangeMic::Xisl);
        ASSERT_EQUAL(300, exchange.timeZoneMinutes()) << "Xisl";
        exchange.mic(ExchangeMic::Xkar);
        ASSERT_EQUAL(300, exchange.timeZoneMinutes()) << "Xkar";
        exchange.mic(ExchangeMic::Xlah);
        ASSERT_EQUAL(300, exchange.timeZoneMinutes()) << "Xlah";
        exchange.mic(ExchangeMic::Xcet);
        ASSERT_EQUAL(300, exchange.timeZoneMinutes()) << "Xcet";
        exchange.mic(ExchangeMic::Xcue);
        ASSERT_EQUAL(300, exchange.timeZoneMinutes()) << "Xcue";
        exchange.mic(ExchangeMic::Xkce);
        ASSERT_EQUAL(300, exchange.timeZoneMinutes()) << "Xkce";
        exchange.mic(ExchangeMic::Xste);
        ASSERT_EQUAL(300, exchange.timeZoneMinutes()) << "Xste";
        exchange.mic(ExchangeMic::Xuni);
        ASSERT_EQUAL(300, exchange.timeZoneMinutes()) << "Xuni";
        exchange.mic(ExchangeMic::Xcol);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Xcol";
        exchange.mic(ExchangeMic::Acex);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Acex";
        exchange.mic(ExchangeMic::Cdsl);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Cdsl";
        exchange.mic(ExchangeMic::Icxl);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Icxl";
        exchange.mic(ExchangeMic::Isex);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Isex";
        exchange.mic(ExchangeMic::Mcxx);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Mcxx";
        exchange.mic(ExchangeMic::Nbot);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Nbot";
        exchange.mic(ExchangeMic::Nmce);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Nmce";
        exchange.mic(ExchangeMic::Otcx);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Otcx";
        exchange.mic(ExchangeMic::Pxil);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Pxil";
        exchange.mic(ExchangeMic::Xban);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Xban";
        exchange.mic(ExchangeMic::Xbom);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Xbom";
        exchange.mic(ExchangeMic::Bsme);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Bsme";
        exchange.mic(ExchangeMic::Xcal);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Xcal";
        exchange.mic(ExchangeMic::Xdes);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Xdes";
        exchange.mic(ExchangeMic::Ximc);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Ximc";
        exchange.mic(ExchangeMic::Xmds);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Xmds";
        exchange.mic(ExchangeMic::Xncd);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Xncd";
        exchange.mic(ExchangeMic::Xnse);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Xnse";
        exchange.mic(ExchangeMic::Xuse);
        ASSERT_EQUAL(330, exchange.timeZoneMinutes()) << "Xuse";
        exchange.mic(ExchangeMic::Xnep);
        ASSERT_EQUAL(345, exchange.timeZoneMinutes()) << "Xnep";
        exchange.mic(ExchangeMic::Xkse);
        ASSERT_EQUAL(360, exchange.timeZoneMinutes()) << "Xkse";
        exchange.mic(ExchangeMic::Etsc);
        ASSERT_EQUAL(360, exchange.timeZoneMinutes()) << "Etsc";
        exchange.mic(ExchangeMic::Xkaz);
        ASSERT_EQUAL(360, exchange.timeZoneMinutes()) << "Xkaz";
        exchange.mic(ExchangeMic::Cltd);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Cltd";
        exchange.mic(ExchangeMic::Ecal);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Ecal";
        exchange.mic(ExchangeMic::Eeal);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Eeal";
        exchange.mic(ExchangeMic::Ifsg);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Ifsg";
        exchange.mic(ExchangeMic::Jadx);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Jadx";
        exchange.mic(ExchangeMic::Smex);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Smex";
        exchange.mic(ExchangeMic::Tfsa);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Tfsa";
        exchange.mic(ExchangeMic::Xses);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Xses";
        exchange.mic(ExchangeMic::Xsca);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Xsca";
        exchange.mic(ExchangeMic::Xsce);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Xsce";
        exchange.mic(ExchangeMic::Xsim);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Xsim";
        exchange.mic(ExchangeMic::Icdx);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Icdx";
        exchange.mic(ExchangeMic::Xbbj);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Xbbj";
        exchange.mic(ExchangeMic::Xidx);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Xidx";
        exchange.mic(ExchangeMic::Xjnb);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Xjnb";
        exchange.mic(ExchangeMic::Afet);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Afet";
        exchange.mic(ExchangeMic::Beex);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Beex";
        exchange.mic(ExchangeMic::Tfex);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Tfex";
        exchange.mic(ExchangeMic::Xbkk);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Xbkk";
        exchange.mic(ExchangeMic::Xbkf);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Xbkf";
        exchange.mic(ExchangeMic::Xmai);
        ASSERT_EQUAL(420, exchange.timeZoneMinutes()) << "Xmai";
        exchange.mic(ExchangeMic::Clph);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Clph";
        exchange.mic(ExchangeMic::Pdex);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Pdex";
        exchange.mic(ExchangeMic::Xphs);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xphs";
        exchange.mic(ExchangeMic::Xula);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xula";
        exchange.mic(ExchangeMic::Xkls);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xkls";
        exchange.mic(ExchangeMic::Mesq);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Mesq";
        exchange.mic(ExchangeMic::Xlfx);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xlfx";
        exchange.mic(ExchangeMic::Xrbm);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xrbm";
        exchange.mic(ExchangeMic::Cgmh);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Cgmh";
        exchange.mic(ExchangeMic::Clhk);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Clhk";
        exchange.mic(ExchangeMic::Cshk);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Cshk";
        exchange.mic(ExchangeMic::Cfhk);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Cfhk";
        exchange.mic(ExchangeMic::Dbhk);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Dbhk";
        exchange.mic(ExchangeMic::Eotc);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Eotc";
        exchange.mic(ExchangeMic::Hsxa);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Hsxa";
        exchange.mic(ExchangeMic::Maqh);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Maqh";
        exchange.mic(ExchangeMic::Sigh);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Sigh";
        exchange.mic(ExchangeMic::Tocp);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Tocp";
        exchange.mic(ExchangeMic::Ubsx);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Ubsx";
        exchange.mic(ExchangeMic::Xcgs);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xcgs";
        exchange.mic(ExchangeMic::Xhkf);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xhkf";
        exchange.mic(ExchangeMic::Xhkg);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xhkg";
        exchange.mic(ExchangeMic::Shsc);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Shsc";
        exchange.mic(ExchangeMic::Xgem);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xgem";
        exchange.mic(ExchangeMic::Xihk);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xihk";
        exchange.mic(ExchangeMic::Xpst);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xpst";
        exchange.mic(ExchangeMic::Ccfx);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Ccfx";
        exchange.mic(ExchangeMic::Cssx);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Cssx";
        exchange.mic(ExchangeMic::Sgex);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Sgex";
        exchange.mic(ExchangeMic::Xcfe);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xcfe";
        exchange.mic(ExchangeMic::Xdce);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xdce";
        exchange.mic(ExchangeMic::Xsge);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xsge";
        exchange.mic(ExchangeMic::Xine);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xine";
        exchange.mic(ExchangeMic::Xshe);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xshe";
        exchange.mic(ExchangeMic::Xsec);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xsec";
        exchange.mic(ExchangeMic::Xshg);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xshg";
        exchange.mic(ExchangeMic::Xssc);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xssc";
        exchange.mic(ExchangeMic::Xzce);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xzce";
        exchange.mic(ExchangeMic::Xchg);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xchg";
        exchange.mic(ExchangeMic::Xdha);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xdha";
        exchange.mic(ExchangeMic::Roco);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Roco";
        exchange.mic(ExchangeMic::Xtaf);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xtaf";
        exchange.mic(ExchangeMic::Xtai);
        ASSERT_EQUAL(480, exchange.timeZoneMinutes()) << "Xtai";
        exchange.mic(ExchangeMic::Xkfb);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xkfb";
        exchange.mic(ExchangeMic::Xkrx);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xkrx";
        exchange.mic(ExchangeMic::Xkcm);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xkcm";
        exchange.mic(ExchangeMic::Xkem);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xkem";
        exchange.mic(ExchangeMic::Xkfe);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xkfe";
        exchange.mic(ExchangeMic::Xkon);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xkon";
        exchange.mic(ExchangeMic::Xkos);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xkos";
        exchange.mic(ExchangeMic::Betp);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Betp";
        exchange.mic(ExchangeMic::Chij);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Chij";
        exchange.mic(ExchangeMic::Chis);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Chis";
        exchange.mic(ExchangeMic::Chiv);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Chiv";
        exchange.mic(ExchangeMic::Citx);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Citx";
        exchange.mic(ExchangeMic::Citd);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Citd";
        exchange.mic(ExchangeMic::Cljp);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Cljp";
        exchange.mic(ExchangeMic::Cmet);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Cmet";
        exchange.mic(ExchangeMic::Csjp);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Csjp";
        exchange.mic(ExchangeMic::Cfjp);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Cfjp";
        exchange.mic(ExchangeMic::Drct);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Drct";
        exchange.mic(ExchangeMic::Lxjp);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Lxjp";
        exchange.mic(ExchangeMic::Maqj);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Maqj";
        exchange.mic(ExchangeMic::Mizx);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Mizx";
        exchange.mic(ExchangeMic::Msms);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Msms";
        exchange.mic(ExchangeMic::Nmrj);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Nmrj";
        exchange.mic(ExchangeMic::Nxjp);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Nxjp";
        exchange.mic(ExchangeMic::Nxse);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Nxse";
        exchange.mic(ExchangeMic::Nxvw);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Nxvw";
        exchange.mic(ExchangeMic::Sbij);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Sbij";
        exchange.mic(ExchangeMic::Sbiu);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Sbiu";
        exchange.mic(ExchangeMic::Sbiv);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Sbiv";
        exchange.mic(ExchangeMic::Xsbi);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xsbi";
        exchange.mic(ExchangeMic::Sigj);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Sigj";
        exchange.mic(ExchangeMic::Xfka);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xfka";
        exchange.mic(ExchangeMic::Xijp);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xijp";
        exchange.mic(ExchangeMic::Jasr);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Jasr";
        exchange.mic(ExchangeMic::Xjpx);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xjpx";
        exchange.mic(ExchangeMic::Xjas);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xjas";
        exchange.mic(ExchangeMic::Xose);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xose";
        exchange.mic(ExchangeMic::Xosj);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xosj";
        exchange.mic(ExchangeMic::Xtam);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xtam";
        exchange.mic(ExchangeMic::Xtk1);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xtk1";
        exchange.mic(ExchangeMic::Xtk2);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xtk2";
        exchange.mic(ExchangeMic::Xtk3);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xtk3";
        exchange.mic(ExchangeMic::Xtks);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xtks";
        exchange.mic(ExchangeMic::Xkac);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xkac";
        exchange.mic(ExchangeMic::Xngo);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xngo";
        exchange.mic(ExchangeMic::Xnks);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xnks";
        exchange.mic(ExchangeMic::Xsap);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xsap";
        exchange.mic(ExchangeMic::Xtff);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xtff";
        exchange.mic(ExchangeMic::Xtkt);
        ASSERT_EQUAL(540, exchange.timeZoneMinutes()) << "Xtkt";
        exchange.mic(ExchangeMic::Apxl);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Apxl";
        exchange.mic(ExchangeMic::Awbx);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Awbx";
        exchange.mic(ExchangeMic::Awex);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Awex";
        exchange.mic(ExchangeMic::Blev);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Blev";
        exchange.mic(ExchangeMic::Cgma);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Cgma";
        exchange.mic(ExchangeMic::Chia);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Chia";
        exchange.mic(ExchangeMic::Cxac);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Cxac";
        exchange.mic(ExchangeMic::Cxaf);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Cxaf";
        exchange.mic(ExchangeMic::Cxam);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Cxam";
        exchange.mic(ExchangeMic::Cxan);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Cxan";
        exchange.mic(ExchangeMic::Cxap);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Cxap";
        exchange.mic(ExchangeMic::Cxav);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Cxav";
        exchange.mic(ExchangeMic::Cxaw);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Cxaw";
        exchange.mic(ExchangeMic::Clau);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Clau";
        exchange.mic(ExchangeMic::Csau);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Csau";
        exchange.mic(ExchangeMic::Cfau);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Cfau";
        exchange.mic(ExchangeMic::Maqx);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Maqx";
        exchange.mic(ExchangeMic::Msal);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Msal";
        exchange.mic(ExchangeMic::Nsxb);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Nsxb";
        exchange.mic(ExchangeMic::Siga);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Siga";
        exchange.mic(ExchangeMic::Simv);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Simv";
        exchange.mic(ExchangeMic::Xasx);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Xasx";
        exchange.mic(ExchangeMic::Asxb);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Asxb";
        exchange.mic(ExchangeMic::Asxc);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Asxc";
        exchange.mic(ExchangeMic::Asxp);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Asxp";
        exchange.mic(ExchangeMic::Asxt);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Asxt";
        exchange.mic(ExchangeMic::Asxv);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Asxv";
        exchange.mic(ExchangeMic::Xsfe);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Xsfe";
        exchange.mic(ExchangeMic::Xfex);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Xfex";
        exchange.mic(ExchangeMic::Xnec);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Xnec";
        exchange.mic(ExchangeMic::Xyie);
        ASSERT_EQUAL(600, exchange.timeZoneMinutes()) << "Xyie";
        exchange.mic(ExchangeMic::Xsps);
        ASSERT_EQUAL(720, exchange.timeZoneMinutes()) << "Xsps";
        exchange.mic(ExchangeMic::Nzfx);
        ASSERT_EQUAL(720, exchange.timeZoneMinutes()) << "Nzfx";
        exchange.mic(ExchangeMic::Xnze);
        ASSERT_EQUAL(720, exchange.timeZoneMinutes()) << "Xnze";
        exchange.mic(ExchangeMic::Xbvc);
        ASSERT_EQUAL(-60, exchange.timeZoneMinutes()) << "Xbvc";
        exchange.mic(ExchangeMic::Xvpa);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Xvpa";
        exchange.mic(ExchangeMic::Bcmm);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Bcmm";
        exchange.mic(ExchangeMic::Bovm);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Bovm";
        exchange.mic(ExchangeMic::Brix);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Brix";
        exchange.mic(ExchangeMic::Bvmf);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Bvmf";
        exchange.mic(ExchangeMic::Ceti);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Ceti";
        exchange.mic(ExchangeMic::Selc);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Selc";
        exchange.mic(ExchangeMic::Bvur);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Bvur";
        exchange.mic(ExchangeMic::Xmnt);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Xmnt";
        exchange.mic(ExchangeMic::Bace);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Bace";
        exchange.mic(ExchangeMic::Bcfs);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Bcfs";
        exchange.mic(ExchangeMic::Xmvl);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Xmvl";
        exchange.mic(ExchangeMic::Rofx);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Rofx";
        exchange.mic(ExchangeMic::Xbcc);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Xbcc";
        exchange.mic(ExchangeMic::Mvcx);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Mvcx";
        exchange.mic(ExchangeMic::Xbcm);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Xbcm";
        exchange.mic(ExchangeMic::Xbcx);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Xbcx";
        exchange.mic(ExchangeMic::Xbue);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Xbue";
        exchange.mic(ExchangeMic::Xmev);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Xmev";
        exchange.mic(ExchangeMic::Xcnf);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Xcnf";
        exchange.mic(ExchangeMic::Xmab);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Xmab";
        exchange.mic(ExchangeMic::Xmtb);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Xmtb";
        exchange.mic(ExchangeMic::Xros);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Xros";
        exchange.mic(ExchangeMic::Xrox);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Xrox";
        exchange.mic(ExchangeMic::Xtuc);
        ASSERT_EQUAL(-180, exchange.timeZoneMinutes()) << "Xtuc";
        exchange.mic(ExchangeMic::Xpom);
        ASSERT_EQUAL(-240, exchange.timeZoneMinutes()) << "Xpom";
        exchange.mic(ExchangeMic::Xbrv);
        ASSERT_EQUAL(-240, exchange.timeZoneMinutes()) << "Xbrv";
        exchange.mic(ExchangeMic::Xbvr);
        ASSERT_EQUAL(-240, exchange.timeZoneMinutes()) << "Xbvr";
        exchange.mic(ExchangeMic::Bova);
        ASSERT_EQUAL(-240, exchange.timeZoneMinutes()) << "Bova";
        exchange.mic(ExchangeMic::Xbcl);
        ASSERT_EQUAL(-240, exchange.timeZoneMinutes()) << "Xbcl";
        exchange.mic(ExchangeMic::Xsgo);
        ASSERT_EQUAL(-240, exchange.timeZoneMinutes()) << "Xsgo";
        exchange.mic(ExchangeMic::Xbol);
        ASSERT_EQUAL(-240, exchange.timeZoneMinutes()) << "Xbol";
        exchange.mic(ExchangeMic::Xbda);
        ASSERT_EQUAL(-240, exchange.timeZoneMinutes()) << "Xbda";
        exchange.mic(ExchangeMic::Bvca);
        ASSERT_EQUAL(-270, exchange.timeZoneMinutes()) << "Bvca";
        exchange.mic(ExchangeMic::Xtrn);
        ASSERT_EQUAL(-270, exchange.timeZoneMinutes()) << "Xtrn";
        exchange.mic(ExchangeMic::Xbab);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xbab";
        exchange.mic(ExchangeMic::Bajm);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bajm";
        exchange.mic(ExchangeMic::Xcay);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xcay";
        exchange.mic(ExchangeMic::Xpty);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xpty";
        exchange.mic(ExchangeMic::Xlim);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xlim";
        exchange.mic(ExchangeMic::Xjam);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xjam";
        exchange.mic(ExchangeMic::Xbaa);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xbaa";
        exchange.mic(ExchangeMic::Xgua);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xgua";
        exchange.mic(ExchangeMic::Xqui);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xqui";
        exchange.mic(ExchangeMic::Xbog);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xbog";
        exchange.mic(ExchangeMic::Canx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Canx";
        exchange.mic(ExchangeMic::Chic);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Chic";
        exchange.mic(ExchangeMic::Xcx2);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xcx2";
        exchange.mic(ExchangeMic::Cotc);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Cotc";
        exchange.mic(ExchangeMic::Ifca);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Ifca";
        exchange.mic(ExchangeMic::Ivzx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Ivzx";
        exchange.mic(ExchangeMic::Lica);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Lica";
        exchange.mic(ExchangeMic::Matn);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Matn";
        exchange.mic(ExchangeMic::Neoe);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Neoe";
        exchange.mic(ExchangeMic::Ngxc);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Ngxc";
        exchange.mic(ExchangeMic::Omga);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Omga";
        exchange.mic(ExchangeMic::Lynx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Lynx";
        exchange.mic(ExchangeMic::Tmxs);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Tmxs";
        exchange.mic(ExchangeMic::Xats);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xats";
        exchange.mic(ExchangeMic::Xbbk);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xbbk";
        exchange.mic(ExchangeMic::Xcnq);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xcnq";
        exchange.mic(ExchangeMic::Pure);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Pure";
        exchange.mic(ExchangeMic::Xicx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xicx";
        exchange.mic(ExchangeMic::Xmoc);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xmoc";
        exchange.mic(ExchangeMic::Xmod);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xmod";
        exchange.mic(ExchangeMic::Xtse);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xtse";
        exchange.mic(ExchangeMic::Xtsx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xtsx";
        exchange.mic(ExchangeMic::Xtnx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xtnx";
        exchange.mic(ExchangeMic::Aats);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Aats";
        exchange.mic(ExchangeMic::Aqua);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Aqua";
        exchange.mic(ExchangeMic::Atdf);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Atdf";
        exchange.mic(ExchangeMic::Core);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Core";
        exchange.mic(ExchangeMic::Baml);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Baml";
        exchange.mic(ExchangeMic::Mlco);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mlco";
        exchange.mic(ExchangeMic::Mlvx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mlvx";
        exchange.mic(ExchangeMic::Barx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Barx";
        exchange.mic(ExchangeMic::Bard);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bard";
        exchange.mic(ExchangeMic::Barl);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Barl";
        exchange.mic(ExchangeMic::Bcdx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bcdx";
        exchange.mic(ExchangeMic::Bats);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bats";
        exchange.mic(ExchangeMic::Bato);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bato";
        exchange.mic(ExchangeMic::Baty);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Baty";
        exchange.mic(ExchangeMic::Byxd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Byxd";
        exchange.mic(ExchangeMic::Bzxd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bzxd";
        exchange.mic(ExchangeMic::Bbsf);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bbsf";
        exchange.mic(ExchangeMic::Bgcf);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bgcf";
        exchange.mic(ExchangeMic::Bgcd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bgcd";
        exchange.mic(ExchangeMic::Bids);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bids";
        exchange.mic(ExchangeMic::Bltd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bltd";
        exchange.mic(ExchangeMic::Bpol);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bpol";
        exchange.mic(ExchangeMic::Bndd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bndd";
        exchange.mic(ExchangeMic::Bnyc);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bnyc";
        exchange.mic(ExchangeMic::Nyfx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Nyfx";
        exchange.mic(ExchangeMic::Vtex);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Vtex";
        exchange.mic(ExchangeMic::Btec);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Btec";
        exchange.mic(ExchangeMic::Icsu);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Icsu";
        exchange.mic(ExchangeMic::Cded);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Cded";
        exchange.mic(ExchangeMic::Cgmi);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Cgmi";
        exchange.mic(ExchangeMic::Cblc);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Cblc";
        exchange.mic(ExchangeMic::Cgmu);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Cgmu";
        exchange.mic(ExchangeMic::Cicx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Cicx";
        exchange.mic(ExchangeMic::Lqfi);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Lqfi";
        exchange.mic(ExchangeMic::Cmsf);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Cmsf";
        exchange.mic(ExchangeMic::Cred);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Cred";
        exchange.mic(ExchangeMic::Caes);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Caes";
        exchange.mic(ExchangeMic::Cslp);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Cslp";
        exchange.mic(ExchangeMic::Dbsx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Dbsx";
        exchange.mic(ExchangeMic::Deal);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Deal";
        exchange.mic(ExchangeMic::Edge);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Edge";
        exchange.mic(ExchangeMic::Eddp);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Eddp";
        exchange.mic(ExchangeMic::Edga);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Edga";
        exchange.mic(ExchangeMic::Edgd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Edgd";
        exchange.mic(ExchangeMic::Edgo);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Edgo";
        exchange.mic(ExchangeMic::Edgx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Edgx";
        exchange.mic(ExchangeMic::Eris);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Eris";
        exchange.mic(ExchangeMic::Fast);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Fast";
        exchange.mic(ExchangeMic::Finr);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Finr";
        exchange.mic(ExchangeMic::Finn);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Finn";
        exchange.mic(ExchangeMic::Fino);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Fino";
        exchange.mic(ExchangeMic::Finy);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Finy";
        exchange.mic(ExchangeMic::Ootc);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Ootc";
        exchange.mic(ExchangeMic::Xadf);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xadf";
        exchange.mic(ExchangeMic::Fxal);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Fxal";
        exchange.mic(ExchangeMic::Fxcm);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Fxcm";
        exchange.mic(ExchangeMic::G1xx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "G1xx";
        exchange.mic(ExchangeMic::Gllc);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Gllc";
        exchange.mic(ExchangeMic::Glps);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Glps";
        exchange.mic(ExchangeMic::Govx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Govx";
        exchange.mic(ExchangeMic::Gree);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Gree";
        exchange.mic(ExchangeMic::Gsef);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Gsef";
        exchange.mic(ExchangeMic::Gtco);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Gtco";
        exchange.mic(ExchangeMic::Hegx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Hegx";
        exchange.mic(ExchangeMic::Hppo);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Hppo";
        exchange.mic(ExchangeMic::Hsfx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Hsfx";
        exchange.mic(ExchangeMic::Icel);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Icel";
        exchange.mic(ExchangeMic::Iexg);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Iexg";
        exchange.mic(ExchangeMic::Ifus);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Ifus";
        exchange.mic(ExchangeMic::Ices);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Ices";
        exchange.mic(ExchangeMic::Iepa);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Iepa";
        exchange.mic(ExchangeMic::Ifed);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Ifed";
        exchange.mic(ExchangeMic::Imag);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Imag";
        exchange.mic(ExchangeMic::Imbd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Imbd";
        exchange.mic(ExchangeMic::Imcc);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Imcc";
        exchange.mic(ExchangeMic::Imcg);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Imcg";
        exchange.mic(ExchangeMic::Imco);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Imco";
        exchange.mic(ExchangeMic::Imcr);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Imcr";
        exchange.mic(ExchangeMic::Imen);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Imen";
        exchange.mic(ExchangeMic::Imeq);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Imeq";
        exchange.mic(ExchangeMic::Imfx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Imfx";
        exchange.mic(ExchangeMic::Imir);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Imir";
        exchange.mic(ExchangeMic::Isda);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Isda";
        exchange.mic(ExchangeMic::Itgi);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Itgi";
        exchange.mic(ExchangeMic::Jefx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Jefx";
        exchange.mic(ExchangeMic::Jpmx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Jpmx";
        exchange.mic(ExchangeMic::Jsef);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Jsef";
        exchange.mic(ExchangeMic::Jses);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Jses";
        exchange.mic(ExchangeMic::Jsjx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Jsjx";
        exchange.mic(ExchangeMic::Knig);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Knig";
        exchange.mic(ExchangeMic::Kncm);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Kncm";
        exchange.mic(ExchangeMic::Knem);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Knem";
        exchange.mic(ExchangeMic::Knli);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Knli";
        exchange.mic(ExchangeMic::Knmx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Knmx";
        exchange.mic(ExchangeMic::Lasf);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Lasf";
        exchange.mic(ExchangeMic::Levl);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Levl";
        exchange.mic(ExchangeMic::Lius);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Lius";
        exchange.mic(ExchangeMic::Lifi);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Lifi";
        exchange.mic(ExchangeMic::Liuh);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Liuh";
        exchange.mic(ExchangeMic::Lqed);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Lqed";
        exchange.mic(ExchangeMic::Ltaa);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Ltaa";
        exchange.mic(ExchangeMic::Lmnx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Lmnx";
        exchange.mic(ExchangeMic::Mihi);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mihi";
        exchange.mic(ExchangeMic::Mprl);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mprl";
        exchange.mic(ExchangeMic::Xmio);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xmio";
        exchange.mic(ExchangeMic::Msco);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Msco";
        exchange.mic(ExchangeMic::Mslp);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mslp";
        exchange.mic(ExchangeMic::Mspl);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mspl";
        exchange.mic(ExchangeMic::Msrp);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Msrp";
        exchange.mic(ExchangeMic::Mstx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mstx";
        exchange.mic(ExchangeMic::Mtus);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mtus";
        exchange.mic(ExchangeMic::Bvus);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bvus";
        exchange.mic(ExchangeMic::Mtsb);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mtsb";
        exchange.mic(ExchangeMic::Mtxx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mtxx";
        exchange.mic(ExchangeMic::Mtxa);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mtxa";
        exchange.mic(ExchangeMic::Mtxc);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mtxc";
        exchange.mic(ExchangeMic::Mtxm);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mtxm";
        exchange.mic(ExchangeMic::Mtxs);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mtxs";
        exchange.mic(ExchangeMic::Nblx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Nblx";
        exchange.mic(ExchangeMic::Nfsc);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Nfsc";
        exchange.mic(ExchangeMic::Nfsa);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Nfsa";
        exchange.mic(ExchangeMic::Nfsd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Nfsd";
        exchange.mic(ExchangeMic::Xstm);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xstm";
        exchange.mic(ExchangeMic::Nmra);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Nmra";
        exchange.mic(ExchangeMic::Nodx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Nodx";
        exchange.mic(ExchangeMic::Nxus);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Nxus";
        exchange.mic(ExchangeMic::Nypc);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Nypc";
        exchange.mic(ExchangeMic::Ollc);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Ollc";
        exchange.mic(ExchangeMic::Opra);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Opra";
        exchange.mic(ExchangeMic::Otcm);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Otcm";
        exchange.mic(ExchangeMic::Cave);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Cave";
        exchange.mic(ExchangeMic::Otcb);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Otcb";
        exchange.mic(ExchangeMic::Otcq);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Otcq";
        exchange.mic(ExchangeMic::Pinc);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Pinc";
        exchange.mic(ExchangeMic::Pini);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Pini";
        exchange.mic(ExchangeMic::Pinl);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Pinl";
        exchange.mic(ExchangeMic::Pinx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Pinx";
        exchange.mic(ExchangeMic::Psgm);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Psgm";
        exchange.mic(ExchangeMic::Pdqx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Pdqx";
        exchange.mic(ExchangeMic::Pdqd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Pdqd";
        exchange.mic(ExchangeMic::Pipe);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Pipe";
        exchange.mic(ExchangeMic::Prse);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Prse";
        exchange.mic(ExchangeMic::Pulx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Pulx";
        exchange.mic(ExchangeMic::Ricx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Ricx";
        exchange.mic(ExchangeMic::Ricd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Ricd";
        exchange.mic(ExchangeMic::Sgma);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Sgma";
        exchange.mic(ExchangeMic::Shaw);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Shaw";
        exchange.mic(ExchangeMic::Shad);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Shad";
        exchange.mic(ExchangeMic::Soho);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Soho";
        exchange.mic(ExchangeMic::Sstx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Sstx";
        exchange.mic(ExchangeMic::Tera);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Tera";
        exchange.mic(ExchangeMic::Tfsu);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Tfsu";
        exchange.mic(ExchangeMic::Trck);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Trck";
        exchange.mic(ExchangeMic::Trux);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Trux";
        exchange.mic(ExchangeMic::Tru1);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Tru1";
        exchange.mic(ExchangeMic::Tru2);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Tru2";
        exchange.mic(ExchangeMic::Trwb);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Trwb";
        exchange.mic(ExchangeMic::Dwsf);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Dwsf";
        exchange.mic(ExchangeMic::Twsf);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Twsf";
        exchange.mic(ExchangeMic::Tsbx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Tsbx";
        exchange.mic(ExchangeMic::Tsef);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Tsef";
        exchange.mic(ExchangeMic::Ubsa);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Ubsa";
        exchange.mic(ExchangeMic::Ubsp);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Ubsp";
        exchange.mic(ExchangeMic::Welx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Welx";
        exchange.mic(ExchangeMic::Wsag);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Wsag";
        exchange.mic(ExchangeMic::Xaqs);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xaqs";
        exchange.mic(ExchangeMic::Xbox);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xbox";
        exchange.mic(ExchangeMic::Xcbo);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xcbo";
        exchange.mic(ExchangeMic::C2Ox);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "C2Ox";
        exchange.mic(ExchangeMic::Cbsx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Cbsx";
        exchange.mic(ExchangeMic::Xcbf);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xcbf";
        exchange.mic(ExchangeMic::Xcbt);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xcbt";
        exchange.mic(ExchangeMic::Fcbt);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Fcbt";
        exchange.mic(ExchangeMic::Xkbt);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xkbt";
        exchange.mic(ExchangeMic::Xcff);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xcff";
        exchange.mic(ExchangeMic::Xchi);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xchi";
        exchange.mic(ExchangeMic::Xcis);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xcis";
        exchange.mic(ExchangeMic::Xcme);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xcme";
        exchange.mic(ExchangeMic::Cbts);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Cbts";
        exchange.mic(ExchangeMic::Cecs);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Cecs";
        exchange.mic(ExchangeMic::Cmes);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Cmes";
        exchange.mic(ExchangeMic::Fcme);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Fcme";
        exchange.mic(ExchangeMic::Glbx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Glbx";
        exchange.mic(ExchangeMic::Nyms);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Nyms";
        exchange.mic(ExchangeMic::Ximm);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Ximm";
        exchange.mic(ExchangeMic::Xiom);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xiom";
        exchange.mic(ExchangeMic::Xcur);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xcur";
        exchange.mic(ExchangeMic::Xelx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xelx";
        exchange.mic(ExchangeMic::Xfci);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xfci";
        exchange.mic(ExchangeMic::Xgmx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xgmx";
        exchange.mic(ExchangeMic::Xins);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xins";
        exchange.mic(ExchangeMic::Iblx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Iblx";
        exchange.mic(ExchangeMic::Icbx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Icbx";
        exchange.mic(ExchangeMic::Icro);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Icro";
        exchange.mic(ExchangeMic::Iidx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Iidx";
        exchange.mic(ExchangeMic::Mocx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mocx";
        exchange.mic(ExchangeMic::Rcbx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Rcbx";
        exchange.mic(ExchangeMic::Xisx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xisx";
        exchange.mic(ExchangeMic::Gmni);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Gmni";
        exchange.mic(ExchangeMic::Mcry);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Mcry";
        exchange.mic(ExchangeMic::Xisa);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xisa";
        exchange.mic(ExchangeMic::Xise);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xise";
        exchange.mic(ExchangeMic::Xmer);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xmer";
        exchange.mic(ExchangeMic::Xmge);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xmge";
        exchange.mic(ExchangeMic::Xnas);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xnas";
        exchange.mic(ExchangeMic::Bosd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Bosd";
        exchange.mic(ExchangeMic::Espd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Espd";
        exchange.mic(ExchangeMic::Nasd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Nasd";
        exchange.mic(ExchangeMic::Xbos);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xbos";
        exchange.mic(ExchangeMic::Xbrt);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xbrt";
        exchange.mic(ExchangeMic::Xbxo);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xbxo";
        exchange.mic(ExchangeMic::Xncm);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xncm";
        exchange.mic(ExchangeMic::Xndq);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xndq";
        exchange.mic(ExchangeMic::Xngs);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xngs";
        exchange.mic(ExchangeMic::Xnim);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xnim";
        exchange.mic(ExchangeMic::Xnms);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xnms";
        exchange.mic(ExchangeMic::Xpbt);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xpbt";
        exchange.mic(ExchangeMic::Xphl);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xphl";
        exchange.mic(ExchangeMic::Xpho);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xpho";
        exchange.mic(ExchangeMic::Xpor);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xpor";
        exchange.mic(ExchangeMic::Xpsx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xpsx";
        exchange.mic(ExchangeMic::Xnym);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xnym";
        exchange.mic(ExchangeMic::Xcec);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xcec";
        exchange.mic(ExchangeMic::Xnye);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xnye";
        exchange.mic(ExchangeMic::Xnyl);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xnyl";
        exchange.mic(ExchangeMic::Xnys);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xnys";
        exchange.mic(ExchangeMic::Aldp);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Aldp";
        exchange.mic(ExchangeMic::Amxo);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Amxo";
        exchange.mic(ExchangeMic::Arcd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Arcd";
        exchange.mic(ExchangeMic::Arco);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Arco";
        exchange.mic(ExchangeMic::Arcx);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Arcx";
        exchange.mic(ExchangeMic::Nysd);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Nysd";
        exchange.mic(ExchangeMic::Xase);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xase";
        exchange.mic(ExchangeMic::Xnli);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xnli";
        exchange.mic(ExchangeMic::Xoch);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xoch";
        exchange.mic(ExchangeMic::Xotc);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xotc";
        exchange.mic(ExchangeMic::Xsef);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xsef";
        exchange.mic(ExchangeMic::Xwee);
        ASSERT_EQUAL(-300, exchange.timeZoneMinutes()) << "Xwee";
        exchange.mic(ExchangeMic::Xbcv);
        ASSERT_EQUAL(-360, exchange.timeZoneMinutes()) << "Xbcv";
        exchange.mic(ExchangeMic::Cgmx);
        ASSERT_EQUAL(-360, exchange.timeZoneMinutes()) << "Cgmx";
        exchange.mic(ExchangeMic::Xemd);
        ASSERT_EQUAL(-360, exchange.timeZoneMinutes()) << "Xemd";
        exchange.mic(ExchangeMic::Xmex);
        ASSERT_EQUAL(-360, exchange.timeZoneMinutes()) << "Xmex";
        exchange.mic(ExchangeMic::Xman);
        ASSERT_EQUAL(-360, exchange.timeZoneMinutes()) << "Xman";
        exchange.mic(ExchangeMic::Xgtg);
        ASSERT_EQUAL(-360, exchange.timeZoneMinutes()) << "Xgtg";
        exchange.mic(ExchangeMic::Xsva);
        ASSERT_EQUAL(-360, exchange.timeZoneMinutes()) << "Xsva";
        exchange.mic(ExchangeMic::Xbnv);
        ASSERT_EQUAL(-360, exchange.timeZoneMinutes()) << "Xbnv";
        exchange.mic(ExchangeMic::Gxma);
        ASSERT_EQUAL(-660, exchange.timeZoneMinutes()) << "Gxma";
        exchange.mic(ExchangeMic::Aqxe);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Aqxe";
        exchange.mic(ExchangeMic::Balt);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Balt";
        exchange.mic(ExchangeMic::Bltx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Bltx";
        exchange.mic(ExchangeMic::Bcxe);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Bcxe";
        exchange.mic(ExchangeMic::Batd);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Batd";
        exchange.mic(ExchangeMic::Bate);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Bate";
        exchange.mic(ExchangeMic::Batf);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Batf";
        exchange.mic(ExchangeMic::Batp);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Batp";
        exchange.mic(ExchangeMic::Botc);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Botc";
        exchange.mic(ExchangeMic::Chid);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Chid";
        exchange.mic(ExchangeMic::Chio);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Chio";
        exchange.mic(ExchangeMic::Chix);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Chix";
        exchange.mic(ExchangeMic::Bgci);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Bgci";
        exchange.mic(ExchangeMic::Bgcb);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Bgcb";
        exchange.mic(ExchangeMic::Blox);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Blox";
        exchange.mic(ExchangeMic::Bmtf);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Bmtf";
        exchange.mic(ExchangeMic::Boat);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Boat";
        exchange.mic(ExchangeMic::Bosc);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Bosc";
        exchange.mic(ExchangeMic::Brnx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Brnx";
        exchange.mic(ExchangeMic::Caze);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Caze";
        exchange.mic(ExchangeMic::Cco2);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Cco2";
        exchange.mic(ExchangeMic::Cgme);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Cgme";
        exchange.mic(ExchangeMic::Chev);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Chev";
        exchange.mic(ExchangeMic::Blnk);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Blnk";
        exchange.mic(ExchangeMic::Cmee);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Cmee";
        exchange.mic(ExchangeMic::Cmec);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Cmec";
        exchange.mic(ExchangeMic::Cmed);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Cmed";
        exchange.mic(ExchangeMic::Cmmt);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Cmmt";
        exchange.mic(ExchangeMic::Cseu);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Cseu";
        exchange.mic(ExchangeMic::Cscf);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Cscf";
        exchange.mic(ExchangeMic::Dbix);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Dbix";
        exchange.mic(ExchangeMic::Dbcr);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Dbcr";
        exchange.mic(ExchangeMic::Dbcx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Dbcx";
        exchange.mic(ExchangeMic::Dbdc);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Dbdc";
        exchange.mic(ExchangeMic::Dbmo);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Dbmo";
        exchange.mic(ExchangeMic::Dbse);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Dbse";
        exchange.mic(ExchangeMic::Encl);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Encl";
        exchange.mic(ExchangeMic::Eqld);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Eqld";
        exchange.mic(ExchangeMic::Exeu);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Exeu";
        exchange.mic(ExchangeMic::Exbo);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Exbo";
        exchange.mic(ExchangeMic::Excp);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Excp";
        exchange.mic(ExchangeMic::Exmp);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Exmp";
        exchange.mic(ExchangeMic::Exor);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Exor";
        exchange.mic(ExchangeMic::Exsi);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Exsi";
        exchange.mic(ExchangeMic::Exvp);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Exvp";
        exchange.mic(ExchangeMic::Fair);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Fair";
        exchange.mic(ExchangeMic::Gemx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Gemx";
        exchange.mic(ExchangeMic::Gfic);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Gfic";
        exchange.mic(ExchangeMic::Gfif);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Gfif";
        exchange.mic(ExchangeMic::Gfin);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Gfin";
        exchange.mic(ExchangeMic::Gfir);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Gfir";
        exchange.mic(ExchangeMic::Gmeg);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Gmeg";
        exchange.mic(ExchangeMic::Xgcx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xgcx";
        exchange.mic(ExchangeMic::Xgdx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xgdx";
        exchange.mic(ExchangeMic::Xgsx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xgsx";
        exchange.mic(ExchangeMic::Xldx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xldx";
        exchange.mic(ExchangeMic::Grif);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Grif";
        exchange.mic(ExchangeMic::Grse);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Grse";
        exchange.mic(ExchangeMic::Hsxe);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Hsxe";
        exchange.mic(ExchangeMic::Ibal);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Ibal";
        exchange.mic(ExchangeMic::Icap);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Icap";
        exchange.mic(ExchangeMic::Btee);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Btee";
        exchange.mic(ExchangeMic::Ebsx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Ebsx";
        exchange.mic(ExchangeMic::Icah);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Icah";
        exchange.mic(ExchangeMic::Icen);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Icen";
        exchange.mic(ExchangeMic::Icse);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Icse";
        exchange.mic(ExchangeMic::Ictq);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Ictq";
        exchange.mic(ExchangeMic::Isdx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Isdx";
        exchange.mic(ExchangeMic::Wclk);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Wclk";
        exchange.mic(ExchangeMic::Ifeu);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Ifeu";
        exchange.mic(ExchangeMic::Cxrt);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Cxrt";
        exchange.mic(ExchangeMic::Ifen);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Ifen";
        exchange.mic(ExchangeMic::Ifll);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Ifll";
        exchange.mic(ExchangeMic::Iflo);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Iflo";
        exchange.mic(ExchangeMic::Iflx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Iflx";
        exchange.mic(ExchangeMic::Ifut);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Ifut";
        exchange.mic(ExchangeMic::Iswa);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Iswa";
        exchange.mic(ExchangeMic::Kleu);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Kleu";
        exchange.mic(ExchangeMic::Liqu);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Liqu";
        exchange.mic(ExchangeMic::Liqf);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Liqf";
        exchange.mic(ExchangeMic::Liqh);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Liqh";
        exchange.mic(ExchangeMic::Lmax);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Lmax";
        exchange.mic(ExchangeMic::Lmad);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Lmad";
        exchange.mic(ExchangeMic::Lmae);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Lmae";
        exchange.mic(ExchangeMic::Lmaf);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Lmaf";
        exchange.mic(ExchangeMic::Lmao);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Lmao";
        exchange.mic(ExchangeMic::Lmec);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Lmec";
        exchange.mic(ExchangeMic::Lotc);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Lotc";
        exchange.mic(ExchangeMic::Pldx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Pldx";
        exchange.mic(ExchangeMic::Lppm);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Lppm";
        exchange.mic(ExchangeMic::Mael);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Mael";
        exchange.mic(ExchangeMic::Mfgl);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Mfgl";
        exchange.mic(ExchangeMic::Mlxn);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Mlxn";
        exchange.mic(ExchangeMic::Mlax);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Mlax";
        exchange.mic(ExchangeMic::Mleu);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Mleu";
        exchange.mic(ExchangeMic::Mlve);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Mlve";
        exchange.mic(ExchangeMic::Msip);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Msip";
        exchange.mic(ExchangeMic::Mytr);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Mytr";
        exchange.mic(ExchangeMic::N2Ex);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "N2Ex";
        exchange.mic(ExchangeMic::Ndcm);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Ndcm";
        exchange.mic(ExchangeMic::Noff);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Noff";
        exchange.mic(ExchangeMic::Nuro);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Nuro";
        exchange.mic(ExchangeMic::Nurd);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Nurd";
        exchange.mic(ExchangeMic::Xnlx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xnlx";
        exchange.mic(ExchangeMic::Nxeu);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Nxeu";
        exchange.mic(ExchangeMic::Peel);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Peel";
        exchange.mic(ExchangeMic::Xphx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xphx";
        exchange.mic(ExchangeMic::Xrsp);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xrsp";
        exchange.mic(ExchangeMic::Pieu);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Pieu";
        exchange.mic(ExchangeMic::Pirm);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Pirm";
        exchange.mic(ExchangeMic::Qwix);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Qwix";
        exchange.mic(ExchangeMic::Rbce);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Rbce";
        exchange.mic(ExchangeMic::Rbsx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Rbsx";
        exchange.mic(ExchangeMic::Rtsl);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Rtsl";
        exchange.mic(ExchangeMic::Secf);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Secf";
        exchange.mic(ExchangeMic::Sgmx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Sgmx";
        exchange.mic(ExchangeMic::Shar);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Shar";
        exchange.mic(ExchangeMic::Spec);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Spec";
        exchange.mic(ExchangeMic::Sprz);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Sprz";
        exchange.mic(ExchangeMic::Ssex);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Ssex";
        exchange.mic(ExchangeMic::Swap);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Swap";
        exchange.mic(ExchangeMic::Tfsv);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Tfsv";
        exchange.mic(ExchangeMic::Tpie);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Tpie";
        exchange.mic(ExchangeMic::Trde);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Trde";
        exchange.mic(ExchangeMic::Dbvx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Dbvx";
        exchange.mic(ExchangeMic::Parx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Parx";
        exchange.mic(ExchangeMic::Tcds);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Tcds";
        exchange.mic(ExchangeMic::Tfsg);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Tfsg";
        exchange.mic(ExchangeMic::Trdx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Trdx";
        exchange.mic(ExchangeMic::Vola);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Vola";
        exchange.mic(ExchangeMic::Treu);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Treu";
        exchange.mic(ExchangeMic::Trqx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Trqx";
        exchange.mic(ExchangeMic::Trqm);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Trqm";
        exchange.mic(ExchangeMic::Ubsl);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Ubsl";
        exchange.mic(ExchangeMic::Ubse);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Ubse";
        exchange.mic(ExchangeMic::Ukgd);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Ukgd";
        exchange.mic(ExchangeMic::Ukpx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Ukpx";
        exchange.mic(ExchangeMic::Vega);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Vega";
        exchange.mic(ExchangeMic::Wins);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Wins";
        exchange.mic(ExchangeMic::Xalt);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xalt";
        exchange.mic(ExchangeMic::Xcor);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xcor";
        exchange.mic(ExchangeMic::Xgcl);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xgcl";
        exchange.mic(ExchangeMic::Xlbm);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xlbm";
        exchange.mic(ExchangeMic::Xlch);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xlch";
        exchange.mic(ExchangeMic::Xldn);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xldn";
        exchange.mic(ExchangeMic::Xlme);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xlme";
        exchange.mic(ExchangeMic::Xlon);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xlon";
        exchange.mic(ExchangeMic::Xlod);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xlod";
        exchange.mic(ExchangeMic::Xmts);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xmts";
        exchange.mic(ExchangeMic::Amts);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Amts";
        exchange.mic(ExchangeMic::Bvuk);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Bvuk";
        exchange.mic(ExchangeMic::Eacm);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Eacm";
        exchange.mic(ExchangeMic::Emts);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Emts";
        exchange.mic(ExchangeMic::Gmts);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Gmts";
        exchange.mic(ExchangeMic::Hung);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Hung";
        exchange.mic(ExchangeMic::Imts);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Imts";
        exchange.mic(ExchangeMic::Mczk);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Mczk";
        exchange.mic(ExchangeMic::Mtsa);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Mtsa";
        exchange.mic(ExchangeMic::Mtsg);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Mtsg";
        exchange.mic(ExchangeMic::Mtss);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Mtss";
        exchange.mic(ExchangeMic::Mtsw);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Mtsw";
        exchange.mic(ExchangeMic::Port);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Port";
        exchange.mic(ExchangeMic::Prme);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Prme";
        exchange.mic(ExchangeMic::Rmts);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Rmts";
        exchange.mic(ExchangeMic::Smts);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Smts";
        exchange.mic(ExchangeMic::Vmts);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Vmts";
        exchange.mic(ExchangeMic::Xsga);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xsga";
        exchange.mic(ExchangeMic::Xsmp);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xsmp";
        exchange.mic(ExchangeMic::Xswb);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xswb";
        exchange.mic(ExchangeMic::Xtup);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xtup";
        exchange.mic(ExchangeMic::Tben);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Tben";
        exchange.mic(ExchangeMic::Tbla);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Tbla";
        exchange.mic(ExchangeMic::Tpcd);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Tpcd";
        exchange.mic(ExchangeMic::Tpeq);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Tpeq";
        exchange.mic(ExchangeMic::Tpfd);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Tpfd";
        exchange.mic(ExchangeMic::Tpre);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Tpre";
        exchange.mic(ExchangeMic::Tpsd);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Tpsd";
        exchange.mic(ExchangeMic::Tpsp);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Tpsp";
        exchange.mic(ExchangeMic::Xtpe);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xtpe";
        exchange.mic(ExchangeMic::Xubs);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xubs";
        exchange.mic(ExchangeMic::Xpos);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xpos";
        exchange.mic(ExchangeMic::Xcde);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xcde";
        exchange.mic(ExchangeMic::Xdub);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xdub";
        exchange.mic(ExchangeMic::Xatl);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xatl";
        exchange.mic(ExchangeMic::Xesm);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xesm";
        exchange.mic(ExchangeMic::Xeye);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xeye";
        exchange.mic(ExchangeMic::Xmsm);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xmsm";
        exchange.mic(ExchangeMic::Xebi);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xebi";
        exchange.mic(ExchangeMic::Xice);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xice";
        exchange.mic(ExchangeMic::Dice);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Dice";
        exchange.mic(ExchangeMic::Dnis);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Dnis";
        exchange.mic(ExchangeMic::Fnis);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Fnis";
        exchange.mic(ExchangeMic::Xgha);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xgha";
        exchange.mic(ExchangeMic::Xcas);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xcas";
        exchange.mic(ExchangeMic::Xcie);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xcie";
        exchange.mic(ExchangeMic::Omic);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Omic";
        exchange.mic(ExchangeMic::Opex);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Opex";
        exchange.mic(ExchangeMic::Omip);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Omip";
        exchange.mic(ExchangeMic::Xlis);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Xlis";
        exchange.mic(ExchangeMic::Alxl);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Alxl";
        exchange.mic(ExchangeMic::Enxl);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Enxl";
        exchange.mic(ExchangeMic::Mfox);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Mfox";
        exchange.mic(ExchangeMic::Wqxl);
        ASSERT_EQUAL(60, exchange.timeZoneMinutes()) << "Wqxl";
        exchange.mic(ExchangeMic::Xxxx);
        ASSERT_EQUAL(0, exchange.timeZoneMinutes()) << "Xxxx";
    }

    TESTCASE("isEuronext() returns true for Euronext exchanges")
    {
        Exchange exchange;

        exchange.mic(ExchangeMic::Xbru);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Xbru";
        exchange.mic(ExchangeMic::Alxb);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Alxb";
        exchange.mic(ExchangeMic::Enxb);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Enxb";
        exchange.mic(ExchangeMic::Mlxb);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Mlxb";
        exchange.mic(ExchangeMic::Tnlb);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Tnlb";
        exchange.mic(ExchangeMic::Vpxb);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Vpxb";
        exchange.mic(ExchangeMic::Xbrd);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Xbrd";
        exchange.mic(ExchangeMic::Xpar);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Xpar";
        exchange.mic(ExchangeMic::Alxp);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Alxp";
        exchange.mic(ExchangeMic::Xmat);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Xmat";
        exchange.mic(ExchangeMic::Xmli);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Xmli";
        exchange.mic(ExchangeMic::Xmon);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Xmon";
        exchange.mic(ExchangeMic::Xlis);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Xlis";
        exchange.mic(ExchangeMic::Alxl);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Alxl";
        exchange.mic(ExchangeMic::Enxl);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Enxl";
        exchange.mic(ExchangeMic::Mfox);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Mfox";
        exchange.mic(ExchangeMic::Wqxl);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Wqxl";
        exchange.mic(ExchangeMic::Xams);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Xams";
        exchange.mic(ExchangeMic::Alxa);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Alxa";
        exchange.mic(ExchangeMic::Tnla);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Tnla";
        exchange.mic(ExchangeMic::Xeuc);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Xeuc";
        exchange.mic(ExchangeMic::Xeue);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Xeue";
        exchange.mic(ExchangeMic::Xeui);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Xeui";
        exchange.mic(ExchangeMic::Xldn);
        ASSERT_IS_TRUE(exchange.isEuronext()) << "Xldn";
    }

    TESTCASE("isEuronext() returns false for non-Euronext exchanges")
    {
        Exchange exchange;

        exchange.mic(ExchangeMic::Xtir);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtir";
        exchange.mic(ExchangeMic::Xalg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xalg";
        exchange.mic(ExchangeMic::Bace);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bace";
        exchange.mic(ExchangeMic::Bcfs);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bcfs";
        exchange.mic(ExchangeMic::Xmvl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmvl";
        exchange.mic(ExchangeMic::Rofx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Rofx";
        exchange.mic(ExchangeMic::Xbcc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbcc";
        exchange.mic(ExchangeMic::Mvcx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mvcx";
        exchange.mic(ExchangeMic::Xbcm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbcm";
        exchange.mic(ExchangeMic::Xbcx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbcx";
        exchange.mic(ExchangeMic::Xbue);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbue";
        exchange.mic(ExchangeMic::Xmev);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmev";
        exchange.mic(ExchangeMic::Xcnf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcnf";
        exchange.mic(ExchangeMic::Xmab);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmab";
        exchange.mic(ExchangeMic::Xmtb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmtb";
        exchange.mic(ExchangeMic::Xros);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xros";
        exchange.mic(ExchangeMic::Xrox);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xrox";
        exchange.mic(ExchangeMic::Xtuc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtuc";
        exchange.mic(ExchangeMic::Xarm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xarm";
        exchange.mic(ExchangeMic::Apxl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Apxl";
        exchange.mic(ExchangeMic::Awbx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Awbx";
        exchange.mic(ExchangeMic::Awex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Awex";
        exchange.mic(ExchangeMic::Blev);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Blev";
        exchange.mic(ExchangeMic::Cgma);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cgma";
        exchange.mic(ExchangeMic::Chia);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Chia";
        exchange.mic(ExchangeMic::Cxac);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cxac";
        exchange.mic(ExchangeMic::Cxaf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cxaf";
        exchange.mic(ExchangeMic::Cxam);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cxam";
        exchange.mic(ExchangeMic::Cxan);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cxan";
        exchange.mic(ExchangeMic::Cxap);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cxap";
        exchange.mic(ExchangeMic::Cxav);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cxav";
        exchange.mic(ExchangeMic::Cxaw);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cxaw";
        exchange.mic(ExchangeMic::Clau);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Clau";
        exchange.mic(ExchangeMic::Csau);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Csau";
        exchange.mic(ExchangeMic::Cfau);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cfau";
        exchange.mic(ExchangeMic::Maqx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Maqx";
        exchange.mic(ExchangeMic::Msal);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Msal";
        exchange.mic(ExchangeMic::Nsxb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nsxb";
        exchange.mic(ExchangeMic::Siga);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Siga";
        exchange.mic(ExchangeMic::Simv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Simv";
        exchange.mic(ExchangeMic::Xasx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xasx";
        exchange.mic(ExchangeMic::Asxb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Asxb";
        exchange.mic(ExchangeMic::Asxc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Asxc";
        exchange.mic(ExchangeMic::Asxp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Asxp";
        exchange.mic(ExchangeMic::Asxt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Asxt";
        exchange.mic(ExchangeMic::Asxv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Asxv";
        exchange.mic(ExchangeMic::Xsfe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsfe";
        exchange.mic(ExchangeMic::Xfex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xfex";
        exchange.mic(ExchangeMic::Xnec);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnec";
        exchange.mic(ExchangeMic::Xyie);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xyie";
        exchange.mic(ExchangeMic::Exaa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Exaa";
        exchange.mic(ExchangeMic::Xwbo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xwbo";
        exchange.mic(ExchangeMic::Wbah);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Wbah";
        exchange.mic(ExchangeMic::Wbdm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Wbdm";
        exchange.mic(ExchangeMic::Wbgf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Wbgf";
        exchange.mic(ExchangeMic::Xceg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xceg";
        exchange.mic(ExchangeMic::Xvie);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xvie";
        exchange.mic(ExchangeMic::Bsex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bsex";
        exchange.mic(ExchangeMic::Xibe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xibe";
        exchange.mic(ExchangeMic::Xbaa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbaa";
        exchange.mic(ExchangeMic::Bfex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bfex";
        exchange.mic(ExchangeMic::Xbah);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbah";
        exchange.mic(ExchangeMic::Xchg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xchg";
        exchange.mic(ExchangeMic::Xdha);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdha";
        exchange.mic(ExchangeMic::Xbab);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbab";
        exchange.mic(ExchangeMic::Bajm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bajm";
        exchange.mic(ExchangeMic::Bcse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bcse";
        exchange.mic(ExchangeMic::Blpx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Blpx";
        exchange.mic(ExchangeMic::Bmts);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bmts";
        exchange.mic(ExchangeMic::Mtsd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtsd";
        exchange.mic(ExchangeMic::Mtsf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtsf";
        exchange.mic(ExchangeMic::Xbda);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbda";
        exchange.mic(ExchangeMic::Xbol);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbol";
        exchange.mic(ExchangeMic::Xblb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xblb";
        exchange.mic(ExchangeMic::Blbf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Blbf";
        exchange.mic(ExchangeMic::Xsse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsse";
        exchange.mic(ExchangeMic::Xbot);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbot";
        exchange.mic(ExchangeMic::Bote);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bote";
        exchange.mic(ExchangeMic::Botv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Botv";
        exchange.mic(ExchangeMic::Bcmm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bcmm";
        exchange.mic(ExchangeMic::Bovm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bovm";
        exchange.mic(ExchangeMic::Brix);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Brix";
        exchange.mic(ExchangeMic::Bvmf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bvmf";
        exchange.mic(ExchangeMic::Ceti);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ceti";
        exchange.mic(ExchangeMic::Selc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Selc";
        exchange.mic(ExchangeMic::Ibex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ibex";
        exchange.mic(ExchangeMic::Xbul);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbul";
        exchange.mic(ExchangeMic::Xcsx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcsx";
        exchange.mic(ExchangeMic::Xdsx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdsx";
        exchange.mic(ExchangeMic::Canx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Canx";
        exchange.mic(ExchangeMic::Chic);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Chic";
        exchange.mic(ExchangeMic::Xcx2);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcx2";
        exchange.mic(ExchangeMic::Cotc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cotc";
        exchange.mic(ExchangeMic::Ifca);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ifca";
        exchange.mic(ExchangeMic::Ivzx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ivzx";
        exchange.mic(ExchangeMic::Lica);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lica";
        exchange.mic(ExchangeMic::Matn);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Matn";
        exchange.mic(ExchangeMic::Neoe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Neoe";
        exchange.mic(ExchangeMic::Ngxc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ngxc";
        exchange.mic(ExchangeMic::Omga);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Omga";
        exchange.mic(ExchangeMic::Lynx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lynx";
        exchange.mic(ExchangeMic::Tmxs);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tmxs";
        exchange.mic(ExchangeMic::Xats);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xats";
        exchange.mic(ExchangeMic::Xbbk);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbbk";
        exchange.mic(ExchangeMic::Xcnq);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcnq";
        exchange.mic(ExchangeMic::Pure);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pure";
        exchange.mic(ExchangeMic::Xicx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xicx";
        exchange.mic(ExchangeMic::Xmoc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmoc";
        exchange.mic(ExchangeMic::Xmod);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmod";
        exchange.mic(ExchangeMic::Xtse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtse";
        exchange.mic(ExchangeMic::Xtsx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtsx";
        exchange.mic(ExchangeMic::Xtnx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtnx";
        exchange.mic(ExchangeMic::Xbvc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbvc";
        exchange.mic(ExchangeMic::Xcay);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcay";
        exchange.mic(ExchangeMic::Bova);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bova";
        exchange.mic(ExchangeMic::Xbcl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbcl";
        exchange.mic(ExchangeMic::Xsgo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsgo";
        exchange.mic(ExchangeMic::Ccfx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ccfx";
        exchange.mic(ExchangeMic::Cssx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cssx";
        exchange.mic(ExchangeMic::Sgex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Sgex";
        exchange.mic(ExchangeMic::Xcfe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcfe";
        exchange.mic(ExchangeMic::Xdce);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdce";
        exchange.mic(ExchangeMic::Xsge);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsge";
        exchange.mic(ExchangeMic::Xine);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xine";
        exchange.mic(ExchangeMic::Xshe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xshe";
        exchange.mic(ExchangeMic::Xsec);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsec";
        exchange.mic(ExchangeMic::Xshg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xshg";
        exchange.mic(ExchangeMic::Xssc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xssc";
        exchange.mic(ExchangeMic::Xzce);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xzce";
        exchange.mic(ExchangeMic::Xbog);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbog";
        exchange.mic(ExchangeMic::Xbnv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbnv";
        exchange.mic(ExchangeMic::Xcro);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcro";
        exchange.mic(ExchangeMic::Xtrz);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtrz";
        exchange.mic(ExchangeMic::Xzag);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xzag";
        exchange.mic(ExchangeMic::Xzam);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xzam";
        exchange.mic(ExchangeMic::Dcsx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dcsx";
        exchange.mic(ExchangeMic::Xcys);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcys";
        exchange.mic(ExchangeMic::Xcyo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcyo";
        exchange.mic(ExchangeMic::Xecm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xecm";
        exchange.mic(ExchangeMic::Xpra);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpra";
        exchange.mic(ExchangeMic::Xprm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xprm";
        exchange.mic(ExchangeMic::Xpxe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpxe";
        exchange.mic(ExchangeMic::Xrmz);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xrmz";
        exchange.mic(ExchangeMic::Xrmo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xrmo";
        exchange.mic(ExchangeMic::Dktc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dktc";
        exchange.mic(ExchangeMic::Gxgr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gxgr";
        exchange.mic(ExchangeMic::Gxgf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gxgf";
        exchange.mic(ExchangeMic::Gxgm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gxgm";
        exchange.mic(ExchangeMic::Npga);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Npga";
        exchange.mic(ExchangeMic::Xcse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcse";
        exchange.mic(ExchangeMic::Dcse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dcse";
        exchange.mic(ExchangeMic::Dndk);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dndk";
        exchange.mic(ExchangeMic::Fndk);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fndk";
        exchange.mic(ExchangeMic::Xbvr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbvr";
        exchange.mic(ExchangeMic::Xgua);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xgua";
        exchange.mic(ExchangeMic::Xqui);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xqui";
        exchange.mic(ExchangeMic::Nilx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nilx";
        exchange.mic(ExchangeMic::Xcai);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcai";
        exchange.mic(ExchangeMic::Xsva);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsva";
        exchange.mic(ExchangeMic::Xtal);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtal";
        exchange.mic(ExchangeMic::Fnee);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fnee";
        exchange.mic(ExchangeMic::Vmfx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Vmfx";
        exchange.mic(ExchangeMic::Xsps);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsps";
        exchange.mic(ExchangeMic::Fgex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fgex";
        exchange.mic(ExchangeMic::Xhel);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xhel";
        exchange.mic(ExchangeMic::Dhel);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dhel";
        exchange.mic(ExchangeMic::Dnfi);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dnfi";
        exchange.mic(ExchangeMic::Fnfi);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fnfi";
        exchange.mic(ExchangeMic::Coal);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Coal";
        exchange.mic(ExchangeMic::Epex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Epex";
        exchange.mic(ExchangeMic::Fmts);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fmts";
        exchange.mic(ExchangeMic::Gmtf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gmtf";
        exchange.mic(ExchangeMic::Lchc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lchc";
        exchange.mic(ExchangeMic::Xafr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xafr";
        exchange.mic(ExchangeMic::Xbln);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbln";
        exchange.mic(ExchangeMic::Mtch);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtch";
        exchange.mic(ExchangeMic::Xpow);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpow";
        exchange.mic(ExchangeMic::Xpsf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpsf";
        exchange.mic(ExchangeMic::Xgse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xgse";
        exchange.mic(ExchangeMic::X360T);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "X360T";
        exchange.mic(ExchangeMic::Cats);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cats";
        exchange.mic(ExchangeMic::Dbox);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dbox";
        exchange.mic(ExchangeMic::Auto);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Auto";
        exchange.mic(ExchangeMic::Tgat);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tgat";
        exchange.mic(ExchangeMic::Xgat);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xgat";
        exchange.mic(ExchangeMic::Xgrm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xgrm";
        exchange.mic(ExchangeMic::Xber);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xber";
        exchange.mic(ExchangeMic::Bera);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bera";
        exchange.mic(ExchangeMic::Berb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Berb";
        exchange.mic(ExchangeMic::Berc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Berc";
        exchange.mic(ExchangeMic::Eqta);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Eqta";
        exchange.mic(ExchangeMic::Eqtb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Eqtb";
        exchange.mic(ExchangeMic::Eqtc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Eqtc";
        exchange.mic(ExchangeMic::Eqtd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Eqtd";
        exchange.mic(ExchangeMic::Xeqt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xeqt";
        exchange.mic(ExchangeMic::Zobx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Zobx";
        exchange.mic(ExchangeMic::Xdus);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdus";
        exchange.mic(ExchangeMic::Dusa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dusa";
        exchange.mic(ExchangeMic::Dusb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dusb";
        exchange.mic(ExchangeMic::Dusc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dusc";
        exchange.mic(ExchangeMic::Dusd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dusd";
        exchange.mic(ExchangeMic::Xqtx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xqtx";
        exchange.mic(ExchangeMic::Xecb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xecb";
        exchange.mic(ExchangeMic::Xecc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xecc";
        exchange.mic(ExchangeMic::Xeee);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xeee";
        exchange.mic(ExchangeMic::Xeeo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xeeo";
        exchange.mic(ExchangeMic::Xeer);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xeer";
        exchange.mic(ExchangeMic::Xeum);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xeum";
        exchange.mic(ExchangeMic::Xeur);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xeur";
        exchange.mic(ExchangeMic::Ecag);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ecag";
        exchange.mic(ExchangeMic::Xere);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xere";
        exchange.mic(ExchangeMic::Xert);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xert";
        exchange.mic(ExchangeMic::Xeub);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xeub";
        exchange.mic(ExchangeMic::Xeup);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xeup";
        exchange.mic(ExchangeMic::Xfra);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xfra";
        exchange.mic(ExchangeMic::Fraa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fraa";
        exchange.mic(ExchangeMic::Frab);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Frab";
        exchange.mic(ExchangeMic::Frad);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Frad";
        exchange.mic(ExchangeMic::Xdbc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdbc";
        exchange.mic(ExchangeMic::Xdbv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdbv";
        exchange.mic(ExchangeMic::Xdbx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdbx";
        exchange.mic(ExchangeMic::Xeta);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xeta";
        exchange.mic(ExchangeMic::Xetb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xetb";
        exchange.mic(ExchangeMic::Xetr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xetr";
        exchange.mic(ExchangeMic::Xnew);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnew";
        exchange.mic(ExchangeMic::Xham);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xham";
        exchange.mic(ExchangeMic::Hama);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hama";
        exchange.mic(ExchangeMic::Hamb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hamb";
        exchange.mic(ExchangeMic::Xhan);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xhan";
        exchange.mic(ExchangeMic::Hana);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hana";
        exchange.mic(ExchangeMic::Hanb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hanb";
        exchange.mic(ExchangeMic::Xinv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xinv";
        exchange.mic(ExchangeMic::Xmun);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmun";
        exchange.mic(ExchangeMic::Muna);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Muna";
        exchange.mic(ExchangeMic::Munb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Munb";
        exchange.mic(ExchangeMic::Munc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Munc";
        exchange.mic(ExchangeMic::Mund);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mund";
        exchange.mic(ExchangeMic::Xsco);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsco";
        exchange.mic(ExchangeMic::Xsc1);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsc1";
        exchange.mic(ExchangeMic::Xsc2);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsc2";
        exchange.mic(ExchangeMic::Xsc3);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsc3";
        exchange.mic(ExchangeMic::Xstu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xstu";
        exchange.mic(ExchangeMic::Euwx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Euwx";
        exchange.mic(ExchangeMic::Stua);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Stua";
        exchange.mic(ExchangeMic::Stub);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Stub";
        exchange.mic(ExchangeMic::Xxsc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xxsc";
        exchange.mic(ExchangeMic::Xgha);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xgha";
        exchange.mic(ExchangeMic::Gsxl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gsxl";
        exchange.mic(ExchangeMic::Asex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Asex";
        exchange.mic(ExchangeMic::Enax);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Enax";
        exchange.mic(ExchangeMic::Euax);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Euax";
        exchange.mic(ExchangeMic::Hotc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hotc";
        exchange.mic(ExchangeMic::Xade);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xade";
        exchange.mic(ExchangeMic::Xath);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xath";
        exchange.mic(ExchangeMic::Xipo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xipo";
        exchange.mic(ExchangeMic::Hdat);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hdat";
        exchange.mic(ExchangeMic::Hemo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hemo";
        exchange.mic(ExchangeMic::Xgtg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xgtg";
        exchange.mic(ExchangeMic::Xcie);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcie";
        exchange.mic(ExchangeMic::Gsci);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gsci";
        exchange.mic(ExchangeMic::Xbcv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbcv";
        exchange.mic(ExchangeMic::Cgmh);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cgmh";
        exchange.mic(ExchangeMic::Clhk);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Clhk";
        exchange.mic(ExchangeMic::Cshk);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cshk";
        exchange.mic(ExchangeMic::Cfhk);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cfhk";
        exchange.mic(ExchangeMic::Dbhk);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dbhk";
        exchange.mic(ExchangeMic::Eotc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Eotc";
        exchange.mic(ExchangeMic::Hsxa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hsxa";
        exchange.mic(ExchangeMic::Maqh);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Maqh";
        exchange.mic(ExchangeMic::Sigh);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Sigh";
        exchange.mic(ExchangeMic::Tocp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tocp";
        exchange.mic(ExchangeMic::Ubsx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ubsx";
        exchange.mic(ExchangeMic::Xcgs);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcgs";
        exchange.mic(ExchangeMic::Xhkf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xhkf";
        exchange.mic(ExchangeMic::Xhkg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xhkg";
        exchange.mic(ExchangeMic::Shsc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Shsc";
        exchange.mic(ExchangeMic::Xgem);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xgem";
        exchange.mic(ExchangeMic::Xihk);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xihk";
        exchange.mic(ExchangeMic::Xpst);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpst";
        exchange.mic(ExchangeMic::Beta);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Beta";
        exchange.mic(ExchangeMic::Hupx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hupx";
        exchange.mic(ExchangeMic::Kccp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Kccp";
        exchange.mic(ExchangeMic::Xbud);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbud";
        exchange.mic(ExchangeMic::Xgas);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xgas";
        exchange.mic(ExchangeMic::Xice);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xice";
        exchange.mic(ExchangeMic::Dice);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dice";
        exchange.mic(ExchangeMic::Dnis);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dnis";
        exchange.mic(ExchangeMic::Fnis);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fnis";
        exchange.mic(ExchangeMic::Acex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Acex";
        exchange.mic(ExchangeMic::Cdsl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cdsl";
        exchange.mic(ExchangeMic::Icxl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Icxl";
        exchange.mic(ExchangeMic::Isex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Isex";
        exchange.mic(ExchangeMic::Mcxx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mcxx";
        exchange.mic(ExchangeMic::Nbot);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nbot";
        exchange.mic(ExchangeMic::Nmce);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nmce";
        exchange.mic(ExchangeMic::Otcx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Otcx";
        exchange.mic(ExchangeMic::Pxil);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pxil";
        exchange.mic(ExchangeMic::Xban);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xban";
        exchange.mic(ExchangeMic::Xbom);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbom";
        exchange.mic(ExchangeMic::Bsme);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bsme";
        exchange.mic(ExchangeMic::Xcal);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcal";
        exchange.mic(ExchangeMic::Xdes);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdes";
        exchange.mic(ExchangeMic::Ximc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ximc";
        exchange.mic(ExchangeMic::Xmds);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmds";
        exchange.mic(ExchangeMic::Xncd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xncd";
        exchange.mic(ExchangeMic::Xnse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnse";
        exchange.mic(ExchangeMic::Xuse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xuse";
        exchange.mic(ExchangeMic::Icdx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Icdx";
        exchange.mic(ExchangeMic::Xbbj);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbbj";
        exchange.mic(ExchangeMic::Xidx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xidx";
        exchange.mic(ExchangeMic::Xjnb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xjnb";
        exchange.mic(ExchangeMic::Imex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Imex";
        exchange.mic(ExchangeMic::Xteh);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xteh";
        exchange.mic(ExchangeMic::Xiqs);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xiqs";
        exchange.mic(ExchangeMic::Xpos);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpos";
        exchange.mic(ExchangeMic::Xcde);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcde";
        exchange.mic(ExchangeMic::Xdub);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdub";
        exchange.mic(ExchangeMic::Xatl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xatl";
        exchange.mic(ExchangeMic::Xesm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xesm";
        exchange.mic(ExchangeMic::Xeye);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xeye";
        exchange.mic(ExchangeMic::Xmsm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmsm";
        exchange.mic(ExchangeMic::Xebi);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xebi";
        exchange.mic(ExchangeMic::Xtae);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtae";
        exchange.mic(ExchangeMic::Cgit);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cgit";
        exchange.mic(ExchangeMic::Cgcm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cgcm";
        exchange.mic(ExchangeMic::Cgdb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cgdb";
        exchange.mic(ExchangeMic::Cgeb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cgeb";
        exchange.mic(ExchangeMic::Cggd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cggd";
        exchange.mic(ExchangeMic::Cgnd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cgnd";
        exchange.mic(ExchangeMic::Cgqd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cgqd";
        exchange.mic(ExchangeMic::Cgqt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cgqt";
        exchange.mic(ExchangeMic::Cgtr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cgtr";
        exchange.mic(ExchangeMic::Emid);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Emid";
        exchange.mic(ExchangeMic::Emdr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Emdr";
        exchange.mic(ExchangeMic::Emir);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Emir";
        exchange.mic(ExchangeMic::Etlx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Etlx";
        exchange.mic(ExchangeMic::Hmtf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hmtf";
        exchange.mic(ExchangeMic::Hmod);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hmod";
        exchange.mic(ExchangeMic::Mtsc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtsc";
        exchange.mic(ExchangeMic::Bond);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bond";
        exchange.mic(ExchangeMic::Mtsm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtsm";
        exchange.mic(ExchangeMic::Ssob);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ssob";
        exchange.mic(ExchangeMic::Xgme);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xgme";
        exchange.mic(ExchangeMic::Xmil);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmil";
        exchange.mic(ExchangeMic::Etfp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Etfp";
        exchange.mic(ExchangeMic::Mivx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mivx";
        exchange.mic(ExchangeMic::Motx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Motx";
        exchange.mic(ExchangeMic::Mtaa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtaa";
        exchange.mic(ExchangeMic::Mtah);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtah";
        exchange.mic(ExchangeMic::Sedx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Sedx";
        exchange.mic(ExchangeMic::Xaim);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xaim";
        exchange.mic(ExchangeMic::Xdmi);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdmi";
        exchange.mic(ExchangeMic::Xmot);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmot";
        exchange.mic(ExchangeMic::Xbrv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbrv";
        exchange.mic(ExchangeMic::Xjam);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xjam";
        exchange.mic(ExchangeMic::Betp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Betp";
        exchange.mic(ExchangeMic::Chij);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Chij";
        exchange.mic(ExchangeMic::Chis);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Chis";
        exchange.mic(ExchangeMic::Chiv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Chiv";
        exchange.mic(ExchangeMic::Citx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Citx";
        exchange.mic(ExchangeMic::Citd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Citd";
        exchange.mic(ExchangeMic::Cljp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cljp";
        exchange.mic(ExchangeMic::Cmet);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cmet";
        exchange.mic(ExchangeMic::Csjp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Csjp";
        exchange.mic(ExchangeMic::Cfjp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cfjp";
        exchange.mic(ExchangeMic::Drct);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Drct";
        exchange.mic(ExchangeMic::Lxjp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lxjp";
        exchange.mic(ExchangeMic::Maqj);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Maqj";
        exchange.mic(ExchangeMic::Mizx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mizx";
        exchange.mic(ExchangeMic::Msms);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Msms";
        exchange.mic(ExchangeMic::Nmrj);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nmrj";
        exchange.mic(ExchangeMic::Nxjp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nxjp";
        exchange.mic(ExchangeMic::Nxse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nxse";
        exchange.mic(ExchangeMic::Nxvw);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nxvw";
        exchange.mic(ExchangeMic::Sbij);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Sbij";
        exchange.mic(ExchangeMic::Sbiu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Sbiu";
        exchange.mic(ExchangeMic::Sbiv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Sbiv";
        exchange.mic(ExchangeMic::Xsbi);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsbi";
        exchange.mic(ExchangeMic::Sigj);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Sigj";
        exchange.mic(ExchangeMic::Xfka);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xfka";
        exchange.mic(ExchangeMic::Xijp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xijp";
        exchange.mic(ExchangeMic::Jasr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Jasr";
        exchange.mic(ExchangeMic::Xjpx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xjpx";
        exchange.mic(ExchangeMic::Xjas);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xjas";
        exchange.mic(ExchangeMic::Xose);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xose";
        exchange.mic(ExchangeMic::Xosj);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xosj";
        exchange.mic(ExchangeMic::Xtam);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtam";
        exchange.mic(ExchangeMic::Xtk1);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtk1";
        exchange.mic(ExchangeMic::Xtk2);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtk2";
        exchange.mic(ExchangeMic::Xtk3);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtk3";
        exchange.mic(ExchangeMic::Xtks);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtks";
        exchange.mic(ExchangeMic::Xkac);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkac";
        exchange.mic(ExchangeMic::Xngo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xngo";
        exchange.mic(ExchangeMic::Xnks);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnks";
        exchange.mic(ExchangeMic::Xsap);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsap";
        exchange.mic(ExchangeMic::Xtff);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtff";
        exchange.mic(ExchangeMic::Xtkt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtkt";
        exchange.mic(ExchangeMic::Xamm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xamm";
        exchange.mic(ExchangeMic::Etsc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Etsc";
        exchange.mic(ExchangeMic::Xkaz);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkaz";
        exchange.mic(ExchangeMic::Xnai);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnai";
        exchange.mic(ExchangeMic::Xkfb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkfb";
        exchange.mic(ExchangeMic::Xkrx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkrx";
        exchange.mic(ExchangeMic::Xkcm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkcm";
        exchange.mic(ExchangeMic::Xkem);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkem";
        exchange.mic(ExchangeMic::Xkfe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkfe";
        exchange.mic(ExchangeMic::Xkon);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkon";
        exchange.mic(ExchangeMic::Xkos);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkos";
        exchange.mic(ExchangeMic::Xkuw);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkuw";
        exchange.mic(ExchangeMic::Xkse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkse";
        exchange.mic(ExchangeMic::Xlao);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlao";
        exchange.mic(ExchangeMic::Xris);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xris";
        exchange.mic(ExchangeMic::Fnlv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fnlv";
        exchange.mic(ExchangeMic::Xbey);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbey";
        exchange.mic(ExchangeMic::Xlsm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlsm";
        exchange.mic(ExchangeMic::Bapx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bapx";
        exchange.mic(ExchangeMic::Getb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Getb";
        exchange.mic(ExchangeMic::Xlit);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlit";
        exchange.mic(ExchangeMic::Fnlt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fnlt";
        exchange.mic(ExchangeMic::Cclx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cclx";
        exchange.mic(ExchangeMic::Xlux);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlux";
        exchange.mic(ExchangeMic::Emtf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Emtf";
        exchange.mic(ExchangeMic::Xves);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xves";
        exchange.mic(ExchangeMic::Xmae);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmae";
        exchange.mic(ExchangeMic::Xmdg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmdg";
        exchange.mic(ExchangeMic::Xmsw);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmsw";
        exchange.mic(ExchangeMic::Xkls);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkls";
        exchange.mic(ExchangeMic::Mesq);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mesq";
        exchange.mic(ExchangeMic::Xlfx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlfx";
        exchange.mic(ExchangeMic::Xrbm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xrbm";
        exchange.mic(ExchangeMic::Malx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Malx";
        exchange.mic(ExchangeMic::Ewsm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ewsm";
        exchange.mic(ExchangeMic::Xmal);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmal";
        exchange.mic(ExchangeMic::Gbot);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gbot";
        exchange.mic(ExchangeMic::Xafx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xafx";
        exchange.mic(ExchangeMic::Xmau);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmau";
        exchange.mic(ExchangeMic::Cgmx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cgmx";
        exchange.mic(ExchangeMic::Xemd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xemd";
        exchange.mic(ExchangeMic::Xmex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmex";
        exchange.mic(ExchangeMic::Xmol);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmol";
        exchange.mic(ExchangeMic::Xula);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xula";
        exchange.mic(ExchangeMic::Xmnx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmnx";
        exchange.mic(ExchangeMic::Xcas);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcas";
        exchange.mic(ExchangeMic::Xbvm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbvm";
        exchange.mic(ExchangeMic::Xnam);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnam";
        exchange.mic(ExchangeMic::Xnep);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnep";
        exchange.mic(ExchangeMic::Nzfx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nzfx";
        exchange.mic(ExchangeMic::Xnze);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnze";
        exchange.mic(ExchangeMic::Xman);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xman";
        exchange.mic(ExchangeMic::Nasx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nasx";
        exchange.mic(ExchangeMic::Xnsa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnsa";
        exchange.mic(ExchangeMic::Fish);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fish";
        exchange.mic(ExchangeMic::Fshx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fshx";
        exchange.mic(ExchangeMic::Icas);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Icas";
        exchange.mic(ExchangeMic::Nexo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nexo";
        exchange.mic(ExchangeMic::Nops);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nops";
        exchange.mic(ExchangeMic::Norx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Norx";
        exchange.mic(ExchangeMic::Nosc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nosc";
        exchange.mic(ExchangeMic::Notc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Notc";
        exchange.mic(ExchangeMic::Oslc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Oslc";
        exchange.mic(ExchangeMic::Xima);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xima";
        exchange.mic(ExchangeMic::Xosl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xosl";
        exchange.mic(ExchangeMic::Merd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Merd";
        exchange.mic(ExchangeMic::Merk);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Merk";
        exchange.mic(ExchangeMic::Nibr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nibr";
        exchange.mic(ExchangeMic::Xoad);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xoad";
        exchange.mic(ExchangeMic::Xoam);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xoam";
        exchange.mic(ExchangeMic::Xoas);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xoas";
        exchange.mic(ExchangeMic::Xosc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xosc";
        exchange.mic(ExchangeMic::Xosd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xosd";
        exchange.mic(ExchangeMic::Xmus);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmus";
        exchange.mic(ExchangeMic::Ncel);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ncel";
        exchange.mic(ExchangeMic::Xisl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xisl";
        exchange.mic(ExchangeMic::Xkar);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkar";
        exchange.mic(ExchangeMic::Xlah);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlah";
        exchange.mic(ExchangeMic::Xpae);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpae";
        exchange.mic(ExchangeMic::Xpty);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpty";
        exchange.mic(ExchangeMic::Xpom);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpom";
        exchange.mic(ExchangeMic::Xvpa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xvpa";
        exchange.mic(ExchangeMic::Xlim);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlim";
        exchange.mic(ExchangeMic::Clph);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Clph";
        exchange.mic(ExchangeMic::Pdex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pdex";
        exchange.mic(ExchangeMic::Xphs);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xphs";
        exchange.mic(ExchangeMic::Kdpw);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Kdpw";
        exchange.mic(ExchangeMic::Xwar);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xwar";
        exchange.mic(ExchangeMic::Bosp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bosp";
        exchange.mic(ExchangeMic::Plpd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Plpd";
        exchange.mic(ExchangeMic::Plpx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Plpx";
        exchange.mic(ExchangeMic::Rpwc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Rpwc";
        exchange.mic(ExchangeMic::Tbsp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tbsp";
        exchange.mic(ExchangeMic::Wbcl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Wbcl";
        exchange.mic(ExchangeMic::Wbon);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Wbon";
        exchange.mic(ExchangeMic::Wder);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Wder";
        exchange.mic(ExchangeMic::Wetp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Wetp";
        exchange.mic(ExchangeMic::Wgas);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Wgas";
        exchange.mic(ExchangeMic::Wind);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Wind";
        exchange.mic(ExchangeMic::Wmtf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Wmtf";
        exchange.mic(ExchangeMic::Xnco);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnco";
        exchange.mic(ExchangeMic::Omic);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Omic";
        exchange.mic(ExchangeMic::Opex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Opex";
        exchange.mic(ExchangeMic::Omip);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Omip";
        exchange.mic(ExchangeMic::Dsmd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dsmd";
        exchange.mic(ExchangeMic::Trpx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Trpx";
        exchange.mic(ExchangeMic::Bmfx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bmfx";
        exchange.mic(ExchangeMic::Bmfa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bmfa";
        exchange.mic(ExchangeMic::Bmfm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bmfm";
        exchange.mic(ExchangeMic::Sbmf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Sbmf";
        exchange.mic(ExchangeMic::Xbrm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbrm";
        exchange.mic(ExchangeMic::Xbse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbse";
        exchange.mic(ExchangeMic::Xbsd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbsd";
        exchange.mic(ExchangeMic::Xcan);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcan";
        exchange.mic(ExchangeMic::Xras);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xras";
        exchange.mic(ExchangeMic::Xrpm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xrpm";
        exchange.mic(ExchangeMic::Misx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Misx";
        exchange.mic(ExchangeMic::Rtsx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Rtsx";
        exchange.mic(ExchangeMic::Namx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Namx";
        exchange.mic(ExchangeMic::Rpdx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Rpdx";
        exchange.mic(ExchangeMic::Rusx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Rusx";
        exchange.mic(ExchangeMic::Spim);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Spim";
        exchange.mic(ExchangeMic::Xmos);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmos";
        exchange.mic(ExchangeMic::Xpet);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpet";
        exchange.mic(ExchangeMic::Xpic);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpic";
        exchange.mic(ExchangeMic::Xrus);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xrus";
        exchange.mic(ExchangeMic::Xsam);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsam";
        exchange.mic(ExchangeMic::Xsib);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsib";
        exchange.mic(ExchangeMic::Rotc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Rotc";
        exchange.mic(ExchangeMic::Rsex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Rsex";
        exchange.mic(ExchangeMic::Xecs);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xecs";
        exchange.mic(ExchangeMic::Xsau);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsau";
        exchange.mic(ExchangeMic::Xbel);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbel";
        exchange.mic(ExchangeMic::Cltd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cltd";
        exchange.mic(ExchangeMic::Ecal);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ecal";
        exchange.mic(ExchangeMic::Eeal);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Eeal";
        exchange.mic(ExchangeMic::Ifsg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ifsg";
        exchange.mic(ExchangeMic::Jadx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Jadx";
        exchange.mic(ExchangeMic::Smex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Smex";
        exchange.mic(ExchangeMic::Tfsa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tfsa";
        exchange.mic(ExchangeMic::Xses);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xses";
        exchange.mic(ExchangeMic::Xsca);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsca";
        exchange.mic(ExchangeMic::Xsce);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsce";
        exchange.mic(ExchangeMic::Xsim);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsim";
        exchange.mic(ExchangeMic::Spxe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Spxe";
        exchange.mic(ExchangeMic::Xbra);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbra";
        exchange.mic(ExchangeMic::Xlju);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlju";
        exchange.mic(ExchangeMic::Xsop);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsop";
        exchange.mic(ExchangeMic::Xjse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xjse";
        exchange.mic(ExchangeMic::Altx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Altx";
        exchange.mic(ExchangeMic::Xbes);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbes";
        exchange.mic(ExchangeMic::Xsaf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsaf";
        exchange.mic(ExchangeMic::Xsfa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsfa";
        exchange.mic(ExchangeMic::Yldx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Yldx";
        exchange.mic(ExchangeMic::Bmex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bmex";
        exchange.mic(ExchangeMic::Bmcl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bmcl";
        exchange.mic(ExchangeMic::Mabx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mabx";
        exchange.mic(ExchangeMic::Marf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Marf";
        exchange.mic(ExchangeMic::Merf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Merf";
        exchange.mic(ExchangeMic::Send);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Send";
        exchange.mic(ExchangeMic::Xbar);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbar";
        exchange.mic(ExchangeMic::Xbil);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbil";
        exchange.mic(ExchangeMic::Xdrf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdrf";
        exchange.mic(ExchangeMic::Xlat);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlat";
        exchange.mic(ExchangeMic::Xmad);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmad";
        exchange.mic(ExchangeMic::Xmce);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmce";
        exchange.mic(ExchangeMic::Xmpw);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmpw";
        exchange.mic(ExchangeMic::Xmrv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmrv";
        exchange.mic(ExchangeMic::Xval);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xval";
        exchange.mic(ExchangeMic::Ibgh);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ibgh";
        exchange.mic(ExchangeMic::Mibg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mibg";
        exchange.mic(ExchangeMic::Omel);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Omel";
        exchange.mic(ExchangeMic::Pave);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pave";
        exchange.mic(ExchangeMic::Xdpa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdpa";
        exchange.mic(ExchangeMic::Xnaf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnaf";
        exchange.mic(ExchangeMic::Xsrm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsrm";
        exchange.mic(ExchangeMic::Xcol);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcol";
        exchange.mic(ExchangeMic::Xkha);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkha";
        exchange.mic(ExchangeMic::Xswa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xswa";
        exchange.mic(ExchangeMic::Cryd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cryd";
        exchange.mic(ExchangeMic::Cryx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cryx";
        exchange.mic(ExchangeMic::Sebx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Sebx";
        exchange.mic(ExchangeMic::Ensx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ensx";
        exchange.mic(ExchangeMic::Xngm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xngm";
        exchange.mic(ExchangeMic::Nmtf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nmtf";
        exchange.mic(ExchangeMic::Xndx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xndx";
        exchange.mic(ExchangeMic::Xnmr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnmr";
        exchange.mic(ExchangeMic::Xsat);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsat";
        exchange.mic(ExchangeMic::Xsto);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsto";
        exchange.mic(ExchangeMic::Csto);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Csto";
        exchange.mic(ExchangeMic::Dnse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dnse";
        exchange.mic(ExchangeMic::Dsto);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dsto";
        exchange.mic(ExchangeMic::Fnse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fnse";
        exchange.mic(ExchangeMic::Xopv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xopv";
        exchange.mic(ExchangeMic::Aixe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Aixe";
        exchange.mic(ExchangeMic::Dots);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dots";
        exchange.mic(ExchangeMic::Euch);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Euch";
        exchange.mic(ExchangeMic::Eurm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Eurm";
        exchange.mic(ExchangeMic::Eusc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Eusc";
        exchange.mic(ExchangeMic::Eusp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Eusp";
        exchange.mic(ExchangeMic::Stox);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Stox";
        exchange.mic(ExchangeMic::Xscu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xscu";
        exchange.mic(ExchangeMic::Xstv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xstv";
        exchange.mic(ExchangeMic::Xstx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xstx";
        exchange.mic(ExchangeMic::Ubsg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ubsg";
        exchange.mic(ExchangeMic::Ubsc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ubsc";
        exchange.mic(ExchangeMic::Ubsf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ubsf";
        exchange.mic(ExchangeMic::Xbrn);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbrn";
        exchange.mic(ExchangeMic::Xswx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xswx";
        exchange.mic(ExchangeMic::Xbtr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbtr";
        exchange.mic(ExchangeMic::Xicb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xicb";
        exchange.mic(ExchangeMic::Xqmh);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xqmh";
        exchange.mic(ExchangeMic::Xvtx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xvtx";
        exchange.mic(ExchangeMic::Zkbx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Zkbx";
        exchange.mic(ExchangeMic::Xdse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdse";
        exchange.mic(ExchangeMic::Roco);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Roco";
        exchange.mic(ExchangeMic::Xtaf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtaf";
        exchange.mic(ExchangeMic::Xtai);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtai";
        exchange.mic(ExchangeMic::Xdar);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdar";
        exchange.mic(ExchangeMic::Afet);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Afet";
        exchange.mic(ExchangeMic::Beex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Beex";
        exchange.mic(ExchangeMic::Tfex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tfex";
        exchange.mic(ExchangeMic::Xbkk);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbkk";
        exchange.mic(ExchangeMic::Xbkf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbkf";
        exchange.mic(ExchangeMic::Xmai);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmai";
        exchange.mic(ExchangeMic::Clmx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Clmx";
        exchange.mic(ExchangeMic::Hchc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hchc";
        exchange.mic(ExchangeMic::Ndex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ndex";
        exchange.mic(ExchangeMic::Ndxs);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ndxs";
        exchange.mic(ExchangeMic::Nlpx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nlpx";
        exchange.mic(ExchangeMic::Tomx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tomx";
        exchange.mic(ExchangeMic::Tomd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tomd";
        exchange.mic(ExchangeMic::Xems);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xems";
        exchange.mic(ExchangeMic::Xhft);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xhft";
        exchange.mic(ExchangeMic::Xtrn);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtrn";
        exchange.mic(ExchangeMic::Xtun);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtun";
        exchange.mic(ExchangeMic::Xist);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xist";
        exchange.mic(ExchangeMic::Xdsm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdsm";
        exchange.mic(ExchangeMic::Xeqy);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xeqy";
        exchange.mic(ExchangeMic::Xfno);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xfno";
        exchange.mic(ExchangeMic::Xpms);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpms";
        exchange.mic(ExchangeMic::Ultx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ultx";
        exchange.mic(ExchangeMic::Xuga);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xuga";
        exchange.mic(ExchangeMic::Eese);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Eese";
        exchange.mic(ExchangeMic::Pfts);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pfts";
        exchange.mic(ExchangeMic::Pftq);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pftq";
        exchange.mic(ExchangeMic::Sepe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Sepe";
        exchange.mic(ExchangeMic::Ukex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ukex";
        exchange.mic(ExchangeMic::Xdfb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdfb";
        exchange.mic(ExchangeMic::Xkhr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkhr";
        exchange.mic(ExchangeMic::Xkie);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkie";
        exchange.mic(ExchangeMic::Xkis);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkis";
        exchange.mic(ExchangeMic::Xode);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xode";
        exchange.mic(ExchangeMic::Xpri);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpri";
        exchange.mic(ExchangeMic::Xuax);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xuax";
        exchange.mic(ExchangeMic::Xukr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xukr";
        exchange.mic(ExchangeMic::Dgcx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dgcx";
        exchange.mic(ExchangeMic::Difx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Difx";
        exchange.mic(ExchangeMic::Dumx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dumx";
        exchange.mic(ExchangeMic::Xads);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xads";
        exchange.mic(ExchangeMic::Xdfm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xdfm";
        exchange.mic(ExchangeMic::Aqxe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Aqxe";
        exchange.mic(ExchangeMic::Balt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Balt";
        exchange.mic(ExchangeMic::Bltx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bltx";
        exchange.mic(ExchangeMic::Bcxe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bcxe";
        exchange.mic(ExchangeMic::Batd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Batd";
        exchange.mic(ExchangeMic::Bate);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bate";
        exchange.mic(ExchangeMic::Batf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Batf";
        exchange.mic(ExchangeMic::Batp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Batp";
        exchange.mic(ExchangeMic::Botc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Botc";
        exchange.mic(ExchangeMic::Chid);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Chid";
        exchange.mic(ExchangeMic::Chio);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Chio";
        exchange.mic(ExchangeMic::Chix);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Chix";
        exchange.mic(ExchangeMic::Bgci);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bgci";
        exchange.mic(ExchangeMic::Bgcb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bgcb";
        exchange.mic(ExchangeMic::Blox);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Blox";
        exchange.mic(ExchangeMic::Bmtf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bmtf";
        exchange.mic(ExchangeMic::Boat);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Boat";
        exchange.mic(ExchangeMic::Bosc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bosc";
        exchange.mic(ExchangeMic::Brnx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Brnx";
        exchange.mic(ExchangeMic::Caze);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Caze";
        exchange.mic(ExchangeMic::Cco2);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cco2";
        exchange.mic(ExchangeMic::Cgme);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cgme";
        exchange.mic(ExchangeMic::Chev);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Chev";
        exchange.mic(ExchangeMic::Blnk);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Blnk";
        exchange.mic(ExchangeMic::Cmee);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cmee";
        exchange.mic(ExchangeMic::Cmec);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cmec";
        exchange.mic(ExchangeMic::Cmed);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cmed";
        exchange.mic(ExchangeMic::Cmmt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cmmt";
        exchange.mic(ExchangeMic::Cseu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cseu";
        exchange.mic(ExchangeMic::Cscf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cscf";
        exchange.mic(ExchangeMic::Dbix);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dbix";
        exchange.mic(ExchangeMic::Dbcr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dbcr";
        exchange.mic(ExchangeMic::Dbcx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dbcx";
        exchange.mic(ExchangeMic::Dbdc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dbdc";
        exchange.mic(ExchangeMic::Dbmo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dbmo";
        exchange.mic(ExchangeMic::Dbse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dbse";
        exchange.mic(ExchangeMic::Encl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Encl";
        exchange.mic(ExchangeMic::Eqld);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Eqld";
        exchange.mic(ExchangeMic::Exeu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Exeu";
        exchange.mic(ExchangeMic::Exbo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Exbo";
        exchange.mic(ExchangeMic::Excp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Excp";
        exchange.mic(ExchangeMic::Exmp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Exmp";
        exchange.mic(ExchangeMic::Exor);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Exor";
        exchange.mic(ExchangeMic::Exsi);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Exsi";
        exchange.mic(ExchangeMic::Exvp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Exvp";
        exchange.mic(ExchangeMic::Fair);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fair";
        exchange.mic(ExchangeMic::Gemx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gemx";
        exchange.mic(ExchangeMic::Gfic);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gfic";
        exchange.mic(ExchangeMic::Gfif);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gfif";
        exchange.mic(ExchangeMic::Gfin);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gfin";
        exchange.mic(ExchangeMic::Gfir);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gfir";
        exchange.mic(ExchangeMic::Gmeg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gmeg";
        exchange.mic(ExchangeMic::Xgcx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xgcx";
        exchange.mic(ExchangeMic::Xgdx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xgdx";
        exchange.mic(ExchangeMic::Xgsx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xgsx";
        exchange.mic(ExchangeMic::Xldx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xldx";
        exchange.mic(ExchangeMic::Grif);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Grif";
        exchange.mic(ExchangeMic::Grse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Grse";
        exchange.mic(ExchangeMic::Hsxe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hsxe";
        exchange.mic(ExchangeMic::Ibal);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ibal";
        exchange.mic(ExchangeMic::Icap);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Icap";
        exchange.mic(ExchangeMic::Btee);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Btee";
        exchange.mic(ExchangeMic::Ebsx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ebsx";
        exchange.mic(ExchangeMic::Icah);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Icah";
        exchange.mic(ExchangeMic::Icen);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Icen";
        exchange.mic(ExchangeMic::Icse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Icse";
        exchange.mic(ExchangeMic::Ictq);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ictq";
        exchange.mic(ExchangeMic::Isdx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Isdx";
        exchange.mic(ExchangeMic::Wclk);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Wclk";
        exchange.mic(ExchangeMic::Ifeu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ifeu";
        exchange.mic(ExchangeMic::Cxrt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cxrt";
        exchange.mic(ExchangeMic::Ifen);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ifen";
        exchange.mic(ExchangeMic::Ifll);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ifll";
        exchange.mic(ExchangeMic::Iflo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Iflo";
        exchange.mic(ExchangeMic::Iflx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Iflx";
        exchange.mic(ExchangeMic::Ifut);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ifut";
        exchange.mic(ExchangeMic::Iswa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Iswa";
        exchange.mic(ExchangeMic::Kleu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Kleu";
        exchange.mic(ExchangeMic::Liqu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Liqu";
        exchange.mic(ExchangeMic::Liqf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Liqf";
        exchange.mic(ExchangeMic::Liqh);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Liqh";
        exchange.mic(ExchangeMic::Lmax);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lmax";
        exchange.mic(ExchangeMic::Lmad);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lmad";
        exchange.mic(ExchangeMic::Lmae);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lmae";
        exchange.mic(ExchangeMic::Lmaf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lmaf";
        exchange.mic(ExchangeMic::Lmao);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lmao";
        exchange.mic(ExchangeMic::Lmec);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lmec";
        exchange.mic(ExchangeMic::Lotc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lotc";
        exchange.mic(ExchangeMic::Pldx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pldx";
        exchange.mic(ExchangeMic::Lppm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lppm";
        exchange.mic(ExchangeMic::Mael);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mael";
        exchange.mic(ExchangeMic::Mfgl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mfgl";
        exchange.mic(ExchangeMic::Mlxn);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mlxn";
        exchange.mic(ExchangeMic::Mlax);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mlax";
        exchange.mic(ExchangeMic::Mleu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mleu";
        exchange.mic(ExchangeMic::Mlve);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mlve";
        exchange.mic(ExchangeMic::Msip);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Msip";
        exchange.mic(ExchangeMic::Mytr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mytr";
        exchange.mic(ExchangeMic::N2Ex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "N2Ex";
        exchange.mic(ExchangeMic::Ndcm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ndcm";
        exchange.mic(ExchangeMic::Noff);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Noff";
        exchange.mic(ExchangeMic::Nuro);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nuro";
        exchange.mic(ExchangeMic::Nurd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nurd";
        exchange.mic(ExchangeMic::Xnlx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnlx";
        exchange.mic(ExchangeMic::Nxeu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nxeu";
        exchange.mic(ExchangeMic::Peel);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Peel";
        exchange.mic(ExchangeMic::Xphx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xphx";
        exchange.mic(ExchangeMic::Xrsp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xrsp";
        exchange.mic(ExchangeMic::Pieu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pieu";
        exchange.mic(ExchangeMic::Pirm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pirm";
        exchange.mic(ExchangeMic::Qwix);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Qwix";
        exchange.mic(ExchangeMic::Rbce);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Rbce";
        exchange.mic(ExchangeMic::Rbsx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Rbsx";
        exchange.mic(ExchangeMic::Rtsl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Rtsl";
        exchange.mic(ExchangeMic::Secf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Secf";
        exchange.mic(ExchangeMic::Sgmx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Sgmx";
        exchange.mic(ExchangeMic::Shar);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Shar";
        exchange.mic(ExchangeMic::Spec);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Spec";
        exchange.mic(ExchangeMic::Sprz);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Sprz";
        exchange.mic(ExchangeMic::Ssex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ssex";
        exchange.mic(ExchangeMic::Swap);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Swap";
        exchange.mic(ExchangeMic::Tfsv);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tfsv";
        exchange.mic(ExchangeMic::Tpie);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tpie";
        exchange.mic(ExchangeMic::Trde);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Trde";
        exchange.mic(ExchangeMic::Dbvx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dbvx";
        exchange.mic(ExchangeMic::Parx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Parx";
        exchange.mic(ExchangeMic::Tcds);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tcds";
        exchange.mic(ExchangeMic::Tfsg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tfsg";
        exchange.mic(ExchangeMic::Trdx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Trdx";
        exchange.mic(ExchangeMic::Vola);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Vola";
        exchange.mic(ExchangeMic::Treu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Treu";
        exchange.mic(ExchangeMic::Trqx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Trqx";
        exchange.mic(ExchangeMic::Trqm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Trqm";
        exchange.mic(ExchangeMic::Ubsl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ubsl";
        exchange.mic(ExchangeMic::Ubse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ubse";
        exchange.mic(ExchangeMic::Ukgd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ukgd";
        exchange.mic(ExchangeMic::Ukpx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ukpx";
        exchange.mic(ExchangeMic::Vega);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Vega";
        exchange.mic(ExchangeMic::Wins);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Wins";
        exchange.mic(ExchangeMic::Xalt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xalt";
        exchange.mic(ExchangeMic::Xcor);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcor";
        exchange.mic(ExchangeMic::Xgcl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xgcl";
        exchange.mic(ExchangeMic::Xlbm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlbm";
        exchange.mic(ExchangeMic::Xlch);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlch";
        exchange.mic(ExchangeMic::Xlme);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlme";
        exchange.mic(ExchangeMic::Xlon);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlon";
        exchange.mic(ExchangeMic::Xlod);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlod";
        exchange.mic(ExchangeMic::Xmts);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmts";
        exchange.mic(ExchangeMic::Amts);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Amts";
        exchange.mic(ExchangeMic::Bvuk);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bvuk";
        exchange.mic(ExchangeMic::Eacm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Eacm";
        exchange.mic(ExchangeMic::Emts);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Emts";
        exchange.mic(ExchangeMic::Gmts);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gmts";
        exchange.mic(ExchangeMic::Hung);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hung";
        exchange.mic(ExchangeMic::Imts);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Imts";
        exchange.mic(ExchangeMic::Mczk);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mczk";
        exchange.mic(ExchangeMic::Mtsa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtsa";
        exchange.mic(ExchangeMic::Mtsg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtsg";
        exchange.mic(ExchangeMic::Mtss);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtss";
        exchange.mic(ExchangeMic::Mtsw);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtsw";
        exchange.mic(ExchangeMic::Port);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Port";
        exchange.mic(ExchangeMic::Prme);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Prme";
        exchange.mic(ExchangeMic::Rmts);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Rmts";
        exchange.mic(ExchangeMic::Smts);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Smts";
        exchange.mic(ExchangeMic::Vmts);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Vmts";
        exchange.mic(ExchangeMic::Xsga);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsga";
        exchange.mic(ExchangeMic::Xsmp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsmp";
        exchange.mic(ExchangeMic::Xswb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xswb";
        exchange.mic(ExchangeMic::Xtup);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtup";
        exchange.mic(ExchangeMic::Tben);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tben";
        exchange.mic(ExchangeMic::Tbla);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tbla";
        exchange.mic(ExchangeMic::Tpcd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tpcd";
        exchange.mic(ExchangeMic::Tpeq);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tpeq";
        exchange.mic(ExchangeMic::Tpfd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tpfd";
        exchange.mic(ExchangeMic::Tpre);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tpre";
        exchange.mic(ExchangeMic::Tpsd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tpsd";
        exchange.mic(ExchangeMic::Tpsp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tpsp";
        exchange.mic(ExchangeMic::Xtpe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xtpe";
        exchange.mic(ExchangeMic::Xubs);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xubs";
        exchange.mic(ExchangeMic::Aats);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Aats";
        exchange.mic(ExchangeMic::Aqua);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Aqua";
        exchange.mic(ExchangeMic::Atdf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Atdf";
        exchange.mic(ExchangeMic::Core);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Core";
        exchange.mic(ExchangeMic::Baml);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Baml";
        exchange.mic(ExchangeMic::Mlco);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mlco";
        exchange.mic(ExchangeMic::Mlvx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mlvx";
        exchange.mic(ExchangeMic::Barx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Barx";
        exchange.mic(ExchangeMic::Bard);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bard";
        exchange.mic(ExchangeMic::Barl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Barl";
        exchange.mic(ExchangeMic::Bcdx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bcdx";
        exchange.mic(ExchangeMic::Bats);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bats";
        exchange.mic(ExchangeMic::Bato);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bato";
        exchange.mic(ExchangeMic::Baty);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Baty";
        exchange.mic(ExchangeMic::Byxd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Byxd";
        exchange.mic(ExchangeMic::Bzxd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bzxd";
        exchange.mic(ExchangeMic::Bbsf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bbsf";
        exchange.mic(ExchangeMic::Bgcf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bgcf";
        exchange.mic(ExchangeMic::Bgcd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bgcd";
        exchange.mic(ExchangeMic::Bids);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bids";
        exchange.mic(ExchangeMic::Bltd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bltd";
        exchange.mic(ExchangeMic::Bpol);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bpol";
        exchange.mic(ExchangeMic::Bndd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bndd";
        exchange.mic(ExchangeMic::Bnyc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bnyc";
        exchange.mic(ExchangeMic::Nyfx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nyfx";
        exchange.mic(ExchangeMic::Vtex);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Vtex";
        exchange.mic(ExchangeMic::Btec);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Btec";
        exchange.mic(ExchangeMic::Icsu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Icsu";
        exchange.mic(ExchangeMic::Cded);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cded";
        exchange.mic(ExchangeMic::Cgmi);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cgmi";
        exchange.mic(ExchangeMic::Cblc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cblc";
        exchange.mic(ExchangeMic::Cgmu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cgmu";
        exchange.mic(ExchangeMic::Cicx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cicx";
        exchange.mic(ExchangeMic::Lqfi);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lqfi";
        exchange.mic(ExchangeMic::Cmsf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cmsf";
        exchange.mic(ExchangeMic::Cred);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cred";
        exchange.mic(ExchangeMic::Caes);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Caes";
        exchange.mic(ExchangeMic::Cslp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cslp";
        exchange.mic(ExchangeMic::Dbsx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dbsx";
        exchange.mic(ExchangeMic::Deal);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Deal";
        exchange.mic(ExchangeMic::Edge);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Edge";
        exchange.mic(ExchangeMic::Eddp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Eddp";
        exchange.mic(ExchangeMic::Edga);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Edga";
        exchange.mic(ExchangeMic::Edgd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Edgd";
        exchange.mic(ExchangeMic::Edgo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Edgo";
        exchange.mic(ExchangeMic::Edgx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Edgx";
        exchange.mic(ExchangeMic::Eris);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Eris";
        exchange.mic(ExchangeMic::Fast);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fast";
        exchange.mic(ExchangeMic::Finr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Finr";
        exchange.mic(ExchangeMic::Finn);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Finn";
        exchange.mic(ExchangeMic::Fino);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fino";
        exchange.mic(ExchangeMic::Finy);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Finy";
        exchange.mic(ExchangeMic::Ootc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ootc";
        exchange.mic(ExchangeMic::Xadf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xadf";
        exchange.mic(ExchangeMic::Fxal);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fxal";
        exchange.mic(ExchangeMic::Fxcm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fxcm";
        exchange.mic(ExchangeMic::G1xx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "G1xx";
        exchange.mic(ExchangeMic::Gllc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gllc";
        exchange.mic(ExchangeMic::Glps);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Glps";
        exchange.mic(ExchangeMic::Govx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Govx";
        exchange.mic(ExchangeMic::Gree);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gree";
        exchange.mic(ExchangeMic::Gsef);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gsef";
        exchange.mic(ExchangeMic::Gtco);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gtco";
        exchange.mic(ExchangeMic::Hegx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hegx";
        exchange.mic(ExchangeMic::Hppo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hppo";
        exchange.mic(ExchangeMic::Hsfx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hsfx";
        exchange.mic(ExchangeMic::Icel);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Icel";
        exchange.mic(ExchangeMic::Iexg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Iexg";
        exchange.mic(ExchangeMic::Ifus);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ifus";
        exchange.mic(ExchangeMic::Ices);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ices";
        exchange.mic(ExchangeMic::Iepa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Iepa";
        exchange.mic(ExchangeMic::Ifed);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ifed";
        exchange.mic(ExchangeMic::Imag);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Imag";
        exchange.mic(ExchangeMic::Imbd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Imbd";
        exchange.mic(ExchangeMic::Imcc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Imcc";
        exchange.mic(ExchangeMic::Imcg);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Imcg";
        exchange.mic(ExchangeMic::Imco);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Imco";
        exchange.mic(ExchangeMic::Imcr);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Imcr";
        exchange.mic(ExchangeMic::Imen);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Imen";
        exchange.mic(ExchangeMic::Imeq);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Imeq";
        exchange.mic(ExchangeMic::Imfx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Imfx";
        exchange.mic(ExchangeMic::Imir);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Imir";
        exchange.mic(ExchangeMic::Isda);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Isda";
        exchange.mic(ExchangeMic::Itgi);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Itgi";
        exchange.mic(ExchangeMic::Jefx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Jefx";
        exchange.mic(ExchangeMic::Jpmx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Jpmx";
        exchange.mic(ExchangeMic::Jsef);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Jsef";
        exchange.mic(ExchangeMic::Jses);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Jses";
        exchange.mic(ExchangeMic::Jsjx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Jsjx";
        exchange.mic(ExchangeMic::Knig);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Knig";
        exchange.mic(ExchangeMic::Kncm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Kncm";
        exchange.mic(ExchangeMic::Knem);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Knem";
        exchange.mic(ExchangeMic::Knli);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Knli";
        exchange.mic(ExchangeMic::Knmx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Knmx";
        exchange.mic(ExchangeMic::Lasf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lasf";
        exchange.mic(ExchangeMic::Levl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Levl";
        exchange.mic(ExchangeMic::Lius);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lius";
        exchange.mic(ExchangeMic::Lifi);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lifi";
        exchange.mic(ExchangeMic::Liuh);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Liuh";
        exchange.mic(ExchangeMic::Lqed);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lqed";
        exchange.mic(ExchangeMic::Ltaa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ltaa";
        exchange.mic(ExchangeMic::Lmnx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Lmnx";
        exchange.mic(ExchangeMic::Mihi);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mihi";
        exchange.mic(ExchangeMic::Mprl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mprl";
        exchange.mic(ExchangeMic::Xmio);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmio";
        exchange.mic(ExchangeMic::Msco);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Msco";
        exchange.mic(ExchangeMic::Mslp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mslp";
        exchange.mic(ExchangeMic::Mspl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mspl";
        exchange.mic(ExchangeMic::Msrp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Msrp";
        exchange.mic(ExchangeMic::Mstx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mstx";
        exchange.mic(ExchangeMic::Mtus);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtus";
        exchange.mic(ExchangeMic::Bvus);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bvus";
        exchange.mic(ExchangeMic::Mtsb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtsb";
        exchange.mic(ExchangeMic::Mtxx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtxx";
        exchange.mic(ExchangeMic::Mtxa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtxa";
        exchange.mic(ExchangeMic::Mtxc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtxc";
        exchange.mic(ExchangeMic::Mtxm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtxm";
        exchange.mic(ExchangeMic::Mtxs);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mtxs";
        exchange.mic(ExchangeMic::Nblx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nblx";
        exchange.mic(ExchangeMic::Nfsc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nfsc";
        exchange.mic(ExchangeMic::Nfsa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nfsa";
        exchange.mic(ExchangeMic::Nfsd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nfsd";
        exchange.mic(ExchangeMic::Xstm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xstm";
        exchange.mic(ExchangeMic::Nmra);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nmra";
        exchange.mic(ExchangeMic::Nodx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nodx";
        exchange.mic(ExchangeMic::Nxus);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nxus";
        exchange.mic(ExchangeMic::Nypc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nypc";
        exchange.mic(ExchangeMic::Ollc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ollc";
        exchange.mic(ExchangeMic::Opra);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Opra";
        exchange.mic(ExchangeMic::Otcm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Otcm";
        exchange.mic(ExchangeMic::Cave);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cave";
        exchange.mic(ExchangeMic::Otcb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Otcb";
        exchange.mic(ExchangeMic::Otcq);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Otcq";
        exchange.mic(ExchangeMic::Pinc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pinc";
        exchange.mic(ExchangeMic::Pini);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pini";
        exchange.mic(ExchangeMic::Pinl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pinl";
        exchange.mic(ExchangeMic::Pinx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pinx";
        exchange.mic(ExchangeMic::Psgm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Psgm";
        exchange.mic(ExchangeMic::Pdqx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pdqx";
        exchange.mic(ExchangeMic::Pdqd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pdqd";
        exchange.mic(ExchangeMic::Pipe);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pipe";
        exchange.mic(ExchangeMic::Prse);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Prse";
        exchange.mic(ExchangeMic::Pulx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Pulx";
        exchange.mic(ExchangeMic::Ricx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ricx";
        exchange.mic(ExchangeMic::Ricd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ricd";
        exchange.mic(ExchangeMic::Sgma);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Sgma";
        exchange.mic(ExchangeMic::Shaw);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Shaw";
        exchange.mic(ExchangeMic::Shad);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Shad";
        exchange.mic(ExchangeMic::Soho);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Soho";
        exchange.mic(ExchangeMic::Sstx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Sstx";
        exchange.mic(ExchangeMic::Tera);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tera";
        exchange.mic(ExchangeMic::Tfsu);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tfsu";
        exchange.mic(ExchangeMic::Trck);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Trck";
        exchange.mic(ExchangeMic::Trux);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Trux";
        exchange.mic(ExchangeMic::Tru1);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tru1";
        exchange.mic(ExchangeMic::Tru2);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tru2";
        exchange.mic(ExchangeMic::Trwb);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Trwb";
        exchange.mic(ExchangeMic::Dwsf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Dwsf";
        exchange.mic(ExchangeMic::Twsf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Twsf";
        exchange.mic(ExchangeMic::Tsbx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tsbx";
        exchange.mic(ExchangeMic::Tsef);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Tsef";
        exchange.mic(ExchangeMic::Ubsa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ubsa";
        exchange.mic(ExchangeMic::Ubsp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ubsp";
        exchange.mic(ExchangeMic::Welx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Welx";
        exchange.mic(ExchangeMic::Wsag);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Wsag";
        exchange.mic(ExchangeMic::Xaqs);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xaqs";
        exchange.mic(ExchangeMic::Xbox);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbox";
        exchange.mic(ExchangeMic::Xcbo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcbo";
        exchange.mic(ExchangeMic::C2Ox);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "C2Ox";
        exchange.mic(ExchangeMic::Cbsx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cbsx";
        exchange.mic(ExchangeMic::Xcbf);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcbf";
        exchange.mic(ExchangeMic::Xcbt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcbt";
        exchange.mic(ExchangeMic::Fcbt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fcbt";
        exchange.mic(ExchangeMic::Xkbt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkbt";
        exchange.mic(ExchangeMic::Xcff);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcff";
        exchange.mic(ExchangeMic::Xchi);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xchi";
        exchange.mic(ExchangeMic::Xcis);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcis";
        exchange.mic(ExchangeMic::Xcme);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcme";
        exchange.mic(ExchangeMic::Cbts);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cbts";
        exchange.mic(ExchangeMic::Cecs);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cecs";
        exchange.mic(ExchangeMic::Cmes);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Cmes";
        exchange.mic(ExchangeMic::Fcme);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Fcme";
        exchange.mic(ExchangeMic::Glbx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Glbx";
        exchange.mic(ExchangeMic::Nyms);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nyms";
        exchange.mic(ExchangeMic::Ximm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Ximm";
        exchange.mic(ExchangeMic::Xiom);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xiom";
        exchange.mic(ExchangeMic::Xcur);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcur";
        exchange.mic(ExchangeMic::Xelx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xelx";
        exchange.mic(ExchangeMic::Xfci);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xfci";
        exchange.mic(ExchangeMic::Xgmx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xgmx";
        exchange.mic(ExchangeMic::Xins);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xins";
        exchange.mic(ExchangeMic::Iblx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Iblx";
        exchange.mic(ExchangeMic::Icbx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Icbx";
        exchange.mic(ExchangeMic::Icro);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Icro";
        exchange.mic(ExchangeMic::Iidx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Iidx";
        exchange.mic(ExchangeMic::Mocx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mocx";
        exchange.mic(ExchangeMic::Rcbx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Rcbx";
        exchange.mic(ExchangeMic::Xisx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xisx";
        exchange.mic(ExchangeMic::Gmni);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gmni";
        exchange.mic(ExchangeMic::Mcry);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Mcry";
        exchange.mic(ExchangeMic::Xisa);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xisa";
        exchange.mic(ExchangeMic::Xise);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xise";
        exchange.mic(ExchangeMic::Xmer);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmer";
        exchange.mic(ExchangeMic::Xmge);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmge";
        exchange.mic(ExchangeMic::Xnas);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnas";
        exchange.mic(ExchangeMic::Bosd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bosd";
        exchange.mic(ExchangeMic::Espd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Espd";
        exchange.mic(ExchangeMic::Nasd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nasd";
        exchange.mic(ExchangeMic::Xbos);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbos";
        exchange.mic(ExchangeMic::Xbrt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbrt";
        exchange.mic(ExchangeMic::Xbxo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xbxo";
        exchange.mic(ExchangeMic::Xncm);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xncm";
        exchange.mic(ExchangeMic::Xndq);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xndq";
        exchange.mic(ExchangeMic::Xngs);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xngs";
        exchange.mic(ExchangeMic::Xnim);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnim";
        exchange.mic(ExchangeMic::Xnms);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnms";
        exchange.mic(ExchangeMic::Xpbt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpbt";
        exchange.mic(ExchangeMic::Xphl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xphl";
        exchange.mic(ExchangeMic::Xpho);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpho";
        exchange.mic(ExchangeMic::Xpor);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpor";
        exchange.mic(ExchangeMic::Xpsx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xpsx";
        exchange.mic(ExchangeMic::Xnym);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnym";
        exchange.mic(ExchangeMic::Xcec);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcec";
        exchange.mic(ExchangeMic::Xnye);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnye";
        exchange.mic(ExchangeMic::Xnyl);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnyl";
        exchange.mic(ExchangeMic::Xnys);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnys";
        exchange.mic(ExchangeMic::Aldp);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Aldp";
        exchange.mic(ExchangeMic::Amxo);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Amxo";
        exchange.mic(ExchangeMic::Arcd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Arcd";
        exchange.mic(ExchangeMic::Arco);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Arco";
        exchange.mic(ExchangeMic::Arcx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Arcx";
        exchange.mic(ExchangeMic::Nysd);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Nysd";
        exchange.mic(ExchangeMic::Xase);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xase";
        exchange.mic(ExchangeMic::Xnli);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xnli";
        exchange.mic(ExchangeMic::Xoch);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xoch";
        exchange.mic(ExchangeMic::Xotc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xotc";
        exchange.mic(ExchangeMic::Xsef);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xsef";
        exchange.mic(ExchangeMic::Xwee);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xwee";
        exchange.mic(ExchangeMic::Bvur);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bvur";
        exchange.mic(ExchangeMic::Xmnt);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xmnt";
        exchange.mic(ExchangeMic::Xcet);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcet";
        exchange.mic(ExchangeMic::Xcue);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xcue";
        exchange.mic(ExchangeMic::Xkce);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xkce";
        exchange.mic(ExchangeMic::Xste);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xste";
        exchange.mic(ExchangeMic::Xuni);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xuni";
        exchange.mic(ExchangeMic::Gxma);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Gxma";
        exchange.mic(ExchangeMic::Bvca);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Bvca";
        exchange.mic(ExchangeMic::Hstc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Hstc";
        exchange.mic(ExchangeMic::Xhnx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xhnx";
        exchange.mic(ExchangeMic::Xstc);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xstc";
        exchange.mic(ExchangeMic::Xlus);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xlus";
        exchange.mic(ExchangeMic::Xzim);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xzim";
        exchange.mic(ExchangeMic::Xoff);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xoff";
        exchange.mic(ExchangeMic::Xxxx);
        ASSERT_IS_FALSE(exchange.isEuronext()) << "Xxxx";
    }

    TESTCASE("euronextMep() returns correct value")
    {
        const char* ams{"AMS"};
        const char* bru{"BRU"};
        const char* par{"PAR"};
        const char* lis{"LIS"};
        const char* oth{"OTHER"};
        Exchange exchange;

        exchange.mic(ExchangeMic::Xbru);
        ASSERT_EQUAL(bru, exchange.euronextMep()) << "Xbru";
        exchange.mic(ExchangeMic::Alxb);
        ASSERT_EQUAL(bru, exchange.euronextMep()) << "Alxb";
        exchange.mic(ExchangeMic::Enxb);
        ASSERT_EQUAL(bru, exchange.euronextMep()) << "Enxb";
        exchange.mic(ExchangeMic::Mlxb);
        ASSERT_EQUAL(bru, exchange.euronextMep()) << "Mlxb";
        exchange.mic(ExchangeMic::Tnlb);
        ASSERT_EQUAL(bru, exchange.euronextMep()) << "Tnlb";
        exchange.mic(ExchangeMic::Vpxb);
        ASSERT_EQUAL(bru, exchange.euronextMep()) << "Vpxb";
        exchange.mic(ExchangeMic::Xbrd);
        ASSERT_EQUAL(bru, exchange.euronextMep()) << "Xbrd";
        exchange.mic(ExchangeMic::Xpar);
        ASSERT_EQUAL(par, exchange.euronextMep()) << "Xpar";
        exchange.mic(ExchangeMic::Alxp);
        ASSERT_EQUAL(par, exchange.euronextMep()) << "Alxp";
        exchange.mic(ExchangeMic::Xmat);
        ASSERT_EQUAL(par, exchange.euronextMep()) << "Xmat";
        exchange.mic(ExchangeMic::Xmli);
        ASSERT_EQUAL(par, exchange.euronextMep()) << "Xmli";
        exchange.mic(ExchangeMic::Xmon);
        ASSERT_EQUAL(par, exchange.euronextMep()) << "Xmon";
        exchange.mic(ExchangeMic::Xlis);
        ASSERT_EQUAL(lis, exchange.euronextMep()) << "Xlis";
        exchange.mic(ExchangeMic::Alxl);
        ASSERT_EQUAL(lis, exchange.euronextMep()) << "Alxl";
        exchange.mic(ExchangeMic::Enxl);
        ASSERT_EQUAL(lis, exchange.euronextMep()) << "Enxl";
        exchange.mic(ExchangeMic::Mfox);
        ASSERT_EQUAL(lis, exchange.euronextMep()) << "Mfox";
        exchange.mic(ExchangeMic::Wqxl);
        ASSERT_EQUAL(lis, exchange.euronextMep()) << "Wqxl";
        exchange.mic(ExchangeMic::Xams);
        ASSERT_EQUAL(ams, exchange.euronextMep()) << "Xams";
        exchange.mic(ExchangeMic::Alxa);
        ASSERT_EQUAL(ams, exchange.euronextMep()) << "Alxa";
        exchange.mic(ExchangeMic::Tnla);
        ASSERT_EQUAL(ams, exchange.euronextMep()) << "Tnla";
        exchange.mic(ExchangeMic::Xeuc);
        ASSERT_EQUAL(ams, exchange.euronextMep()) << "Xeuc";
        exchange.mic(ExchangeMic::Xeue);
        ASSERT_EQUAL(ams, exchange.euronextMep()) << "Xeue";
        exchange.mic(ExchangeMic::Xeui);
        ASSERT_EQUAL(ams, exchange.euronextMep()) << "Xeui";
        exchange.mic(ExchangeMic::Xldn);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xldn";
        exchange.mic(ExchangeMic::Xtir);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtir";
        exchange.mic(ExchangeMic::Xalg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xalg";
        exchange.mic(ExchangeMic::Bace);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bace";
        exchange.mic(ExchangeMic::Bcfs);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bcfs";
        exchange.mic(ExchangeMic::Xmvl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmvl";
        exchange.mic(ExchangeMic::Rofx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Rofx";
        exchange.mic(ExchangeMic::Xbcc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbcc";
        exchange.mic(ExchangeMic::Mvcx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mvcx";
        exchange.mic(ExchangeMic::Xbcm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbcm";
        exchange.mic(ExchangeMic::Xbcx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbcx";
        exchange.mic(ExchangeMic::Xbue);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbue";
        exchange.mic(ExchangeMic::Xmev);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmev";
        exchange.mic(ExchangeMic::Xcnf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcnf";
        exchange.mic(ExchangeMic::Xmab);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmab";
        exchange.mic(ExchangeMic::Xmtb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmtb";
        exchange.mic(ExchangeMic::Xros);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xros";
        exchange.mic(ExchangeMic::Xrox);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xrox";
        exchange.mic(ExchangeMic::Xtuc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtuc";
        exchange.mic(ExchangeMic::Xarm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xarm";
        exchange.mic(ExchangeMic::Apxl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Apxl";
        exchange.mic(ExchangeMic::Awbx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Awbx";
        exchange.mic(ExchangeMic::Awex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Awex";
        exchange.mic(ExchangeMic::Blev);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Blev";
        exchange.mic(ExchangeMic::Cgma);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cgma";
        exchange.mic(ExchangeMic::Chia);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Chia";
        exchange.mic(ExchangeMic::Cxac);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cxac";
        exchange.mic(ExchangeMic::Cxaf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cxaf";
        exchange.mic(ExchangeMic::Cxam);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cxam";
        exchange.mic(ExchangeMic::Cxan);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cxan";
        exchange.mic(ExchangeMic::Cxap);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cxap";
        exchange.mic(ExchangeMic::Cxav);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cxav";
        exchange.mic(ExchangeMic::Cxaw);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cxaw";
        exchange.mic(ExchangeMic::Clau);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Clau";
        exchange.mic(ExchangeMic::Csau);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Csau";
        exchange.mic(ExchangeMic::Cfau);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cfau";
        exchange.mic(ExchangeMic::Maqx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Maqx";
        exchange.mic(ExchangeMic::Msal);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Msal";
        exchange.mic(ExchangeMic::Nsxb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nsxb";
        exchange.mic(ExchangeMic::Siga);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Siga";
        exchange.mic(ExchangeMic::Simv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Simv";
        exchange.mic(ExchangeMic::Xasx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xasx";
        exchange.mic(ExchangeMic::Asxb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Asxb";
        exchange.mic(ExchangeMic::Asxc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Asxc";
        exchange.mic(ExchangeMic::Asxp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Asxp";
        exchange.mic(ExchangeMic::Asxt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Asxt";
        exchange.mic(ExchangeMic::Asxv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Asxv";
        exchange.mic(ExchangeMic::Xsfe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsfe";
        exchange.mic(ExchangeMic::Xfex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xfex";
        exchange.mic(ExchangeMic::Xnec);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnec";
        exchange.mic(ExchangeMic::Xyie);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xyie";
        exchange.mic(ExchangeMic::Exaa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Exaa";
        exchange.mic(ExchangeMic::Xwbo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xwbo";
        exchange.mic(ExchangeMic::Wbah);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Wbah";
        exchange.mic(ExchangeMic::Wbdm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Wbdm";
        exchange.mic(ExchangeMic::Wbgf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Wbgf";
        exchange.mic(ExchangeMic::Xceg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xceg";
        exchange.mic(ExchangeMic::Xvie);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xvie";
        exchange.mic(ExchangeMic::Bsex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bsex";
        exchange.mic(ExchangeMic::Xibe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xibe";
        exchange.mic(ExchangeMic::Xbaa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbaa";
        exchange.mic(ExchangeMic::Bfex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bfex";
        exchange.mic(ExchangeMic::Xbah);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbah";
        exchange.mic(ExchangeMic::Xchg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xchg";
        exchange.mic(ExchangeMic::Xdha);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdha";
        exchange.mic(ExchangeMic::Xbab);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbab";
        exchange.mic(ExchangeMic::Bajm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bajm";
        exchange.mic(ExchangeMic::Bcse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bcse";
        exchange.mic(ExchangeMic::Blpx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Blpx";
        exchange.mic(ExchangeMic::Bmts);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bmts";
        exchange.mic(ExchangeMic::Mtsd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtsd";
        exchange.mic(ExchangeMic::Mtsf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtsf";
        exchange.mic(ExchangeMic::Xbda);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbda";
        exchange.mic(ExchangeMic::Xbol);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbol";
        exchange.mic(ExchangeMic::Xblb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xblb";
        exchange.mic(ExchangeMic::Blbf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Blbf";
        exchange.mic(ExchangeMic::Xsse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsse";
        exchange.mic(ExchangeMic::Xbot);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbot";
        exchange.mic(ExchangeMic::Bote);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bote";
        exchange.mic(ExchangeMic::Botv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Botv";
        exchange.mic(ExchangeMic::Bcmm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bcmm";
        exchange.mic(ExchangeMic::Bovm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bovm";
        exchange.mic(ExchangeMic::Brix);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Brix";
        exchange.mic(ExchangeMic::Bvmf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bvmf";
        exchange.mic(ExchangeMic::Ceti);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ceti";
        exchange.mic(ExchangeMic::Selc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Selc";
        exchange.mic(ExchangeMic::Ibex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ibex";
        exchange.mic(ExchangeMic::Xbul);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbul";
        exchange.mic(ExchangeMic::Xcsx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcsx";
        exchange.mic(ExchangeMic::Xdsx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdsx";
        exchange.mic(ExchangeMic::Canx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Canx";
        exchange.mic(ExchangeMic::Chic);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Chic";
        exchange.mic(ExchangeMic::Xcx2);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcx2";
        exchange.mic(ExchangeMic::Cotc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cotc";
        exchange.mic(ExchangeMic::Ifca);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ifca";
        exchange.mic(ExchangeMic::Ivzx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ivzx";
        exchange.mic(ExchangeMic::Lica);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lica";
        exchange.mic(ExchangeMic::Matn);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Matn";
        exchange.mic(ExchangeMic::Neoe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Neoe";
        exchange.mic(ExchangeMic::Ngxc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ngxc";
        exchange.mic(ExchangeMic::Omga);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Omga";
        exchange.mic(ExchangeMic::Lynx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lynx";
        exchange.mic(ExchangeMic::Tmxs);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tmxs";
        exchange.mic(ExchangeMic::Xats);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xats";
        exchange.mic(ExchangeMic::Xbbk);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbbk";
        exchange.mic(ExchangeMic::Xcnq);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcnq";
        exchange.mic(ExchangeMic::Pure);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pure";
        exchange.mic(ExchangeMic::Xicx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xicx";
        exchange.mic(ExchangeMic::Xmoc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmoc";
        exchange.mic(ExchangeMic::Xmod);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmod";
        exchange.mic(ExchangeMic::Xtse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtse";
        exchange.mic(ExchangeMic::Xtsx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtsx";
        exchange.mic(ExchangeMic::Xtnx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtnx";
        exchange.mic(ExchangeMic::Xbvc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbvc";
        exchange.mic(ExchangeMic::Xcay);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcay";
        exchange.mic(ExchangeMic::Bova);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bova";
        exchange.mic(ExchangeMic::Xbcl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbcl";
        exchange.mic(ExchangeMic::Xsgo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsgo";
        exchange.mic(ExchangeMic::Ccfx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ccfx";
        exchange.mic(ExchangeMic::Cssx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cssx";
        exchange.mic(ExchangeMic::Sgex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Sgex";
        exchange.mic(ExchangeMic::Xcfe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcfe";
        exchange.mic(ExchangeMic::Xdce);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdce";
        exchange.mic(ExchangeMic::Xsge);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsge";
        exchange.mic(ExchangeMic::Xine);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xine";
        exchange.mic(ExchangeMic::Xshe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xshe";
        exchange.mic(ExchangeMic::Xsec);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsec";
        exchange.mic(ExchangeMic::Xshg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xshg";
        exchange.mic(ExchangeMic::Xssc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xssc";
        exchange.mic(ExchangeMic::Xzce);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xzce";
        exchange.mic(ExchangeMic::Xbog);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbog";
        exchange.mic(ExchangeMic::Xbnv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbnv";
        exchange.mic(ExchangeMic::Xcro);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcro";
        exchange.mic(ExchangeMic::Xtrz);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtrz";
        exchange.mic(ExchangeMic::Xzag);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xzag";
        exchange.mic(ExchangeMic::Xzam);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xzam";
        exchange.mic(ExchangeMic::Dcsx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dcsx";
        exchange.mic(ExchangeMic::Xcys);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcys";
        exchange.mic(ExchangeMic::Xcyo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcyo";
        exchange.mic(ExchangeMic::Xecm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xecm";
        exchange.mic(ExchangeMic::Xpra);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpra";
        exchange.mic(ExchangeMic::Xprm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xprm";
        exchange.mic(ExchangeMic::Xpxe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpxe";
        exchange.mic(ExchangeMic::Xrmz);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xrmz";
        exchange.mic(ExchangeMic::Xrmo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xrmo";
        exchange.mic(ExchangeMic::Dktc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dktc";
        exchange.mic(ExchangeMic::Gxgr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gxgr";
        exchange.mic(ExchangeMic::Gxgf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gxgf";
        exchange.mic(ExchangeMic::Gxgm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gxgm";
        exchange.mic(ExchangeMic::Npga);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Npga";
        exchange.mic(ExchangeMic::Xcse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcse";
        exchange.mic(ExchangeMic::Dcse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dcse";
        exchange.mic(ExchangeMic::Dndk);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dndk";
        exchange.mic(ExchangeMic::Fndk);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fndk";
        exchange.mic(ExchangeMic::Xbvr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbvr";
        exchange.mic(ExchangeMic::Xgua);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xgua";
        exchange.mic(ExchangeMic::Xqui);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xqui";
        exchange.mic(ExchangeMic::Nilx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nilx";
        exchange.mic(ExchangeMic::Xcai);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcai";
        exchange.mic(ExchangeMic::Xsva);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsva";
        exchange.mic(ExchangeMic::Xtal);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtal";
        exchange.mic(ExchangeMic::Fnee);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fnee";
        exchange.mic(ExchangeMic::Vmfx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Vmfx";
        exchange.mic(ExchangeMic::Xsps);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsps";
        exchange.mic(ExchangeMic::Fgex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fgex";
        exchange.mic(ExchangeMic::Xhel);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xhel";
        exchange.mic(ExchangeMic::Dhel);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dhel";
        exchange.mic(ExchangeMic::Dnfi);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dnfi";
        exchange.mic(ExchangeMic::Fnfi);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fnfi";
        exchange.mic(ExchangeMic::Coal);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Coal";
        exchange.mic(ExchangeMic::Epex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Epex";
        exchange.mic(ExchangeMic::Fmts);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fmts";
        exchange.mic(ExchangeMic::Gmtf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gmtf";
        exchange.mic(ExchangeMic::Lchc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lchc";
        exchange.mic(ExchangeMic::Xafr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xafr";
        exchange.mic(ExchangeMic::Xbln);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbln";
        exchange.mic(ExchangeMic::Mtch);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtch";
        exchange.mic(ExchangeMic::Xpow);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpow";
        exchange.mic(ExchangeMic::Xpsf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpsf";
        exchange.mic(ExchangeMic::Xgse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xgse";
        exchange.mic(ExchangeMic::X360T);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "X360T";
        exchange.mic(ExchangeMic::Cats);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cats";
        exchange.mic(ExchangeMic::Dbox);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dbox";
        exchange.mic(ExchangeMic::Auto);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Auto";
        exchange.mic(ExchangeMic::Tgat);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tgat";
        exchange.mic(ExchangeMic::Xgat);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xgat";
        exchange.mic(ExchangeMic::Xgrm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xgrm";
        exchange.mic(ExchangeMic::Xber);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xber";
        exchange.mic(ExchangeMic::Bera);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bera";
        exchange.mic(ExchangeMic::Berb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Berb";
        exchange.mic(ExchangeMic::Berc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Berc";
        exchange.mic(ExchangeMic::Eqta);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Eqta";
        exchange.mic(ExchangeMic::Eqtb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Eqtb";
        exchange.mic(ExchangeMic::Eqtc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Eqtc";
        exchange.mic(ExchangeMic::Eqtd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Eqtd";
        exchange.mic(ExchangeMic::Xeqt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xeqt";
        exchange.mic(ExchangeMic::Zobx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Zobx";
        exchange.mic(ExchangeMic::Xdus);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdus";
        exchange.mic(ExchangeMic::Dusa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dusa";
        exchange.mic(ExchangeMic::Dusb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dusb";
        exchange.mic(ExchangeMic::Dusc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dusc";
        exchange.mic(ExchangeMic::Dusd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dusd";
        exchange.mic(ExchangeMic::Xqtx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xqtx";
        exchange.mic(ExchangeMic::Xecb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xecb";
        exchange.mic(ExchangeMic::Xecc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xecc";
        exchange.mic(ExchangeMic::Xeee);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xeee";
        exchange.mic(ExchangeMic::Xeeo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xeeo";
        exchange.mic(ExchangeMic::Xeer);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xeer";
        exchange.mic(ExchangeMic::Xeum);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xeum";
        exchange.mic(ExchangeMic::Xeur);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xeur";
        exchange.mic(ExchangeMic::Ecag);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ecag";
        exchange.mic(ExchangeMic::Xere);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xere";
        exchange.mic(ExchangeMic::Xert);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xert";
        exchange.mic(ExchangeMic::Xeub);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xeub";
        exchange.mic(ExchangeMic::Xeup);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xeup";
        exchange.mic(ExchangeMic::Xfra);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xfra";
        exchange.mic(ExchangeMic::Fraa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fraa";
        exchange.mic(ExchangeMic::Frab);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Frab";
        exchange.mic(ExchangeMic::Frad);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Frad";
        exchange.mic(ExchangeMic::Xdbc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdbc";
        exchange.mic(ExchangeMic::Xdbv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdbv";
        exchange.mic(ExchangeMic::Xdbx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdbx";
        exchange.mic(ExchangeMic::Xeta);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xeta";
        exchange.mic(ExchangeMic::Xetb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xetb";
        exchange.mic(ExchangeMic::Xetr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xetr";
        exchange.mic(ExchangeMic::Xnew);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnew";
        exchange.mic(ExchangeMic::Xham);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xham";
        exchange.mic(ExchangeMic::Hama);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hama";
        exchange.mic(ExchangeMic::Hamb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hamb";
        exchange.mic(ExchangeMic::Xhan);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xhan";
        exchange.mic(ExchangeMic::Hana);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hana";
        exchange.mic(ExchangeMic::Hanb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hanb";
        exchange.mic(ExchangeMic::Xinv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xinv";
        exchange.mic(ExchangeMic::Xmun);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmun";
        exchange.mic(ExchangeMic::Muna);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Muna";
        exchange.mic(ExchangeMic::Munb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Munb";
        exchange.mic(ExchangeMic::Munc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Munc";
        exchange.mic(ExchangeMic::Mund);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mund";
        exchange.mic(ExchangeMic::Xsco);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsco";
        exchange.mic(ExchangeMic::Xsc1);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsc1";
        exchange.mic(ExchangeMic::Xsc2);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsc2";
        exchange.mic(ExchangeMic::Xsc3);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsc3";
        exchange.mic(ExchangeMic::Xstu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xstu";
        exchange.mic(ExchangeMic::Euwx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Euwx";
        exchange.mic(ExchangeMic::Stua);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Stua";
        exchange.mic(ExchangeMic::Stub);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Stub";
        exchange.mic(ExchangeMic::Xxsc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xxsc";
        exchange.mic(ExchangeMic::Xgha);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xgha";
        exchange.mic(ExchangeMic::Gsxl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gsxl";
        exchange.mic(ExchangeMic::Asex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Asex";
        exchange.mic(ExchangeMic::Enax);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Enax";
        exchange.mic(ExchangeMic::Euax);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Euax";
        exchange.mic(ExchangeMic::Hotc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hotc";
        exchange.mic(ExchangeMic::Xade);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xade";
        exchange.mic(ExchangeMic::Xath);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xath";
        exchange.mic(ExchangeMic::Xipo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xipo";
        exchange.mic(ExchangeMic::Hdat);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hdat";
        exchange.mic(ExchangeMic::Hemo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hemo";
        exchange.mic(ExchangeMic::Xgtg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xgtg";
        exchange.mic(ExchangeMic::Xcie);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcie";
        exchange.mic(ExchangeMic::Gsci);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gsci";
        exchange.mic(ExchangeMic::Xbcv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbcv";
        exchange.mic(ExchangeMic::Cgmh);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cgmh";
        exchange.mic(ExchangeMic::Clhk);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Clhk";
        exchange.mic(ExchangeMic::Cshk);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cshk";
        exchange.mic(ExchangeMic::Cfhk);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cfhk";
        exchange.mic(ExchangeMic::Dbhk);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dbhk";
        exchange.mic(ExchangeMic::Eotc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Eotc";
        exchange.mic(ExchangeMic::Hsxa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hsxa";
        exchange.mic(ExchangeMic::Maqh);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Maqh";
        exchange.mic(ExchangeMic::Sigh);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Sigh";
        exchange.mic(ExchangeMic::Tocp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tocp";
        exchange.mic(ExchangeMic::Ubsx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ubsx";
        exchange.mic(ExchangeMic::Xcgs);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcgs";
        exchange.mic(ExchangeMic::Xhkf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xhkf";
        exchange.mic(ExchangeMic::Xhkg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xhkg";
        exchange.mic(ExchangeMic::Shsc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Shsc";
        exchange.mic(ExchangeMic::Xgem);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xgem";
        exchange.mic(ExchangeMic::Xihk);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xihk";
        exchange.mic(ExchangeMic::Xpst);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpst";
        exchange.mic(ExchangeMic::Beta);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Beta";
        exchange.mic(ExchangeMic::Hupx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hupx";
        exchange.mic(ExchangeMic::Kccp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Kccp";
        exchange.mic(ExchangeMic::Xbud);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbud";
        exchange.mic(ExchangeMic::Xgas);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xgas";
        exchange.mic(ExchangeMic::Xice);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xice";
        exchange.mic(ExchangeMic::Dice);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dice";
        exchange.mic(ExchangeMic::Dnis);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dnis";
        exchange.mic(ExchangeMic::Fnis);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fnis";
        exchange.mic(ExchangeMic::Acex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Acex";
        exchange.mic(ExchangeMic::Cdsl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cdsl";
        exchange.mic(ExchangeMic::Icxl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Icxl";
        exchange.mic(ExchangeMic::Isex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Isex";
        exchange.mic(ExchangeMic::Mcxx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mcxx";
        exchange.mic(ExchangeMic::Nbot);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nbot";
        exchange.mic(ExchangeMic::Nmce);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nmce";
        exchange.mic(ExchangeMic::Otcx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Otcx";
        exchange.mic(ExchangeMic::Pxil);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pxil";
        exchange.mic(ExchangeMic::Xban);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xban";
        exchange.mic(ExchangeMic::Xbom);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbom";
        exchange.mic(ExchangeMic::Bsme);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bsme";
        exchange.mic(ExchangeMic::Xcal);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcal";
        exchange.mic(ExchangeMic::Xdes);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdes";
        exchange.mic(ExchangeMic::Ximc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ximc";
        exchange.mic(ExchangeMic::Xmds);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmds";
        exchange.mic(ExchangeMic::Xncd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xncd";
        exchange.mic(ExchangeMic::Xnse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnse";
        exchange.mic(ExchangeMic::Xuse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xuse";
        exchange.mic(ExchangeMic::Icdx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Icdx";
        exchange.mic(ExchangeMic::Xbbj);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbbj";
        exchange.mic(ExchangeMic::Xidx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xidx";
        exchange.mic(ExchangeMic::Xjnb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xjnb";
        exchange.mic(ExchangeMic::Imex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Imex";
        exchange.mic(ExchangeMic::Xteh);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xteh";
        exchange.mic(ExchangeMic::Xiqs);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xiqs";
        exchange.mic(ExchangeMic::Xpos);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpos";
        exchange.mic(ExchangeMic::Xcde);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcde";
        exchange.mic(ExchangeMic::Xdub);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdub";
        exchange.mic(ExchangeMic::Xatl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xatl";
        exchange.mic(ExchangeMic::Xesm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xesm";
        exchange.mic(ExchangeMic::Xeye);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xeye";
        exchange.mic(ExchangeMic::Xmsm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmsm";
        exchange.mic(ExchangeMic::Xebi);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xebi";
        exchange.mic(ExchangeMic::Xtae);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtae";
        exchange.mic(ExchangeMic::Cgit);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cgit";
        exchange.mic(ExchangeMic::Cgcm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cgcm";
        exchange.mic(ExchangeMic::Cgdb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cgdb";
        exchange.mic(ExchangeMic::Cgeb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cgeb";
        exchange.mic(ExchangeMic::Cggd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cggd";
        exchange.mic(ExchangeMic::Cgnd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cgnd";
        exchange.mic(ExchangeMic::Cgqd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cgqd";
        exchange.mic(ExchangeMic::Cgqt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cgqt";
        exchange.mic(ExchangeMic::Cgtr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cgtr";
        exchange.mic(ExchangeMic::Emid);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Emid";
        exchange.mic(ExchangeMic::Emdr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Emdr";
        exchange.mic(ExchangeMic::Emir);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Emir";
        exchange.mic(ExchangeMic::Etlx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Etlx";
        exchange.mic(ExchangeMic::Hmtf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hmtf";
        exchange.mic(ExchangeMic::Hmod);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hmod";
        exchange.mic(ExchangeMic::Mtsc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtsc";
        exchange.mic(ExchangeMic::Bond);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bond";
        exchange.mic(ExchangeMic::Mtsm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtsm";
        exchange.mic(ExchangeMic::Ssob);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ssob";
        exchange.mic(ExchangeMic::Xgme);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xgme";
        exchange.mic(ExchangeMic::Xmil);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmil";
        exchange.mic(ExchangeMic::Etfp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Etfp";
        exchange.mic(ExchangeMic::Mivx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mivx";
        exchange.mic(ExchangeMic::Motx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Motx";
        exchange.mic(ExchangeMic::Mtaa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtaa";
        exchange.mic(ExchangeMic::Mtah);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtah";
        exchange.mic(ExchangeMic::Sedx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Sedx";
        exchange.mic(ExchangeMic::Xaim);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xaim";
        exchange.mic(ExchangeMic::Xdmi);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdmi";
        exchange.mic(ExchangeMic::Xmot);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmot";
        exchange.mic(ExchangeMic::Xbrv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbrv";
        exchange.mic(ExchangeMic::Xjam);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xjam";
        exchange.mic(ExchangeMic::Betp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Betp";
        exchange.mic(ExchangeMic::Chij);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Chij";
        exchange.mic(ExchangeMic::Chis);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Chis";
        exchange.mic(ExchangeMic::Chiv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Chiv";
        exchange.mic(ExchangeMic::Citx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Citx";
        exchange.mic(ExchangeMic::Citd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Citd";
        exchange.mic(ExchangeMic::Cljp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cljp";
        exchange.mic(ExchangeMic::Cmet);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cmet";
        exchange.mic(ExchangeMic::Csjp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Csjp";
        exchange.mic(ExchangeMic::Cfjp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cfjp";
        exchange.mic(ExchangeMic::Drct);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Drct";
        exchange.mic(ExchangeMic::Lxjp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lxjp";
        exchange.mic(ExchangeMic::Maqj);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Maqj";
        exchange.mic(ExchangeMic::Mizx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mizx";
        exchange.mic(ExchangeMic::Msms);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Msms";
        exchange.mic(ExchangeMic::Nmrj);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nmrj";
        exchange.mic(ExchangeMic::Nxjp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nxjp";
        exchange.mic(ExchangeMic::Nxse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nxse";
        exchange.mic(ExchangeMic::Nxvw);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nxvw";
        exchange.mic(ExchangeMic::Sbij);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Sbij";
        exchange.mic(ExchangeMic::Sbiu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Sbiu";
        exchange.mic(ExchangeMic::Sbiv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Sbiv";
        exchange.mic(ExchangeMic::Xsbi);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsbi";
        exchange.mic(ExchangeMic::Sigj);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Sigj";
        exchange.mic(ExchangeMic::Xfka);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xfka";
        exchange.mic(ExchangeMic::Xijp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xijp";
        exchange.mic(ExchangeMic::Jasr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Jasr";
        exchange.mic(ExchangeMic::Xjpx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xjpx";
        exchange.mic(ExchangeMic::Xjas);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xjas";
        exchange.mic(ExchangeMic::Xose);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xose";
        exchange.mic(ExchangeMic::Xosj);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xosj";
        exchange.mic(ExchangeMic::Xtam);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtam";
        exchange.mic(ExchangeMic::Xtk1);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtk1";
        exchange.mic(ExchangeMic::Xtk2);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtk2";
        exchange.mic(ExchangeMic::Xtk3);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtk3";
        exchange.mic(ExchangeMic::Xtks);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtks";
        exchange.mic(ExchangeMic::Xkac);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkac";
        exchange.mic(ExchangeMic::Xngo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xngo";
        exchange.mic(ExchangeMic::Xnks);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnks";
        exchange.mic(ExchangeMic::Xsap);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsap";
        exchange.mic(ExchangeMic::Xtff);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtff";
        exchange.mic(ExchangeMic::Xtkt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtkt";
        exchange.mic(ExchangeMic::Xamm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xamm";
        exchange.mic(ExchangeMic::Etsc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Etsc";
        exchange.mic(ExchangeMic::Xkaz);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkaz";
        exchange.mic(ExchangeMic::Xnai);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnai";
        exchange.mic(ExchangeMic::Xkfb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkfb";
        exchange.mic(ExchangeMic::Xkrx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkrx";
        exchange.mic(ExchangeMic::Xkcm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkcm";
        exchange.mic(ExchangeMic::Xkem);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkem";
        exchange.mic(ExchangeMic::Xkfe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkfe";
        exchange.mic(ExchangeMic::Xkon);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkon";
        exchange.mic(ExchangeMic::Xkos);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkos";
        exchange.mic(ExchangeMic::Xkuw);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkuw";
        exchange.mic(ExchangeMic::Xkse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkse";
        exchange.mic(ExchangeMic::Xlao);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlao";
        exchange.mic(ExchangeMic::Xris);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xris";
        exchange.mic(ExchangeMic::Fnlv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fnlv";
        exchange.mic(ExchangeMic::Xbey);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbey";
        exchange.mic(ExchangeMic::Xlsm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlsm";
        exchange.mic(ExchangeMic::Bapx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bapx";
        exchange.mic(ExchangeMic::Getb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Getb";
        exchange.mic(ExchangeMic::Xlit);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlit";
        exchange.mic(ExchangeMic::Fnlt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fnlt";
        exchange.mic(ExchangeMic::Cclx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cclx";
        exchange.mic(ExchangeMic::Xlux);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlux";
        exchange.mic(ExchangeMic::Emtf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Emtf";
        exchange.mic(ExchangeMic::Xves);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xves";
        exchange.mic(ExchangeMic::Xmae);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmae";
        exchange.mic(ExchangeMic::Xmdg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmdg";
        exchange.mic(ExchangeMic::Xmsw);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmsw";
        exchange.mic(ExchangeMic::Xkls);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkls";
        exchange.mic(ExchangeMic::Mesq);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mesq";
        exchange.mic(ExchangeMic::Xlfx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlfx";
        exchange.mic(ExchangeMic::Xrbm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xrbm";
        exchange.mic(ExchangeMic::Malx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Malx";
        exchange.mic(ExchangeMic::Ewsm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ewsm";
        exchange.mic(ExchangeMic::Xmal);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmal";
        exchange.mic(ExchangeMic::Gbot);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gbot";
        exchange.mic(ExchangeMic::Xafx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xafx";
        exchange.mic(ExchangeMic::Xmau);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmau";
        exchange.mic(ExchangeMic::Cgmx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cgmx";
        exchange.mic(ExchangeMic::Xemd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xemd";
        exchange.mic(ExchangeMic::Xmex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmex";
        exchange.mic(ExchangeMic::Xmol);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmol";
        exchange.mic(ExchangeMic::Xula);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xula";
        exchange.mic(ExchangeMic::Xmnx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmnx";
        exchange.mic(ExchangeMic::Xcas);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcas";
        exchange.mic(ExchangeMic::Xbvm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbvm";
        exchange.mic(ExchangeMic::Xnam);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnam";
        exchange.mic(ExchangeMic::Xnep);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnep";
        exchange.mic(ExchangeMic::Nzfx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nzfx";
        exchange.mic(ExchangeMic::Xnze);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnze";
        exchange.mic(ExchangeMic::Xman);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xman";
        exchange.mic(ExchangeMic::Nasx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nasx";
        exchange.mic(ExchangeMic::Xnsa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnsa";
        exchange.mic(ExchangeMic::Fish);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fish";
        exchange.mic(ExchangeMic::Fshx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fshx";
        exchange.mic(ExchangeMic::Icas);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Icas";
        exchange.mic(ExchangeMic::Nexo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nexo";
        exchange.mic(ExchangeMic::Nops);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nops";
        exchange.mic(ExchangeMic::Norx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Norx";
        exchange.mic(ExchangeMic::Nosc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nosc";
        exchange.mic(ExchangeMic::Notc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Notc";
        exchange.mic(ExchangeMic::Oslc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Oslc";
        exchange.mic(ExchangeMic::Xima);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xima";
        exchange.mic(ExchangeMic::Xosl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xosl";
        exchange.mic(ExchangeMic::Merd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Merd";
        exchange.mic(ExchangeMic::Merk);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Merk";
        exchange.mic(ExchangeMic::Nibr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nibr";
        exchange.mic(ExchangeMic::Xoad);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xoad";
        exchange.mic(ExchangeMic::Xoam);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xoam";
        exchange.mic(ExchangeMic::Xoas);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xoas";
        exchange.mic(ExchangeMic::Xosc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xosc";
        exchange.mic(ExchangeMic::Xosd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xosd";
        exchange.mic(ExchangeMic::Xmus);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmus";
        exchange.mic(ExchangeMic::Ncel);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ncel";
        exchange.mic(ExchangeMic::Xisl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xisl";
        exchange.mic(ExchangeMic::Xkar);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkar";
        exchange.mic(ExchangeMic::Xlah);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlah";
        exchange.mic(ExchangeMic::Xpae);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpae";
        exchange.mic(ExchangeMic::Xpty);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpty";
        exchange.mic(ExchangeMic::Xpom);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpom";
        exchange.mic(ExchangeMic::Xvpa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xvpa";
        exchange.mic(ExchangeMic::Xlim);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlim";
        exchange.mic(ExchangeMic::Clph);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Clph";
        exchange.mic(ExchangeMic::Pdex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pdex";
        exchange.mic(ExchangeMic::Xphs);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xphs";
        exchange.mic(ExchangeMic::Kdpw);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Kdpw";
        exchange.mic(ExchangeMic::Xwar);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xwar";
        exchange.mic(ExchangeMic::Bosp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bosp";
        exchange.mic(ExchangeMic::Plpd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Plpd";
        exchange.mic(ExchangeMic::Plpx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Plpx";
        exchange.mic(ExchangeMic::Rpwc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Rpwc";
        exchange.mic(ExchangeMic::Tbsp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tbsp";
        exchange.mic(ExchangeMic::Wbcl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Wbcl";
        exchange.mic(ExchangeMic::Wbon);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Wbon";
        exchange.mic(ExchangeMic::Wder);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Wder";
        exchange.mic(ExchangeMic::Wetp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Wetp";
        exchange.mic(ExchangeMic::Wgas);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Wgas";
        exchange.mic(ExchangeMic::Wind);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Wind";
        exchange.mic(ExchangeMic::Wmtf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Wmtf";
        exchange.mic(ExchangeMic::Xnco);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnco";
        exchange.mic(ExchangeMic::Omic);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Omic";
        exchange.mic(ExchangeMic::Opex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Opex";
        exchange.mic(ExchangeMic::Omip);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Omip";
        exchange.mic(ExchangeMic::Dsmd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dsmd";
        exchange.mic(ExchangeMic::Trpx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Trpx";
        exchange.mic(ExchangeMic::Bmfx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bmfx";
        exchange.mic(ExchangeMic::Bmfa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bmfa";
        exchange.mic(ExchangeMic::Bmfm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bmfm";
        exchange.mic(ExchangeMic::Sbmf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Sbmf";
        exchange.mic(ExchangeMic::Xbrm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbrm";
        exchange.mic(ExchangeMic::Xbse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbse";
        exchange.mic(ExchangeMic::Xbsd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbsd";
        exchange.mic(ExchangeMic::Xcan);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcan";
        exchange.mic(ExchangeMic::Xras);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xras";
        exchange.mic(ExchangeMic::Xrpm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xrpm";
        exchange.mic(ExchangeMic::Misx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Misx";
        exchange.mic(ExchangeMic::Rtsx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Rtsx";
        exchange.mic(ExchangeMic::Namx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Namx";
        exchange.mic(ExchangeMic::Rpdx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Rpdx";
        exchange.mic(ExchangeMic::Rusx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Rusx";
        exchange.mic(ExchangeMic::Spim);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Spim";
        exchange.mic(ExchangeMic::Xmos);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmos";
        exchange.mic(ExchangeMic::Xpet);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpet";
        exchange.mic(ExchangeMic::Xpic);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpic";
        exchange.mic(ExchangeMic::Xrus);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xrus";
        exchange.mic(ExchangeMic::Xsam);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsam";
        exchange.mic(ExchangeMic::Xsib);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsib";
        exchange.mic(ExchangeMic::Rotc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Rotc";
        exchange.mic(ExchangeMic::Rsex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Rsex";
        exchange.mic(ExchangeMic::Xecs);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xecs";
        exchange.mic(ExchangeMic::Xsau);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsau";
        exchange.mic(ExchangeMic::Xbel);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbel";
        exchange.mic(ExchangeMic::Cltd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cltd";
        exchange.mic(ExchangeMic::Ecal);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ecal";
        exchange.mic(ExchangeMic::Eeal);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Eeal";
        exchange.mic(ExchangeMic::Ifsg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ifsg";
        exchange.mic(ExchangeMic::Jadx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Jadx";
        exchange.mic(ExchangeMic::Smex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Smex";
        exchange.mic(ExchangeMic::Tfsa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tfsa";
        exchange.mic(ExchangeMic::Xses);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xses";
        exchange.mic(ExchangeMic::Xsca);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsca";
        exchange.mic(ExchangeMic::Xsce);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsce";
        exchange.mic(ExchangeMic::Xsim);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsim";
        exchange.mic(ExchangeMic::Spxe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Spxe";
        exchange.mic(ExchangeMic::Xbra);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbra";
        exchange.mic(ExchangeMic::Xlju);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlju";
        exchange.mic(ExchangeMic::Xsop);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsop";
        exchange.mic(ExchangeMic::Xjse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xjse";
        exchange.mic(ExchangeMic::Altx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Altx";
        exchange.mic(ExchangeMic::Xbes);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbes";
        exchange.mic(ExchangeMic::Xsaf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsaf";
        exchange.mic(ExchangeMic::Xsfa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsfa";
        exchange.mic(ExchangeMic::Yldx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Yldx";
        exchange.mic(ExchangeMic::Bmex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bmex";
        exchange.mic(ExchangeMic::Bmcl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bmcl";
        exchange.mic(ExchangeMic::Mabx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mabx";
        exchange.mic(ExchangeMic::Marf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Marf";
        exchange.mic(ExchangeMic::Merf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Merf";
        exchange.mic(ExchangeMic::Send);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Send";
        exchange.mic(ExchangeMic::Xbar);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbar";
        exchange.mic(ExchangeMic::Xbil);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbil";
        exchange.mic(ExchangeMic::Xdrf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdrf";
        exchange.mic(ExchangeMic::Xlat);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlat";
        exchange.mic(ExchangeMic::Xmad);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmad";
        exchange.mic(ExchangeMic::Xmce);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmce";
        exchange.mic(ExchangeMic::Xmpw);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmpw";
        exchange.mic(ExchangeMic::Xmrv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmrv";
        exchange.mic(ExchangeMic::Xval);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xval";
        exchange.mic(ExchangeMic::Ibgh);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ibgh";
        exchange.mic(ExchangeMic::Mibg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mibg";
        exchange.mic(ExchangeMic::Omel);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Omel";
        exchange.mic(ExchangeMic::Pave);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pave";
        exchange.mic(ExchangeMic::Xdpa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdpa";
        exchange.mic(ExchangeMic::Xnaf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnaf";
        exchange.mic(ExchangeMic::Xsrm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsrm";
        exchange.mic(ExchangeMic::Xcol);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcol";
        exchange.mic(ExchangeMic::Xkha);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkha";
        exchange.mic(ExchangeMic::Xswa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xswa";
        exchange.mic(ExchangeMic::Cryd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cryd";
        exchange.mic(ExchangeMic::Cryx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cryx";
        exchange.mic(ExchangeMic::Sebx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Sebx";
        exchange.mic(ExchangeMic::Ensx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ensx";
        exchange.mic(ExchangeMic::Xngm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xngm";
        exchange.mic(ExchangeMic::Nmtf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nmtf";
        exchange.mic(ExchangeMic::Xndx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xndx";
        exchange.mic(ExchangeMic::Xnmr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnmr";
        exchange.mic(ExchangeMic::Xsat);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsat";
        exchange.mic(ExchangeMic::Xsto);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsto";
        exchange.mic(ExchangeMic::Csto);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Csto";
        exchange.mic(ExchangeMic::Dnse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dnse";
        exchange.mic(ExchangeMic::Dsto);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dsto";
        exchange.mic(ExchangeMic::Fnse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fnse";
        exchange.mic(ExchangeMic::Xopv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xopv";
        exchange.mic(ExchangeMic::Aixe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Aixe";
        exchange.mic(ExchangeMic::Dots);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dots";
        exchange.mic(ExchangeMic::Euch);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Euch";
        exchange.mic(ExchangeMic::Eurm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Eurm";
        exchange.mic(ExchangeMic::Eusc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Eusc";
        exchange.mic(ExchangeMic::Eusp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Eusp";
        exchange.mic(ExchangeMic::Stox);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Stox";
        exchange.mic(ExchangeMic::Xscu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xscu";
        exchange.mic(ExchangeMic::Xstv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xstv";
        exchange.mic(ExchangeMic::Xstx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xstx";
        exchange.mic(ExchangeMic::Ubsg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ubsg";
        exchange.mic(ExchangeMic::Ubsc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ubsc";
        exchange.mic(ExchangeMic::Ubsf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ubsf";
        exchange.mic(ExchangeMic::Xbrn);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbrn";
        exchange.mic(ExchangeMic::Xswx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xswx";
        exchange.mic(ExchangeMic::Xbtr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbtr";
        exchange.mic(ExchangeMic::Xicb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xicb";
        exchange.mic(ExchangeMic::Xqmh);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xqmh";
        exchange.mic(ExchangeMic::Xvtx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xvtx";
        exchange.mic(ExchangeMic::Zkbx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Zkbx";
        exchange.mic(ExchangeMic::Xdse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdse";
        exchange.mic(ExchangeMic::Roco);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Roco";
        exchange.mic(ExchangeMic::Xtaf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtaf";
        exchange.mic(ExchangeMic::Xtai);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtai";
        exchange.mic(ExchangeMic::Xdar);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdar";
        exchange.mic(ExchangeMic::Afet);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Afet";
        exchange.mic(ExchangeMic::Beex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Beex";
        exchange.mic(ExchangeMic::Tfex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tfex";
        exchange.mic(ExchangeMic::Xbkk);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbkk";
        exchange.mic(ExchangeMic::Xbkf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbkf";
        exchange.mic(ExchangeMic::Xmai);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmai";
        exchange.mic(ExchangeMic::Clmx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Clmx";
        exchange.mic(ExchangeMic::Hchc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hchc";
        exchange.mic(ExchangeMic::Ndex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ndex";
        exchange.mic(ExchangeMic::Ndxs);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ndxs";
        exchange.mic(ExchangeMic::Nlpx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nlpx";
        exchange.mic(ExchangeMic::Tomx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tomx";
        exchange.mic(ExchangeMic::Tomd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tomd";
        exchange.mic(ExchangeMic::Xems);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xems";
        exchange.mic(ExchangeMic::Xhft);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xhft";
        exchange.mic(ExchangeMic::Xtrn);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtrn";
        exchange.mic(ExchangeMic::Xtun);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtun";
        exchange.mic(ExchangeMic::Xist);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xist";
        exchange.mic(ExchangeMic::Xdsm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdsm";
        exchange.mic(ExchangeMic::Xeqy);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xeqy";
        exchange.mic(ExchangeMic::Xfno);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xfno";
        exchange.mic(ExchangeMic::Xpms);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpms";
        exchange.mic(ExchangeMic::Ultx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ultx";
        exchange.mic(ExchangeMic::Xuga);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xuga";
        exchange.mic(ExchangeMic::Eese);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Eese";
        exchange.mic(ExchangeMic::Pfts);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pfts";
        exchange.mic(ExchangeMic::Pftq);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pftq";
        exchange.mic(ExchangeMic::Sepe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Sepe";
        exchange.mic(ExchangeMic::Ukex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ukex";
        exchange.mic(ExchangeMic::Xdfb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdfb";
        exchange.mic(ExchangeMic::Xkhr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkhr";
        exchange.mic(ExchangeMic::Xkie);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkie";
        exchange.mic(ExchangeMic::Xkis);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkis";
        exchange.mic(ExchangeMic::Xode);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xode";
        exchange.mic(ExchangeMic::Xpri);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpri";
        exchange.mic(ExchangeMic::Xuax);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xuax";
        exchange.mic(ExchangeMic::Xukr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xukr";
        exchange.mic(ExchangeMic::Dgcx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dgcx";
        exchange.mic(ExchangeMic::Difx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Difx";
        exchange.mic(ExchangeMic::Dumx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dumx";
        exchange.mic(ExchangeMic::Xads);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xads";
        exchange.mic(ExchangeMic::Xdfm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xdfm";
        exchange.mic(ExchangeMic::Aqxe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Aqxe";
        exchange.mic(ExchangeMic::Balt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Balt";
        exchange.mic(ExchangeMic::Bltx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bltx";
        exchange.mic(ExchangeMic::Bcxe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bcxe";
        exchange.mic(ExchangeMic::Batd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Batd";
        exchange.mic(ExchangeMic::Bate);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bate";
        exchange.mic(ExchangeMic::Batf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Batf";
        exchange.mic(ExchangeMic::Batp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Batp";
        exchange.mic(ExchangeMic::Botc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Botc";
        exchange.mic(ExchangeMic::Chid);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Chid";
        exchange.mic(ExchangeMic::Chio);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Chio";
        exchange.mic(ExchangeMic::Chix);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Chix";
        exchange.mic(ExchangeMic::Bgci);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bgci";
        exchange.mic(ExchangeMic::Bgcb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bgcb";
        exchange.mic(ExchangeMic::Blox);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Blox";
        exchange.mic(ExchangeMic::Bmtf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bmtf";
        exchange.mic(ExchangeMic::Boat);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Boat";
        exchange.mic(ExchangeMic::Bosc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bosc";
        exchange.mic(ExchangeMic::Brnx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Brnx";
        exchange.mic(ExchangeMic::Caze);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Caze";
        exchange.mic(ExchangeMic::Cco2);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cco2";
        exchange.mic(ExchangeMic::Cgme);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cgme";
        exchange.mic(ExchangeMic::Chev);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Chev";
        exchange.mic(ExchangeMic::Blnk);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Blnk";
        exchange.mic(ExchangeMic::Cmee);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cmee";
        exchange.mic(ExchangeMic::Cmec);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cmec";
        exchange.mic(ExchangeMic::Cmed);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cmed";
        exchange.mic(ExchangeMic::Cmmt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cmmt";
        exchange.mic(ExchangeMic::Cseu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cseu";
        exchange.mic(ExchangeMic::Cscf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cscf";
        exchange.mic(ExchangeMic::Dbix);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dbix";
        exchange.mic(ExchangeMic::Dbcr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dbcr";
        exchange.mic(ExchangeMic::Dbcx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dbcx";
        exchange.mic(ExchangeMic::Dbdc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dbdc";
        exchange.mic(ExchangeMic::Dbmo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dbmo";
        exchange.mic(ExchangeMic::Dbse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dbse";
        exchange.mic(ExchangeMic::Encl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Encl";
        exchange.mic(ExchangeMic::Eqld);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Eqld";
        exchange.mic(ExchangeMic::Exeu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Exeu";
        exchange.mic(ExchangeMic::Exbo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Exbo";
        exchange.mic(ExchangeMic::Excp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Excp";
        exchange.mic(ExchangeMic::Exmp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Exmp";
        exchange.mic(ExchangeMic::Exor);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Exor";
        exchange.mic(ExchangeMic::Exsi);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Exsi";
        exchange.mic(ExchangeMic::Exvp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Exvp";
        exchange.mic(ExchangeMic::Fair);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fair";
        exchange.mic(ExchangeMic::Gemx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gemx";
        exchange.mic(ExchangeMic::Gfic);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gfic";
        exchange.mic(ExchangeMic::Gfif);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gfif";
        exchange.mic(ExchangeMic::Gfin);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gfin";
        exchange.mic(ExchangeMic::Gfir);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gfir";
        exchange.mic(ExchangeMic::Gmeg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gmeg";
        exchange.mic(ExchangeMic::Xgcx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xgcx";
        exchange.mic(ExchangeMic::Xgdx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xgdx";
        exchange.mic(ExchangeMic::Xgsx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xgsx";
        exchange.mic(ExchangeMic::Xldx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xldx";
        exchange.mic(ExchangeMic::Grif);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Grif";
        exchange.mic(ExchangeMic::Grse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Grse";
        exchange.mic(ExchangeMic::Hsxe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hsxe";
        exchange.mic(ExchangeMic::Ibal);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ibal";
        exchange.mic(ExchangeMic::Icap);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Icap";
        exchange.mic(ExchangeMic::Btee);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Btee";
        exchange.mic(ExchangeMic::Ebsx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ebsx";
        exchange.mic(ExchangeMic::Icah);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Icah";
        exchange.mic(ExchangeMic::Icen);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Icen";
        exchange.mic(ExchangeMic::Icse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Icse";
        exchange.mic(ExchangeMic::Ictq);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ictq";
        exchange.mic(ExchangeMic::Isdx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Isdx";
        exchange.mic(ExchangeMic::Wclk);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Wclk";
        exchange.mic(ExchangeMic::Ifeu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ifeu";
        exchange.mic(ExchangeMic::Cxrt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cxrt";
        exchange.mic(ExchangeMic::Ifen);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ifen";
        exchange.mic(ExchangeMic::Ifll);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ifll";
        exchange.mic(ExchangeMic::Iflo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Iflo";
        exchange.mic(ExchangeMic::Iflx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Iflx";
        exchange.mic(ExchangeMic::Ifut);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ifut";
        exchange.mic(ExchangeMic::Iswa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Iswa";
        exchange.mic(ExchangeMic::Kleu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Kleu";
        exchange.mic(ExchangeMic::Liqu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Liqu";
        exchange.mic(ExchangeMic::Liqf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Liqf";
        exchange.mic(ExchangeMic::Liqh);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Liqh";
        exchange.mic(ExchangeMic::Lmax);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lmax";
        exchange.mic(ExchangeMic::Lmad);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lmad";
        exchange.mic(ExchangeMic::Lmae);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lmae";
        exchange.mic(ExchangeMic::Lmaf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lmaf";
        exchange.mic(ExchangeMic::Lmao);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lmao";
        exchange.mic(ExchangeMic::Lmec);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lmec";
        exchange.mic(ExchangeMic::Lotc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lotc";
        exchange.mic(ExchangeMic::Pldx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pldx";
        exchange.mic(ExchangeMic::Lppm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lppm";
        exchange.mic(ExchangeMic::Mael);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mael";
        exchange.mic(ExchangeMic::Mfgl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mfgl";
        exchange.mic(ExchangeMic::Mlxn);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mlxn";
        exchange.mic(ExchangeMic::Mlax);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mlax";
        exchange.mic(ExchangeMic::Mleu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mleu";
        exchange.mic(ExchangeMic::Mlve);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mlve";
        exchange.mic(ExchangeMic::Msip);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Msip";
        exchange.mic(ExchangeMic::Mytr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mytr";
        exchange.mic(ExchangeMic::N2Ex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "N2Ex";
        exchange.mic(ExchangeMic::Ndcm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ndcm";
        exchange.mic(ExchangeMic::Noff);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Noff";
        exchange.mic(ExchangeMic::Nuro);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nuro";
        exchange.mic(ExchangeMic::Nurd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nurd";
        exchange.mic(ExchangeMic::Xnlx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnlx";
        exchange.mic(ExchangeMic::Nxeu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nxeu";
        exchange.mic(ExchangeMic::Peel);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Peel";
        exchange.mic(ExchangeMic::Xphx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xphx";
        exchange.mic(ExchangeMic::Xrsp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xrsp";
        exchange.mic(ExchangeMic::Pieu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pieu";
        exchange.mic(ExchangeMic::Pirm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pirm";
        exchange.mic(ExchangeMic::Qwix);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Qwix";
        exchange.mic(ExchangeMic::Rbce);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Rbce";
        exchange.mic(ExchangeMic::Rbsx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Rbsx";
        exchange.mic(ExchangeMic::Rtsl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Rtsl";
        exchange.mic(ExchangeMic::Secf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Secf";
        exchange.mic(ExchangeMic::Sgmx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Sgmx";
        exchange.mic(ExchangeMic::Shar);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Shar";
        exchange.mic(ExchangeMic::Spec);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Spec";
        exchange.mic(ExchangeMic::Sprz);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Sprz";
        exchange.mic(ExchangeMic::Ssex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ssex";
        exchange.mic(ExchangeMic::Swap);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Swap";
        exchange.mic(ExchangeMic::Tfsv);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tfsv";
        exchange.mic(ExchangeMic::Tpie);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tpie";
        exchange.mic(ExchangeMic::Trde);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Trde";
        exchange.mic(ExchangeMic::Dbvx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dbvx";
        exchange.mic(ExchangeMic::Parx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Parx";
        exchange.mic(ExchangeMic::Tcds);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tcds";
        exchange.mic(ExchangeMic::Tfsg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tfsg";
        exchange.mic(ExchangeMic::Trdx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Trdx";
        exchange.mic(ExchangeMic::Vola);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Vola";
        exchange.mic(ExchangeMic::Treu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Treu";
        exchange.mic(ExchangeMic::Trqx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Trqx";
        exchange.mic(ExchangeMic::Trqm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Trqm";
        exchange.mic(ExchangeMic::Ubsl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ubsl";
        exchange.mic(ExchangeMic::Ubse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ubse";
        exchange.mic(ExchangeMic::Ukgd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ukgd";
        exchange.mic(ExchangeMic::Ukpx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ukpx";
        exchange.mic(ExchangeMic::Vega);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Vega";
        exchange.mic(ExchangeMic::Wins);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Wins";
        exchange.mic(ExchangeMic::Xalt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xalt";
        exchange.mic(ExchangeMic::Xcor);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcor";
        exchange.mic(ExchangeMic::Xgcl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xgcl";
        exchange.mic(ExchangeMic::Xlbm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlbm";
        exchange.mic(ExchangeMic::Xlch);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlch";
        exchange.mic(ExchangeMic::Xlme);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlme";
        exchange.mic(ExchangeMic::Xlon);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlon";
        exchange.mic(ExchangeMic::Xlod);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlod";
        exchange.mic(ExchangeMic::Xmts);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmts";
        exchange.mic(ExchangeMic::Amts);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Amts";
        exchange.mic(ExchangeMic::Bvuk);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bvuk";
        exchange.mic(ExchangeMic::Eacm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Eacm";
        exchange.mic(ExchangeMic::Emts);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Emts";
        exchange.mic(ExchangeMic::Gmts);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gmts";
        exchange.mic(ExchangeMic::Hung);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hung";
        exchange.mic(ExchangeMic::Imts);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Imts";
        exchange.mic(ExchangeMic::Mczk);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mczk";
        exchange.mic(ExchangeMic::Mtsa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtsa";
        exchange.mic(ExchangeMic::Mtsg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtsg";
        exchange.mic(ExchangeMic::Mtss);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtss";
        exchange.mic(ExchangeMic::Mtsw);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtsw";
        exchange.mic(ExchangeMic::Port);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Port";
        exchange.mic(ExchangeMic::Prme);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Prme";
        exchange.mic(ExchangeMic::Rmts);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Rmts";
        exchange.mic(ExchangeMic::Smts);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Smts";
        exchange.mic(ExchangeMic::Vmts);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Vmts";
        exchange.mic(ExchangeMic::Xsga);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsga";
        exchange.mic(ExchangeMic::Xsmp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsmp";
        exchange.mic(ExchangeMic::Xswb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xswb";
        exchange.mic(ExchangeMic::Xtup);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtup";
        exchange.mic(ExchangeMic::Tben);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tben";
        exchange.mic(ExchangeMic::Tbla);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tbla";
        exchange.mic(ExchangeMic::Tpcd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tpcd";
        exchange.mic(ExchangeMic::Tpeq);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tpeq";
        exchange.mic(ExchangeMic::Tpfd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tpfd";
        exchange.mic(ExchangeMic::Tpre);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tpre";
        exchange.mic(ExchangeMic::Tpsd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tpsd";
        exchange.mic(ExchangeMic::Tpsp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tpsp";
        exchange.mic(ExchangeMic::Xtpe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xtpe";
        exchange.mic(ExchangeMic::Xubs);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xubs";
        exchange.mic(ExchangeMic::Aats);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Aats";
        exchange.mic(ExchangeMic::Aqua);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Aqua";
        exchange.mic(ExchangeMic::Atdf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Atdf";
        exchange.mic(ExchangeMic::Core);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Core";
        exchange.mic(ExchangeMic::Baml);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Baml";
        exchange.mic(ExchangeMic::Mlco);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mlco";
        exchange.mic(ExchangeMic::Mlvx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mlvx";
        exchange.mic(ExchangeMic::Barx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Barx";
        exchange.mic(ExchangeMic::Bard);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bard";
        exchange.mic(ExchangeMic::Barl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Barl";
        exchange.mic(ExchangeMic::Bcdx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bcdx";
        exchange.mic(ExchangeMic::Bats);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bats";
        exchange.mic(ExchangeMic::Bato);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bato";
        exchange.mic(ExchangeMic::Baty);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Baty";
        exchange.mic(ExchangeMic::Byxd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Byxd";
        exchange.mic(ExchangeMic::Bzxd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bzxd";
        exchange.mic(ExchangeMic::Bbsf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bbsf";
        exchange.mic(ExchangeMic::Bgcf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bgcf";
        exchange.mic(ExchangeMic::Bgcd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bgcd";
        exchange.mic(ExchangeMic::Bids);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bids";
        exchange.mic(ExchangeMic::Bltd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bltd";
        exchange.mic(ExchangeMic::Bpol);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bpol";
        exchange.mic(ExchangeMic::Bndd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bndd";
        exchange.mic(ExchangeMic::Bnyc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bnyc";
        exchange.mic(ExchangeMic::Nyfx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nyfx";
        exchange.mic(ExchangeMic::Vtex);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Vtex";
        exchange.mic(ExchangeMic::Btec);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Btec";
        exchange.mic(ExchangeMic::Icsu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Icsu";
        exchange.mic(ExchangeMic::Cded);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cded";
        exchange.mic(ExchangeMic::Cgmi);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cgmi";
        exchange.mic(ExchangeMic::Cblc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cblc";
        exchange.mic(ExchangeMic::Cgmu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cgmu";
        exchange.mic(ExchangeMic::Cicx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cicx";
        exchange.mic(ExchangeMic::Lqfi);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lqfi";
        exchange.mic(ExchangeMic::Cmsf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cmsf";
        exchange.mic(ExchangeMic::Cred);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cred";
        exchange.mic(ExchangeMic::Caes);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Caes";
        exchange.mic(ExchangeMic::Cslp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cslp";
        exchange.mic(ExchangeMic::Dbsx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dbsx";
        exchange.mic(ExchangeMic::Deal);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Deal";
        exchange.mic(ExchangeMic::Edge);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Edge";
        exchange.mic(ExchangeMic::Eddp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Eddp";
        exchange.mic(ExchangeMic::Edga);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Edga";
        exchange.mic(ExchangeMic::Edgd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Edgd";
        exchange.mic(ExchangeMic::Edgo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Edgo";
        exchange.mic(ExchangeMic::Edgx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Edgx";
        exchange.mic(ExchangeMic::Eris);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Eris";
        exchange.mic(ExchangeMic::Fast);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fast";
        exchange.mic(ExchangeMic::Finr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Finr";
        exchange.mic(ExchangeMic::Finn);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Finn";
        exchange.mic(ExchangeMic::Fino);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fino";
        exchange.mic(ExchangeMic::Finy);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Finy";
        exchange.mic(ExchangeMic::Ootc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ootc";
        exchange.mic(ExchangeMic::Xadf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xadf";
        exchange.mic(ExchangeMic::Fxal);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fxal";
        exchange.mic(ExchangeMic::Fxcm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fxcm";
        exchange.mic(ExchangeMic::G1xx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "G1xx";
        exchange.mic(ExchangeMic::Gllc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gllc";
        exchange.mic(ExchangeMic::Glps);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Glps";
        exchange.mic(ExchangeMic::Govx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Govx";
        exchange.mic(ExchangeMic::Gree);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gree";
        exchange.mic(ExchangeMic::Gsef);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gsef";
        exchange.mic(ExchangeMic::Gtco);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gtco";
        exchange.mic(ExchangeMic::Hegx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hegx";
        exchange.mic(ExchangeMic::Hppo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hppo";
        exchange.mic(ExchangeMic::Hsfx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hsfx";
        exchange.mic(ExchangeMic::Icel);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Icel";
        exchange.mic(ExchangeMic::Iexg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Iexg";
        exchange.mic(ExchangeMic::Ifus);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ifus";
        exchange.mic(ExchangeMic::Ices);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ices";
        exchange.mic(ExchangeMic::Iepa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Iepa";
        exchange.mic(ExchangeMic::Ifed);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ifed";
        exchange.mic(ExchangeMic::Imag);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Imag";
        exchange.mic(ExchangeMic::Imbd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Imbd";
        exchange.mic(ExchangeMic::Imcc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Imcc";
        exchange.mic(ExchangeMic::Imcg);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Imcg";
        exchange.mic(ExchangeMic::Imco);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Imco";
        exchange.mic(ExchangeMic::Imcr);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Imcr";
        exchange.mic(ExchangeMic::Imen);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Imen";
        exchange.mic(ExchangeMic::Imeq);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Imeq";
        exchange.mic(ExchangeMic::Imfx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Imfx";
        exchange.mic(ExchangeMic::Imir);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Imir";
        exchange.mic(ExchangeMic::Isda);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Isda";
        exchange.mic(ExchangeMic::Itgi);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Itgi";
        exchange.mic(ExchangeMic::Jefx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Jefx";
        exchange.mic(ExchangeMic::Jpmx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Jpmx";
        exchange.mic(ExchangeMic::Jsef);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Jsef";
        exchange.mic(ExchangeMic::Jses);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Jses";
        exchange.mic(ExchangeMic::Jsjx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Jsjx";
        exchange.mic(ExchangeMic::Knig);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Knig";
        exchange.mic(ExchangeMic::Kncm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Kncm";
        exchange.mic(ExchangeMic::Knem);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Knem";
        exchange.mic(ExchangeMic::Knli);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Knli";
        exchange.mic(ExchangeMic::Knmx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Knmx";
        exchange.mic(ExchangeMic::Lasf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lasf";
        exchange.mic(ExchangeMic::Levl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Levl";
        exchange.mic(ExchangeMic::Lius);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lius";
        exchange.mic(ExchangeMic::Lifi);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lifi";
        exchange.mic(ExchangeMic::Liuh);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Liuh";
        exchange.mic(ExchangeMic::Lqed);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lqed";
        exchange.mic(ExchangeMic::Ltaa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ltaa";
        exchange.mic(ExchangeMic::Lmnx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Lmnx";
        exchange.mic(ExchangeMic::Mihi);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mihi";
        exchange.mic(ExchangeMic::Mprl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mprl";
        exchange.mic(ExchangeMic::Xmio);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmio";
        exchange.mic(ExchangeMic::Msco);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Msco";
        exchange.mic(ExchangeMic::Mslp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mslp";
        exchange.mic(ExchangeMic::Mspl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mspl";
        exchange.mic(ExchangeMic::Msrp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Msrp";
        exchange.mic(ExchangeMic::Mstx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mstx";
        exchange.mic(ExchangeMic::Mtus);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtus";
        exchange.mic(ExchangeMic::Bvus);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bvus";
        exchange.mic(ExchangeMic::Mtsb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtsb";
        exchange.mic(ExchangeMic::Mtxx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtxx";
        exchange.mic(ExchangeMic::Mtxa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtxa";
        exchange.mic(ExchangeMic::Mtxc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtxc";
        exchange.mic(ExchangeMic::Mtxm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtxm";
        exchange.mic(ExchangeMic::Mtxs);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mtxs";
        exchange.mic(ExchangeMic::Nblx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nblx";
        exchange.mic(ExchangeMic::Nfsc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nfsc";
        exchange.mic(ExchangeMic::Nfsa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nfsa";
        exchange.mic(ExchangeMic::Nfsd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nfsd";
        exchange.mic(ExchangeMic::Xstm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xstm";
        exchange.mic(ExchangeMic::Nmra);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nmra";
        exchange.mic(ExchangeMic::Nodx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nodx";
        exchange.mic(ExchangeMic::Nxus);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nxus";
        exchange.mic(ExchangeMic::Nypc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nypc";
        exchange.mic(ExchangeMic::Ollc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ollc";
        exchange.mic(ExchangeMic::Opra);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Opra";
        exchange.mic(ExchangeMic::Otcm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Otcm";
        exchange.mic(ExchangeMic::Cave);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cave";
        exchange.mic(ExchangeMic::Otcb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Otcb";
        exchange.mic(ExchangeMic::Otcq);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Otcq";
        exchange.mic(ExchangeMic::Pinc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pinc";
        exchange.mic(ExchangeMic::Pini);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pini";
        exchange.mic(ExchangeMic::Pinl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pinl";
        exchange.mic(ExchangeMic::Pinx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pinx";
        exchange.mic(ExchangeMic::Psgm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Psgm";
        exchange.mic(ExchangeMic::Pdqx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pdqx";
        exchange.mic(ExchangeMic::Pdqd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pdqd";
        exchange.mic(ExchangeMic::Pipe);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pipe";
        exchange.mic(ExchangeMic::Prse);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Prse";
        exchange.mic(ExchangeMic::Pulx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Pulx";
        exchange.mic(ExchangeMic::Ricx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ricx";
        exchange.mic(ExchangeMic::Ricd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ricd";
        exchange.mic(ExchangeMic::Sgma);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Sgma";
        exchange.mic(ExchangeMic::Shaw);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Shaw";
        exchange.mic(ExchangeMic::Shad);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Shad";
        exchange.mic(ExchangeMic::Soho);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Soho";
        exchange.mic(ExchangeMic::Sstx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Sstx";
        exchange.mic(ExchangeMic::Tera);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tera";
        exchange.mic(ExchangeMic::Tfsu);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tfsu";
        exchange.mic(ExchangeMic::Trck);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Trck";
        exchange.mic(ExchangeMic::Trux);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Trux";
        exchange.mic(ExchangeMic::Tru1);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tru1";
        exchange.mic(ExchangeMic::Tru2);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tru2";
        exchange.mic(ExchangeMic::Trwb);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Trwb";
        exchange.mic(ExchangeMic::Dwsf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Dwsf";
        exchange.mic(ExchangeMic::Twsf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Twsf";
        exchange.mic(ExchangeMic::Tsbx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tsbx";
        exchange.mic(ExchangeMic::Tsef);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Tsef";
        exchange.mic(ExchangeMic::Ubsa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ubsa";
        exchange.mic(ExchangeMic::Ubsp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ubsp";
        exchange.mic(ExchangeMic::Welx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Welx";
        exchange.mic(ExchangeMic::Wsag);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Wsag";
        exchange.mic(ExchangeMic::Xaqs);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xaqs";
        exchange.mic(ExchangeMic::Xbox);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbox";
        exchange.mic(ExchangeMic::Xcbo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcbo";
        exchange.mic(ExchangeMic::C2Ox);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "C2Ox";
        exchange.mic(ExchangeMic::Cbsx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cbsx";
        exchange.mic(ExchangeMic::Xcbf);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcbf";
        exchange.mic(ExchangeMic::Xcbt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcbt";
        exchange.mic(ExchangeMic::Fcbt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fcbt";
        exchange.mic(ExchangeMic::Xkbt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkbt";
        exchange.mic(ExchangeMic::Xcff);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcff";
        exchange.mic(ExchangeMic::Xchi);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xchi";
        exchange.mic(ExchangeMic::Xcis);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcis";
        exchange.mic(ExchangeMic::Xcme);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcme";
        exchange.mic(ExchangeMic::Cbts);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cbts";
        exchange.mic(ExchangeMic::Cecs);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cecs";
        exchange.mic(ExchangeMic::Cmes);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Cmes";
        exchange.mic(ExchangeMic::Fcme);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Fcme";
        exchange.mic(ExchangeMic::Glbx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Glbx";
        exchange.mic(ExchangeMic::Nyms);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nyms";
        exchange.mic(ExchangeMic::Ximm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Ximm";
        exchange.mic(ExchangeMic::Xiom);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xiom";
        exchange.mic(ExchangeMic::Xcur);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcur";
        exchange.mic(ExchangeMic::Xelx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xelx";
        exchange.mic(ExchangeMic::Xfci);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xfci";
        exchange.mic(ExchangeMic::Xgmx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xgmx";
        exchange.mic(ExchangeMic::Xins);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xins";
        exchange.mic(ExchangeMic::Iblx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Iblx";
        exchange.mic(ExchangeMic::Icbx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Icbx";
        exchange.mic(ExchangeMic::Icro);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Icro";
        exchange.mic(ExchangeMic::Iidx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Iidx";
        exchange.mic(ExchangeMic::Mocx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mocx";
        exchange.mic(ExchangeMic::Rcbx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Rcbx";
        exchange.mic(ExchangeMic::Xisx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xisx";
        exchange.mic(ExchangeMic::Gmni);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gmni";
        exchange.mic(ExchangeMic::Mcry);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Mcry";
        exchange.mic(ExchangeMic::Xisa);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xisa";
        exchange.mic(ExchangeMic::Xise);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xise";
        exchange.mic(ExchangeMic::Xmer);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmer";
        exchange.mic(ExchangeMic::Xmge);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmge";
        exchange.mic(ExchangeMic::Xnas);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnas";
        exchange.mic(ExchangeMic::Bosd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bosd";
        exchange.mic(ExchangeMic::Espd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Espd";
        exchange.mic(ExchangeMic::Nasd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nasd";
        exchange.mic(ExchangeMic::Xbos);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbos";
        exchange.mic(ExchangeMic::Xbrt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbrt";
        exchange.mic(ExchangeMic::Xbxo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xbxo";
        exchange.mic(ExchangeMic::Xncm);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xncm";
        exchange.mic(ExchangeMic::Xndq);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xndq";
        exchange.mic(ExchangeMic::Xngs);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xngs";
        exchange.mic(ExchangeMic::Xnim);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnim";
        exchange.mic(ExchangeMic::Xnms);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnms";
        exchange.mic(ExchangeMic::Xpbt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpbt";
        exchange.mic(ExchangeMic::Xphl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xphl";
        exchange.mic(ExchangeMic::Xpho);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpho";
        exchange.mic(ExchangeMic::Xpor);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpor";
        exchange.mic(ExchangeMic::Xpsx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xpsx";
        exchange.mic(ExchangeMic::Xnym);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnym";
        exchange.mic(ExchangeMic::Xcec);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcec";
        exchange.mic(ExchangeMic::Xnye);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnye";
        exchange.mic(ExchangeMic::Xnyl);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnyl";
        exchange.mic(ExchangeMic::Xnys);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnys";
        exchange.mic(ExchangeMic::Aldp);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Aldp";
        exchange.mic(ExchangeMic::Amxo);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Amxo";
        exchange.mic(ExchangeMic::Arcd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Arcd";
        exchange.mic(ExchangeMic::Arco);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Arco";
        exchange.mic(ExchangeMic::Arcx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Arcx";
        exchange.mic(ExchangeMic::Nysd);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Nysd";
        exchange.mic(ExchangeMic::Xase);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xase";
        exchange.mic(ExchangeMic::Xnli);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xnli";
        exchange.mic(ExchangeMic::Xoch);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xoch";
        exchange.mic(ExchangeMic::Xotc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xotc";
        exchange.mic(ExchangeMic::Xsef);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xsef";
        exchange.mic(ExchangeMic::Xwee);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xwee";
        exchange.mic(ExchangeMic::Bvur);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bvur";
        exchange.mic(ExchangeMic::Xmnt);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xmnt";
        exchange.mic(ExchangeMic::Xcet);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcet";
        exchange.mic(ExchangeMic::Xcue);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xcue";
        exchange.mic(ExchangeMic::Xkce);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xkce";
        exchange.mic(ExchangeMic::Xste);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xste";
        exchange.mic(ExchangeMic::Xuni);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xuni";
        exchange.mic(ExchangeMic::Gxma);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Gxma";
        exchange.mic(ExchangeMic::Bvca);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Bvca";
        exchange.mic(ExchangeMic::Hstc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Hstc";
        exchange.mic(ExchangeMic::Xhnx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xhnx";
        exchange.mic(ExchangeMic::Xstc);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xstc";
        exchange.mic(ExchangeMic::Xlus);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xlus";
        exchange.mic(ExchangeMic::Xzim);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xzim";
        exchange.mic(ExchangeMic::Xoff);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xoff";
        exchange.mic(ExchangeMic::Xxxx);
        ASSERT_EQUAL(oth, exchange.euronextMep()) << "Xxxx";
    }

    TESTCASE("euronextMepNumber() returns correct value")
    {
        const int ams{2};
        const int bru{3};
        const int par{1};
        const int lis{5};
        const int oth{6};
        Exchange exchange;

        exchange.mic(ExchangeMic::Xbru);
        ASSERT_EQUAL(bru, exchange.euronextMepNumber()) << "Xbru";
        exchange.mic(ExchangeMic::Alxb);
        ASSERT_EQUAL(bru, exchange.euronextMepNumber()) << "Alxb";
        exchange.mic(ExchangeMic::Enxb);
        ASSERT_EQUAL(bru, exchange.euronextMepNumber()) << "Enxb";
        exchange.mic(ExchangeMic::Mlxb);
        ASSERT_EQUAL(bru, exchange.euronextMepNumber()) << "Mlxb";
        exchange.mic(ExchangeMic::Tnlb);
        ASSERT_EQUAL(bru, exchange.euronextMepNumber()) << "Tnlb";
        exchange.mic(ExchangeMic::Vpxb);
        ASSERT_EQUAL(bru, exchange.euronextMepNumber()) << "Vpxb";
        exchange.mic(ExchangeMic::Xbrd);
        ASSERT_EQUAL(bru, exchange.euronextMepNumber()) << "Xbrd";
        exchange.mic(ExchangeMic::Xpar);
        ASSERT_EQUAL(par, exchange.euronextMepNumber()) << "Xpar";
        exchange.mic(ExchangeMic::Alxp);
        ASSERT_EQUAL(par, exchange.euronextMepNumber()) << "Alxp";
        exchange.mic(ExchangeMic::Xmat);
        ASSERT_EQUAL(par, exchange.euronextMepNumber()) << "Xmat";
        exchange.mic(ExchangeMic::Xmli);
        ASSERT_EQUAL(par, exchange.euronextMepNumber()) << "Xmli";
        exchange.mic(ExchangeMic::Xmon);
        ASSERT_EQUAL(par, exchange.euronextMepNumber()) << "Xmon";
        exchange.mic(ExchangeMic::Xlis);
        ASSERT_EQUAL(lis, exchange.euronextMepNumber()) << "Xlis";
        exchange.mic(ExchangeMic::Alxl);
        ASSERT_EQUAL(lis, exchange.euronextMepNumber()) << "Alxl";
        exchange.mic(ExchangeMic::Enxl);
        ASSERT_EQUAL(lis, exchange.euronextMepNumber()) << "Enxl";
        exchange.mic(ExchangeMic::Mfox);
        ASSERT_EQUAL(lis, exchange.euronextMepNumber()) << "Mfox";
        exchange.mic(ExchangeMic::Wqxl);
        ASSERT_EQUAL(lis, exchange.euronextMepNumber()) << "Wqxl";
        exchange.mic(ExchangeMic::Xams);
        ASSERT_EQUAL(ams, exchange.euronextMepNumber()) << "Xams";
        exchange.mic(ExchangeMic::Alxa);
        ASSERT_EQUAL(ams, exchange.euronextMepNumber()) << "Alxa";
        exchange.mic(ExchangeMic::Tnla);
        ASSERT_EQUAL(ams, exchange.euronextMepNumber()) << "Tnla";
        exchange.mic(ExchangeMic::Xeuc);
        ASSERT_EQUAL(ams, exchange.euronextMepNumber()) << "Xeuc";
        exchange.mic(ExchangeMic::Xeue);
        ASSERT_EQUAL(ams, exchange.euronextMepNumber()) << "Xeue";
        exchange.mic(ExchangeMic::Xeui);
        ASSERT_EQUAL(ams, exchange.euronextMepNumber()) << "Xeui";
        exchange.mic(ExchangeMic::Xldn);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xldn";
        exchange.mic(ExchangeMic::Xtir);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtir";
        exchange.mic(ExchangeMic::Xalg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xalg";
        exchange.mic(ExchangeMic::Bace);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bace";
        exchange.mic(ExchangeMic::Bcfs);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bcfs";
        exchange.mic(ExchangeMic::Xmvl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmvl";
        exchange.mic(ExchangeMic::Rofx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Rofx";
        exchange.mic(ExchangeMic::Xbcc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbcc";
        exchange.mic(ExchangeMic::Mvcx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mvcx";
        exchange.mic(ExchangeMic::Xbcm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbcm";
        exchange.mic(ExchangeMic::Xbcx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbcx";
        exchange.mic(ExchangeMic::Xbue);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbue";
        exchange.mic(ExchangeMic::Xmev);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmev";
        exchange.mic(ExchangeMic::Xcnf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcnf";
        exchange.mic(ExchangeMic::Xmab);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmab";
        exchange.mic(ExchangeMic::Xmtb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmtb";
        exchange.mic(ExchangeMic::Xros);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xros";
        exchange.mic(ExchangeMic::Xrox);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xrox";
        exchange.mic(ExchangeMic::Xtuc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtuc";
        exchange.mic(ExchangeMic::Xarm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xarm";
        exchange.mic(ExchangeMic::Apxl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Apxl";
        exchange.mic(ExchangeMic::Awbx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Awbx";
        exchange.mic(ExchangeMic::Awex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Awex";
        exchange.mic(ExchangeMic::Blev);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Blev";
        exchange.mic(ExchangeMic::Cgma);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cgma";
        exchange.mic(ExchangeMic::Chia);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Chia";
        exchange.mic(ExchangeMic::Cxac);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cxac";
        exchange.mic(ExchangeMic::Cxaf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cxaf";
        exchange.mic(ExchangeMic::Cxam);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cxam";
        exchange.mic(ExchangeMic::Cxan);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cxan";
        exchange.mic(ExchangeMic::Cxap);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cxap";
        exchange.mic(ExchangeMic::Cxav);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cxav";
        exchange.mic(ExchangeMic::Cxaw);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cxaw";
        exchange.mic(ExchangeMic::Clau);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Clau";
        exchange.mic(ExchangeMic::Csau);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Csau";
        exchange.mic(ExchangeMic::Cfau);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cfau";
        exchange.mic(ExchangeMic::Maqx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Maqx";
        exchange.mic(ExchangeMic::Msal);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Msal";
        exchange.mic(ExchangeMic::Nsxb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nsxb";
        exchange.mic(ExchangeMic::Siga);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Siga";
        exchange.mic(ExchangeMic::Simv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Simv";
        exchange.mic(ExchangeMic::Xasx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xasx";
        exchange.mic(ExchangeMic::Asxb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Asxb";
        exchange.mic(ExchangeMic::Asxc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Asxc";
        exchange.mic(ExchangeMic::Asxp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Asxp";
        exchange.mic(ExchangeMic::Asxt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Asxt";
        exchange.mic(ExchangeMic::Asxv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Asxv";
        exchange.mic(ExchangeMic::Xsfe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsfe";
        exchange.mic(ExchangeMic::Xfex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xfex";
        exchange.mic(ExchangeMic::Xnec);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnec";
        exchange.mic(ExchangeMic::Xyie);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xyie";
        exchange.mic(ExchangeMic::Exaa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Exaa";
        exchange.mic(ExchangeMic::Xwbo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xwbo";
        exchange.mic(ExchangeMic::Wbah);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Wbah";
        exchange.mic(ExchangeMic::Wbdm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Wbdm";
        exchange.mic(ExchangeMic::Wbgf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Wbgf";
        exchange.mic(ExchangeMic::Xceg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xceg";
        exchange.mic(ExchangeMic::Xvie);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xvie";
        exchange.mic(ExchangeMic::Bsex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bsex";
        exchange.mic(ExchangeMic::Xibe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xibe";
        exchange.mic(ExchangeMic::Xbaa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbaa";
        exchange.mic(ExchangeMic::Bfex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bfex";
        exchange.mic(ExchangeMic::Xbah);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbah";
        exchange.mic(ExchangeMic::Xchg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xchg";
        exchange.mic(ExchangeMic::Xdha);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdha";
        exchange.mic(ExchangeMic::Xbab);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbab";
        exchange.mic(ExchangeMic::Bajm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bajm";
        exchange.mic(ExchangeMic::Bcse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bcse";
        exchange.mic(ExchangeMic::Blpx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Blpx";
        exchange.mic(ExchangeMic::Bmts);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bmts";
        exchange.mic(ExchangeMic::Mtsd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtsd";
        exchange.mic(ExchangeMic::Mtsf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtsf";
        exchange.mic(ExchangeMic::Xbda);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbda";
        exchange.mic(ExchangeMic::Xbol);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbol";
        exchange.mic(ExchangeMic::Xblb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xblb";
        exchange.mic(ExchangeMic::Blbf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Blbf";
        exchange.mic(ExchangeMic::Xsse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsse";
        exchange.mic(ExchangeMic::Xbot);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbot";
        exchange.mic(ExchangeMic::Bote);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bote";
        exchange.mic(ExchangeMic::Botv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Botv";
        exchange.mic(ExchangeMic::Bcmm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bcmm";
        exchange.mic(ExchangeMic::Bovm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bovm";
        exchange.mic(ExchangeMic::Brix);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Brix";
        exchange.mic(ExchangeMic::Bvmf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bvmf";
        exchange.mic(ExchangeMic::Ceti);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ceti";
        exchange.mic(ExchangeMic::Selc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Selc";
        exchange.mic(ExchangeMic::Ibex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ibex";
        exchange.mic(ExchangeMic::Xbul);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbul";
        exchange.mic(ExchangeMic::Xcsx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcsx";
        exchange.mic(ExchangeMic::Xdsx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdsx";
        exchange.mic(ExchangeMic::Canx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Canx";
        exchange.mic(ExchangeMic::Chic);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Chic";
        exchange.mic(ExchangeMic::Xcx2);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcx2";
        exchange.mic(ExchangeMic::Cotc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cotc";
        exchange.mic(ExchangeMic::Ifca);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ifca";
        exchange.mic(ExchangeMic::Ivzx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ivzx";
        exchange.mic(ExchangeMic::Lica);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lica";
        exchange.mic(ExchangeMic::Matn);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Matn";
        exchange.mic(ExchangeMic::Neoe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Neoe";
        exchange.mic(ExchangeMic::Ngxc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ngxc";
        exchange.mic(ExchangeMic::Omga);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Omga";
        exchange.mic(ExchangeMic::Lynx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lynx";
        exchange.mic(ExchangeMic::Tmxs);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tmxs";
        exchange.mic(ExchangeMic::Xats);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xats";
        exchange.mic(ExchangeMic::Xbbk);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbbk";
        exchange.mic(ExchangeMic::Xcnq);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcnq";
        exchange.mic(ExchangeMic::Pure);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pure";
        exchange.mic(ExchangeMic::Xicx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xicx";
        exchange.mic(ExchangeMic::Xmoc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmoc";
        exchange.mic(ExchangeMic::Xmod);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmod";
        exchange.mic(ExchangeMic::Xtse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtse";
        exchange.mic(ExchangeMic::Xtsx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtsx";
        exchange.mic(ExchangeMic::Xtnx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtnx";
        exchange.mic(ExchangeMic::Xbvc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbvc";
        exchange.mic(ExchangeMic::Xcay);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcay";
        exchange.mic(ExchangeMic::Bova);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bova";
        exchange.mic(ExchangeMic::Xbcl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbcl";
        exchange.mic(ExchangeMic::Xsgo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsgo";
        exchange.mic(ExchangeMic::Ccfx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ccfx";
        exchange.mic(ExchangeMic::Cssx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cssx";
        exchange.mic(ExchangeMic::Sgex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Sgex";
        exchange.mic(ExchangeMic::Xcfe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcfe";
        exchange.mic(ExchangeMic::Xdce);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdce";
        exchange.mic(ExchangeMic::Xsge);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsge";
        exchange.mic(ExchangeMic::Xine);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xine";
        exchange.mic(ExchangeMic::Xshe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xshe";
        exchange.mic(ExchangeMic::Xsec);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsec";
        exchange.mic(ExchangeMic::Xshg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xshg";
        exchange.mic(ExchangeMic::Xssc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xssc";
        exchange.mic(ExchangeMic::Xzce);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xzce";
        exchange.mic(ExchangeMic::Xbog);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbog";
        exchange.mic(ExchangeMic::Xbnv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbnv";
        exchange.mic(ExchangeMic::Xcro);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcro";
        exchange.mic(ExchangeMic::Xtrz);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtrz";
        exchange.mic(ExchangeMic::Xzag);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xzag";
        exchange.mic(ExchangeMic::Xzam);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xzam";
        exchange.mic(ExchangeMic::Dcsx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dcsx";
        exchange.mic(ExchangeMic::Xcys);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcys";
        exchange.mic(ExchangeMic::Xcyo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcyo";
        exchange.mic(ExchangeMic::Xecm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xecm";
        exchange.mic(ExchangeMic::Xpra);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpra";
        exchange.mic(ExchangeMic::Xprm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xprm";
        exchange.mic(ExchangeMic::Xpxe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpxe";
        exchange.mic(ExchangeMic::Xrmz);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xrmz";
        exchange.mic(ExchangeMic::Xrmo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xrmo";
        exchange.mic(ExchangeMic::Dktc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dktc";
        exchange.mic(ExchangeMic::Gxgr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gxgr";
        exchange.mic(ExchangeMic::Gxgf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gxgf";
        exchange.mic(ExchangeMic::Gxgm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gxgm";
        exchange.mic(ExchangeMic::Npga);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Npga";
        exchange.mic(ExchangeMic::Xcse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcse";
        exchange.mic(ExchangeMic::Dcse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dcse";
        exchange.mic(ExchangeMic::Dndk);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dndk";
        exchange.mic(ExchangeMic::Fndk);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fndk";
        exchange.mic(ExchangeMic::Xbvr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbvr";
        exchange.mic(ExchangeMic::Xgua);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xgua";
        exchange.mic(ExchangeMic::Xqui);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xqui";
        exchange.mic(ExchangeMic::Nilx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nilx";
        exchange.mic(ExchangeMic::Xcai);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcai";
        exchange.mic(ExchangeMic::Xsva);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsva";
        exchange.mic(ExchangeMic::Xtal);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtal";
        exchange.mic(ExchangeMic::Fnee);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fnee";
        exchange.mic(ExchangeMic::Vmfx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Vmfx";
        exchange.mic(ExchangeMic::Xsps);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsps";
        exchange.mic(ExchangeMic::Fgex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fgex";
        exchange.mic(ExchangeMic::Xhel);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xhel";
        exchange.mic(ExchangeMic::Dhel);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dhel";
        exchange.mic(ExchangeMic::Dnfi);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dnfi";
        exchange.mic(ExchangeMic::Fnfi);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fnfi";
        exchange.mic(ExchangeMic::Coal);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Coal";
        exchange.mic(ExchangeMic::Epex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Epex";
        exchange.mic(ExchangeMic::Fmts);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fmts";
        exchange.mic(ExchangeMic::Gmtf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gmtf";
        exchange.mic(ExchangeMic::Lchc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lchc";
        exchange.mic(ExchangeMic::Xafr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xafr";
        exchange.mic(ExchangeMic::Xbln);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbln";
        exchange.mic(ExchangeMic::Mtch);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtch";
        exchange.mic(ExchangeMic::Xpow);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpow";
        exchange.mic(ExchangeMic::Xpsf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpsf";
        exchange.mic(ExchangeMic::Xgse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xgse";
        exchange.mic(ExchangeMic::X360T);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "X360T";
        exchange.mic(ExchangeMic::Cats);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cats";
        exchange.mic(ExchangeMic::Dbox);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dbox";
        exchange.mic(ExchangeMic::Auto);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Auto";
        exchange.mic(ExchangeMic::Tgat);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tgat";
        exchange.mic(ExchangeMic::Xgat);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xgat";
        exchange.mic(ExchangeMic::Xgrm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xgrm";
        exchange.mic(ExchangeMic::Xber);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xber";
        exchange.mic(ExchangeMic::Bera);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bera";
        exchange.mic(ExchangeMic::Berb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Berb";
        exchange.mic(ExchangeMic::Berc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Berc";
        exchange.mic(ExchangeMic::Eqta);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Eqta";
        exchange.mic(ExchangeMic::Eqtb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Eqtb";
        exchange.mic(ExchangeMic::Eqtc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Eqtc";
        exchange.mic(ExchangeMic::Eqtd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Eqtd";
        exchange.mic(ExchangeMic::Xeqt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xeqt";
        exchange.mic(ExchangeMic::Zobx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Zobx";
        exchange.mic(ExchangeMic::Xdus);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdus";
        exchange.mic(ExchangeMic::Dusa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dusa";
        exchange.mic(ExchangeMic::Dusb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dusb";
        exchange.mic(ExchangeMic::Dusc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dusc";
        exchange.mic(ExchangeMic::Dusd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dusd";
        exchange.mic(ExchangeMic::Xqtx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xqtx";
        exchange.mic(ExchangeMic::Xecb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xecb";
        exchange.mic(ExchangeMic::Xecc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xecc";
        exchange.mic(ExchangeMic::Xeee);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xeee";
        exchange.mic(ExchangeMic::Xeeo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xeeo";
        exchange.mic(ExchangeMic::Xeer);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xeer";
        exchange.mic(ExchangeMic::Xeum);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xeum";
        exchange.mic(ExchangeMic::Xeur);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xeur";
        exchange.mic(ExchangeMic::Ecag);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ecag";
        exchange.mic(ExchangeMic::Xere);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xere";
        exchange.mic(ExchangeMic::Xert);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xert";
        exchange.mic(ExchangeMic::Xeub);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xeub";
        exchange.mic(ExchangeMic::Xeup);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xeup";
        exchange.mic(ExchangeMic::Xfra);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xfra";
        exchange.mic(ExchangeMic::Fraa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fraa";
        exchange.mic(ExchangeMic::Frab);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Frab";
        exchange.mic(ExchangeMic::Frad);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Frad";
        exchange.mic(ExchangeMic::Xdbc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdbc";
        exchange.mic(ExchangeMic::Xdbv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdbv";
        exchange.mic(ExchangeMic::Xdbx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdbx";
        exchange.mic(ExchangeMic::Xeta);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xeta";
        exchange.mic(ExchangeMic::Xetb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xetb";
        exchange.mic(ExchangeMic::Xetr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xetr";
        exchange.mic(ExchangeMic::Xnew);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnew";
        exchange.mic(ExchangeMic::Xham);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xham";
        exchange.mic(ExchangeMic::Hama);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hama";
        exchange.mic(ExchangeMic::Hamb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hamb";
        exchange.mic(ExchangeMic::Xhan);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xhan";
        exchange.mic(ExchangeMic::Hana);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hana";
        exchange.mic(ExchangeMic::Hanb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hanb";
        exchange.mic(ExchangeMic::Xinv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xinv";
        exchange.mic(ExchangeMic::Xmun);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmun";
        exchange.mic(ExchangeMic::Muna);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Muna";
        exchange.mic(ExchangeMic::Munb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Munb";
        exchange.mic(ExchangeMic::Munc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Munc";
        exchange.mic(ExchangeMic::Mund);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mund";
        exchange.mic(ExchangeMic::Xsco);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsco";
        exchange.mic(ExchangeMic::Xsc1);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsc1";
        exchange.mic(ExchangeMic::Xsc2);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsc2";
        exchange.mic(ExchangeMic::Xsc3);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsc3";
        exchange.mic(ExchangeMic::Xstu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xstu";
        exchange.mic(ExchangeMic::Euwx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Euwx";
        exchange.mic(ExchangeMic::Stua);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Stua";
        exchange.mic(ExchangeMic::Stub);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Stub";
        exchange.mic(ExchangeMic::Xxsc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xxsc";
        exchange.mic(ExchangeMic::Xgha);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xgha";
        exchange.mic(ExchangeMic::Gsxl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gsxl";
        exchange.mic(ExchangeMic::Asex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Asex";
        exchange.mic(ExchangeMic::Enax);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Enax";
        exchange.mic(ExchangeMic::Euax);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Euax";
        exchange.mic(ExchangeMic::Hotc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hotc";
        exchange.mic(ExchangeMic::Xade);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xade";
        exchange.mic(ExchangeMic::Xath);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xath";
        exchange.mic(ExchangeMic::Xipo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xipo";
        exchange.mic(ExchangeMic::Hdat);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hdat";
        exchange.mic(ExchangeMic::Hemo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hemo";
        exchange.mic(ExchangeMic::Xgtg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xgtg";
        exchange.mic(ExchangeMic::Xcie);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcie";
        exchange.mic(ExchangeMic::Gsci);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gsci";
        exchange.mic(ExchangeMic::Xbcv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbcv";
        exchange.mic(ExchangeMic::Cgmh);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cgmh";
        exchange.mic(ExchangeMic::Clhk);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Clhk";
        exchange.mic(ExchangeMic::Cshk);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cshk";
        exchange.mic(ExchangeMic::Cfhk);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cfhk";
        exchange.mic(ExchangeMic::Dbhk);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dbhk";
        exchange.mic(ExchangeMic::Eotc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Eotc";
        exchange.mic(ExchangeMic::Hsxa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hsxa";
        exchange.mic(ExchangeMic::Maqh);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Maqh";
        exchange.mic(ExchangeMic::Sigh);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Sigh";
        exchange.mic(ExchangeMic::Tocp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tocp";
        exchange.mic(ExchangeMic::Ubsx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ubsx";
        exchange.mic(ExchangeMic::Xcgs);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcgs";
        exchange.mic(ExchangeMic::Xhkf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xhkf";
        exchange.mic(ExchangeMic::Xhkg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xhkg";
        exchange.mic(ExchangeMic::Shsc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Shsc";
        exchange.mic(ExchangeMic::Xgem);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xgem";
        exchange.mic(ExchangeMic::Xihk);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xihk";
        exchange.mic(ExchangeMic::Xpst);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpst";
        exchange.mic(ExchangeMic::Beta);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Beta";
        exchange.mic(ExchangeMic::Hupx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hupx";
        exchange.mic(ExchangeMic::Kccp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Kccp";
        exchange.mic(ExchangeMic::Xbud);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbud";
        exchange.mic(ExchangeMic::Xgas);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xgas";
        exchange.mic(ExchangeMic::Xice);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xice";
        exchange.mic(ExchangeMic::Dice);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dice";
        exchange.mic(ExchangeMic::Dnis);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dnis";
        exchange.mic(ExchangeMic::Fnis);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fnis";
        exchange.mic(ExchangeMic::Acex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Acex";
        exchange.mic(ExchangeMic::Cdsl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cdsl";
        exchange.mic(ExchangeMic::Icxl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Icxl";
        exchange.mic(ExchangeMic::Isex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Isex";
        exchange.mic(ExchangeMic::Mcxx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mcxx";
        exchange.mic(ExchangeMic::Nbot);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nbot";
        exchange.mic(ExchangeMic::Nmce);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nmce";
        exchange.mic(ExchangeMic::Otcx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Otcx";
        exchange.mic(ExchangeMic::Pxil);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pxil";
        exchange.mic(ExchangeMic::Xban);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xban";
        exchange.mic(ExchangeMic::Xbom);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbom";
        exchange.mic(ExchangeMic::Bsme);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bsme";
        exchange.mic(ExchangeMic::Xcal);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcal";
        exchange.mic(ExchangeMic::Xdes);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdes";
        exchange.mic(ExchangeMic::Ximc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ximc";
        exchange.mic(ExchangeMic::Xmds);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmds";
        exchange.mic(ExchangeMic::Xncd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xncd";
        exchange.mic(ExchangeMic::Xnse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnse";
        exchange.mic(ExchangeMic::Xuse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xuse";
        exchange.mic(ExchangeMic::Icdx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Icdx";
        exchange.mic(ExchangeMic::Xbbj);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbbj";
        exchange.mic(ExchangeMic::Xidx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xidx";
        exchange.mic(ExchangeMic::Xjnb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xjnb";
        exchange.mic(ExchangeMic::Imex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Imex";
        exchange.mic(ExchangeMic::Xteh);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xteh";
        exchange.mic(ExchangeMic::Xiqs);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xiqs";
        exchange.mic(ExchangeMic::Xpos);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpos";
        exchange.mic(ExchangeMic::Xcde);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcde";
        exchange.mic(ExchangeMic::Xdub);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdub";
        exchange.mic(ExchangeMic::Xatl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xatl";
        exchange.mic(ExchangeMic::Xesm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xesm";
        exchange.mic(ExchangeMic::Xeye);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xeye";
        exchange.mic(ExchangeMic::Xmsm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmsm";
        exchange.mic(ExchangeMic::Xebi);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xebi";
        exchange.mic(ExchangeMic::Xtae);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtae";
        exchange.mic(ExchangeMic::Cgit);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cgit";
        exchange.mic(ExchangeMic::Cgcm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cgcm";
        exchange.mic(ExchangeMic::Cgdb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cgdb";
        exchange.mic(ExchangeMic::Cgeb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cgeb";
        exchange.mic(ExchangeMic::Cggd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cggd";
        exchange.mic(ExchangeMic::Cgnd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cgnd";
        exchange.mic(ExchangeMic::Cgqd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cgqd";
        exchange.mic(ExchangeMic::Cgqt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cgqt";
        exchange.mic(ExchangeMic::Cgtr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cgtr";
        exchange.mic(ExchangeMic::Emid);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Emid";
        exchange.mic(ExchangeMic::Emdr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Emdr";
        exchange.mic(ExchangeMic::Emir);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Emir";
        exchange.mic(ExchangeMic::Etlx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Etlx";
        exchange.mic(ExchangeMic::Hmtf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hmtf";
        exchange.mic(ExchangeMic::Hmod);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hmod";
        exchange.mic(ExchangeMic::Mtsc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtsc";
        exchange.mic(ExchangeMic::Bond);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bond";
        exchange.mic(ExchangeMic::Mtsm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtsm";
        exchange.mic(ExchangeMic::Ssob);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ssob";
        exchange.mic(ExchangeMic::Xgme);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xgme";
        exchange.mic(ExchangeMic::Xmil);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmil";
        exchange.mic(ExchangeMic::Etfp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Etfp";
        exchange.mic(ExchangeMic::Mivx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mivx";
        exchange.mic(ExchangeMic::Motx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Motx";
        exchange.mic(ExchangeMic::Mtaa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtaa";
        exchange.mic(ExchangeMic::Mtah);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtah";
        exchange.mic(ExchangeMic::Sedx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Sedx";
        exchange.mic(ExchangeMic::Xaim);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xaim";
        exchange.mic(ExchangeMic::Xdmi);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdmi";
        exchange.mic(ExchangeMic::Xmot);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmot";
        exchange.mic(ExchangeMic::Xbrv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbrv";
        exchange.mic(ExchangeMic::Xjam);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xjam";
        exchange.mic(ExchangeMic::Betp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Betp";
        exchange.mic(ExchangeMic::Chij);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Chij";
        exchange.mic(ExchangeMic::Chis);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Chis";
        exchange.mic(ExchangeMic::Chiv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Chiv";
        exchange.mic(ExchangeMic::Citx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Citx";
        exchange.mic(ExchangeMic::Citd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Citd";
        exchange.mic(ExchangeMic::Cljp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cljp";
        exchange.mic(ExchangeMic::Cmet);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cmet";
        exchange.mic(ExchangeMic::Csjp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Csjp";
        exchange.mic(ExchangeMic::Cfjp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cfjp";
        exchange.mic(ExchangeMic::Drct);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Drct";
        exchange.mic(ExchangeMic::Lxjp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lxjp";
        exchange.mic(ExchangeMic::Maqj);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Maqj";
        exchange.mic(ExchangeMic::Mizx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mizx";
        exchange.mic(ExchangeMic::Msms);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Msms";
        exchange.mic(ExchangeMic::Nmrj);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nmrj";
        exchange.mic(ExchangeMic::Nxjp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nxjp";
        exchange.mic(ExchangeMic::Nxse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nxse";
        exchange.mic(ExchangeMic::Nxvw);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nxvw";
        exchange.mic(ExchangeMic::Sbij);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Sbij";
        exchange.mic(ExchangeMic::Sbiu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Sbiu";
        exchange.mic(ExchangeMic::Sbiv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Sbiv";
        exchange.mic(ExchangeMic::Xsbi);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsbi";
        exchange.mic(ExchangeMic::Sigj);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Sigj";
        exchange.mic(ExchangeMic::Xfka);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xfka";
        exchange.mic(ExchangeMic::Xijp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xijp";
        exchange.mic(ExchangeMic::Jasr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Jasr";
        exchange.mic(ExchangeMic::Xjpx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xjpx";
        exchange.mic(ExchangeMic::Xjas);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xjas";
        exchange.mic(ExchangeMic::Xose);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xose";
        exchange.mic(ExchangeMic::Xosj);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xosj";
        exchange.mic(ExchangeMic::Xtam);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtam";
        exchange.mic(ExchangeMic::Xtk1);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtk1";
        exchange.mic(ExchangeMic::Xtk2);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtk2";
        exchange.mic(ExchangeMic::Xtk3);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtk3";
        exchange.mic(ExchangeMic::Xtks);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtks";
        exchange.mic(ExchangeMic::Xkac);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkac";
        exchange.mic(ExchangeMic::Xngo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xngo";
        exchange.mic(ExchangeMic::Xnks);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnks";
        exchange.mic(ExchangeMic::Xsap);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsap";
        exchange.mic(ExchangeMic::Xtff);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtff";
        exchange.mic(ExchangeMic::Xtkt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtkt";
        exchange.mic(ExchangeMic::Xamm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xamm";
        exchange.mic(ExchangeMic::Etsc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Etsc";
        exchange.mic(ExchangeMic::Xkaz);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkaz";
        exchange.mic(ExchangeMic::Xnai);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnai";
        exchange.mic(ExchangeMic::Xkfb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkfb";
        exchange.mic(ExchangeMic::Xkrx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkrx";
        exchange.mic(ExchangeMic::Xkcm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkcm";
        exchange.mic(ExchangeMic::Xkem);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkem";
        exchange.mic(ExchangeMic::Xkfe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkfe";
        exchange.mic(ExchangeMic::Xkon);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkon";
        exchange.mic(ExchangeMic::Xkos);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkos";
        exchange.mic(ExchangeMic::Xkuw);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkuw";
        exchange.mic(ExchangeMic::Xkse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkse";
        exchange.mic(ExchangeMic::Xlao);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlao";
        exchange.mic(ExchangeMic::Xris);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xris";
        exchange.mic(ExchangeMic::Fnlv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fnlv";
        exchange.mic(ExchangeMic::Xbey);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbey";
        exchange.mic(ExchangeMic::Xlsm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlsm";
        exchange.mic(ExchangeMic::Bapx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bapx";
        exchange.mic(ExchangeMic::Getb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Getb";
        exchange.mic(ExchangeMic::Xlit);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlit";
        exchange.mic(ExchangeMic::Fnlt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fnlt";
        exchange.mic(ExchangeMic::Cclx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cclx";
        exchange.mic(ExchangeMic::Xlux);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlux";
        exchange.mic(ExchangeMic::Emtf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Emtf";
        exchange.mic(ExchangeMic::Xves);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xves";
        exchange.mic(ExchangeMic::Xmae);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmae";
        exchange.mic(ExchangeMic::Xmdg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmdg";
        exchange.mic(ExchangeMic::Xmsw);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmsw";
        exchange.mic(ExchangeMic::Xkls);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkls";
        exchange.mic(ExchangeMic::Mesq);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mesq";
        exchange.mic(ExchangeMic::Xlfx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlfx";
        exchange.mic(ExchangeMic::Xrbm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xrbm";
        exchange.mic(ExchangeMic::Malx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Malx";
        exchange.mic(ExchangeMic::Ewsm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ewsm";
        exchange.mic(ExchangeMic::Xmal);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmal";
        exchange.mic(ExchangeMic::Gbot);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gbot";
        exchange.mic(ExchangeMic::Xafx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xafx";
        exchange.mic(ExchangeMic::Xmau);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmau";
        exchange.mic(ExchangeMic::Cgmx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cgmx";
        exchange.mic(ExchangeMic::Xemd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xemd";
        exchange.mic(ExchangeMic::Xmex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmex";
        exchange.mic(ExchangeMic::Xmol);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmol";
        exchange.mic(ExchangeMic::Xula);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xula";
        exchange.mic(ExchangeMic::Xmnx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmnx";
        exchange.mic(ExchangeMic::Xcas);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcas";
        exchange.mic(ExchangeMic::Xbvm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbvm";
        exchange.mic(ExchangeMic::Xnam);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnam";
        exchange.mic(ExchangeMic::Xnep);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnep";
        exchange.mic(ExchangeMic::Nzfx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nzfx";
        exchange.mic(ExchangeMic::Xnze);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnze";
        exchange.mic(ExchangeMic::Xman);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xman";
        exchange.mic(ExchangeMic::Nasx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nasx";
        exchange.mic(ExchangeMic::Xnsa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnsa";
        exchange.mic(ExchangeMic::Fish);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fish";
        exchange.mic(ExchangeMic::Fshx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fshx";
        exchange.mic(ExchangeMic::Icas);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Icas";
        exchange.mic(ExchangeMic::Nexo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nexo";
        exchange.mic(ExchangeMic::Nops);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nops";
        exchange.mic(ExchangeMic::Norx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Norx";
        exchange.mic(ExchangeMic::Nosc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nosc";
        exchange.mic(ExchangeMic::Notc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Notc";
        exchange.mic(ExchangeMic::Oslc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Oslc";
        exchange.mic(ExchangeMic::Xima);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xima";
        exchange.mic(ExchangeMic::Xosl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xosl";
        exchange.mic(ExchangeMic::Merd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Merd";
        exchange.mic(ExchangeMic::Merk);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Merk";
        exchange.mic(ExchangeMic::Nibr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nibr";
        exchange.mic(ExchangeMic::Xoad);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xoad";
        exchange.mic(ExchangeMic::Xoam);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xoam";
        exchange.mic(ExchangeMic::Xoas);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xoas";
        exchange.mic(ExchangeMic::Xosc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xosc";
        exchange.mic(ExchangeMic::Xosd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xosd";
        exchange.mic(ExchangeMic::Xmus);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmus";
        exchange.mic(ExchangeMic::Ncel);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ncel";
        exchange.mic(ExchangeMic::Xisl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xisl";
        exchange.mic(ExchangeMic::Xkar);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkar";
        exchange.mic(ExchangeMic::Xlah);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlah";
        exchange.mic(ExchangeMic::Xpae);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpae";
        exchange.mic(ExchangeMic::Xpty);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpty";
        exchange.mic(ExchangeMic::Xpom);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpom";
        exchange.mic(ExchangeMic::Xvpa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xvpa";
        exchange.mic(ExchangeMic::Xlim);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlim";
        exchange.mic(ExchangeMic::Clph);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Clph";
        exchange.mic(ExchangeMic::Pdex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pdex";
        exchange.mic(ExchangeMic::Xphs);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xphs";
        exchange.mic(ExchangeMic::Kdpw);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Kdpw";
        exchange.mic(ExchangeMic::Xwar);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xwar";
        exchange.mic(ExchangeMic::Bosp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bosp";
        exchange.mic(ExchangeMic::Plpd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Plpd";
        exchange.mic(ExchangeMic::Plpx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Plpx";
        exchange.mic(ExchangeMic::Rpwc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Rpwc";
        exchange.mic(ExchangeMic::Tbsp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tbsp";
        exchange.mic(ExchangeMic::Wbcl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Wbcl";
        exchange.mic(ExchangeMic::Wbon);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Wbon";
        exchange.mic(ExchangeMic::Wder);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Wder";
        exchange.mic(ExchangeMic::Wetp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Wetp";
        exchange.mic(ExchangeMic::Wgas);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Wgas";
        exchange.mic(ExchangeMic::Wind);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Wind";
        exchange.mic(ExchangeMic::Wmtf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Wmtf";
        exchange.mic(ExchangeMic::Xnco);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnco";
        exchange.mic(ExchangeMic::Omic);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Omic";
        exchange.mic(ExchangeMic::Opex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Opex";
        exchange.mic(ExchangeMic::Omip);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Omip";
        exchange.mic(ExchangeMic::Dsmd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dsmd";
        exchange.mic(ExchangeMic::Trpx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Trpx";
        exchange.mic(ExchangeMic::Bmfx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bmfx";
        exchange.mic(ExchangeMic::Bmfa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bmfa";
        exchange.mic(ExchangeMic::Bmfm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bmfm";
        exchange.mic(ExchangeMic::Sbmf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Sbmf";
        exchange.mic(ExchangeMic::Xbrm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbrm";
        exchange.mic(ExchangeMic::Xbse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbse";
        exchange.mic(ExchangeMic::Xbsd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbsd";
        exchange.mic(ExchangeMic::Xcan);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcan";
        exchange.mic(ExchangeMic::Xras);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xras";
        exchange.mic(ExchangeMic::Xrpm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xrpm";
        exchange.mic(ExchangeMic::Misx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Misx";
        exchange.mic(ExchangeMic::Rtsx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Rtsx";
        exchange.mic(ExchangeMic::Namx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Namx";
        exchange.mic(ExchangeMic::Rpdx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Rpdx";
        exchange.mic(ExchangeMic::Rusx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Rusx";
        exchange.mic(ExchangeMic::Spim);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Spim";
        exchange.mic(ExchangeMic::Xmos);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmos";
        exchange.mic(ExchangeMic::Xpet);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpet";
        exchange.mic(ExchangeMic::Xpic);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpic";
        exchange.mic(ExchangeMic::Xrus);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xrus";
        exchange.mic(ExchangeMic::Xsam);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsam";
        exchange.mic(ExchangeMic::Xsib);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsib";
        exchange.mic(ExchangeMic::Rotc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Rotc";
        exchange.mic(ExchangeMic::Rsex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Rsex";
        exchange.mic(ExchangeMic::Xecs);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xecs";
        exchange.mic(ExchangeMic::Xsau);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsau";
        exchange.mic(ExchangeMic::Xbel);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbel";
        exchange.mic(ExchangeMic::Cltd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cltd";
        exchange.mic(ExchangeMic::Ecal);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ecal";
        exchange.mic(ExchangeMic::Eeal);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Eeal";
        exchange.mic(ExchangeMic::Ifsg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ifsg";
        exchange.mic(ExchangeMic::Jadx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Jadx";
        exchange.mic(ExchangeMic::Smex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Smex";
        exchange.mic(ExchangeMic::Tfsa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tfsa";
        exchange.mic(ExchangeMic::Xses);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xses";
        exchange.mic(ExchangeMic::Xsca);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsca";
        exchange.mic(ExchangeMic::Xsce);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsce";
        exchange.mic(ExchangeMic::Xsim);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsim";
        exchange.mic(ExchangeMic::Spxe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Spxe";
        exchange.mic(ExchangeMic::Xbra);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbra";
        exchange.mic(ExchangeMic::Xlju);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlju";
        exchange.mic(ExchangeMic::Xsop);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsop";
        exchange.mic(ExchangeMic::Xjse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xjse";
        exchange.mic(ExchangeMic::Altx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Altx";
        exchange.mic(ExchangeMic::Xbes);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbes";
        exchange.mic(ExchangeMic::Xsaf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsaf";
        exchange.mic(ExchangeMic::Xsfa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsfa";
        exchange.mic(ExchangeMic::Yldx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Yldx";
        exchange.mic(ExchangeMic::Bmex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bmex";
        exchange.mic(ExchangeMic::Bmcl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bmcl";
        exchange.mic(ExchangeMic::Mabx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mabx";
        exchange.mic(ExchangeMic::Marf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Marf";
        exchange.mic(ExchangeMic::Merf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Merf";
        exchange.mic(ExchangeMic::Send);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Send";
        exchange.mic(ExchangeMic::Xbar);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbar";
        exchange.mic(ExchangeMic::Xbil);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbil";
        exchange.mic(ExchangeMic::Xdrf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdrf";
        exchange.mic(ExchangeMic::Xlat);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlat";
        exchange.mic(ExchangeMic::Xmad);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmad";
        exchange.mic(ExchangeMic::Xmce);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmce";
        exchange.mic(ExchangeMic::Xmpw);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmpw";
        exchange.mic(ExchangeMic::Xmrv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmrv";
        exchange.mic(ExchangeMic::Xval);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xval";
        exchange.mic(ExchangeMic::Ibgh);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ibgh";
        exchange.mic(ExchangeMic::Mibg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mibg";
        exchange.mic(ExchangeMic::Omel);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Omel";
        exchange.mic(ExchangeMic::Pave);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pave";
        exchange.mic(ExchangeMic::Xdpa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdpa";
        exchange.mic(ExchangeMic::Xnaf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnaf";
        exchange.mic(ExchangeMic::Xsrm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsrm";
        exchange.mic(ExchangeMic::Xcol);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcol";
        exchange.mic(ExchangeMic::Xkha);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkha";
        exchange.mic(ExchangeMic::Xswa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xswa";
        exchange.mic(ExchangeMic::Cryd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cryd";
        exchange.mic(ExchangeMic::Cryx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cryx";
        exchange.mic(ExchangeMic::Sebx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Sebx";
        exchange.mic(ExchangeMic::Ensx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ensx";
        exchange.mic(ExchangeMic::Xngm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xngm";
        exchange.mic(ExchangeMic::Nmtf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nmtf";
        exchange.mic(ExchangeMic::Xndx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xndx";
        exchange.mic(ExchangeMic::Xnmr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnmr";
        exchange.mic(ExchangeMic::Xsat);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsat";
        exchange.mic(ExchangeMic::Xsto);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsto";
        exchange.mic(ExchangeMic::Csto);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Csto";
        exchange.mic(ExchangeMic::Dnse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dnse";
        exchange.mic(ExchangeMic::Dsto);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dsto";
        exchange.mic(ExchangeMic::Fnse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fnse";
        exchange.mic(ExchangeMic::Xopv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xopv";
        exchange.mic(ExchangeMic::Aixe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Aixe";
        exchange.mic(ExchangeMic::Dots);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dots";
        exchange.mic(ExchangeMic::Euch);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Euch";
        exchange.mic(ExchangeMic::Eurm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Eurm";
        exchange.mic(ExchangeMic::Eusc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Eusc";
        exchange.mic(ExchangeMic::Eusp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Eusp";
        exchange.mic(ExchangeMic::Stox);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Stox";
        exchange.mic(ExchangeMic::Xscu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xscu";
        exchange.mic(ExchangeMic::Xstv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xstv";
        exchange.mic(ExchangeMic::Xstx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xstx";
        exchange.mic(ExchangeMic::Ubsg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ubsg";
        exchange.mic(ExchangeMic::Ubsc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ubsc";
        exchange.mic(ExchangeMic::Ubsf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ubsf";
        exchange.mic(ExchangeMic::Xbrn);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbrn";
        exchange.mic(ExchangeMic::Xswx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xswx";
        exchange.mic(ExchangeMic::Xbtr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbtr";
        exchange.mic(ExchangeMic::Xicb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xicb";
        exchange.mic(ExchangeMic::Xqmh);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xqmh";
        exchange.mic(ExchangeMic::Xvtx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xvtx";
        exchange.mic(ExchangeMic::Zkbx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Zkbx";
        exchange.mic(ExchangeMic::Xdse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdse";
        exchange.mic(ExchangeMic::Roco);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Roco";
        exchange.mic(ExchangeMic::Xtaf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtaf";
        exchange.mic(ExchangeMic::Xtai);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtai";
        exchange.mic(ExchangeMic::Xdar);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdar";
        exchange.mic(ExchangeMic::Afet);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Afet";
        exchange.mic(ExchangeMic::Beex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Beex";
        exchange.mic(ExchangeMic::Tfex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tfex";
        exchange.mic(ExchangeMic::Xbkk);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbkk";
        exchange.mic(ExchangeMic::Xbkf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbkf";
        exchange.mic(ExchangeMic::Xmai);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmai";
        exchange.mic(ExchangeMic::Clmx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Clmx";
        exchange.mic(ExchangeMic::Hchc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hchc";
        exchange.mic(ExchangeMic::Ndex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ndex";
        exchange.mic(ExchangeMic::Ndxs);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ndxs";
        exchange.mic(ExchangeMic::Nlpx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nlpx";
        exchange.mic(ExchangeMic::Tomx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tomx";
        exchange.mic(ExchangeMic::Tomd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tomd";
        exchange.mic(ExchangeMic::Xems);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xems";
        exchange.mic(ExchangeMic::Xhft);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xhft";
        exchange.mic(ExchangeMic::Xtrn);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtrn";
        exchange.mic(ExchangeMic::Xtun);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtun";
        exchange.mic(ExchangeMic::Xist);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xist";
        exchange.mic(ExchangeMic::Xdsm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdsm";
        exchange.mic(ExchangeMic::Xeqy);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xeqy";
        exchange.mic(ExchangeMic::Xfno);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xfno";
        exchange.mic(ExchangeMic::Xpms);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpms";
        exchange.mic(ExchangeMic::Ultx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ultx";
        exchange.mic(ExchangeMic::Xuga);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xuga";
        exchange.mic(ExchangeMic::Eese);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Eese";
        exchange.mic(ExchangeMic::Pfts);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pfts";
        exchange.mic(ExchangeMic::Pftq);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pftq";
        exchange.mic(ExchangeMic::Sepe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Sepe";
        exchange.mic(ExchangeMic::Ukex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ukex";
        exchange.mic(ExchangeMic::Xdfb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdfb";
        exchange.mic(ExchangeMic::Xkhr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkhr";
        exchange.mic(ExchangeMic::Xkie);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkie";
        exchange.mic(ExchangeMic::Xkis);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkis";
        exchange.mic(ExchangeMic::Xode);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xode";
        exchange.mic(ExchangeMic::Xpri);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpri";
        exchange.mic(ExchangeMic::Xuax);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xuax";
        exchange.mic(ExchangeMic::Xukr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xukr";
        exchange.mic(ExchangeMic::Dgcx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dgcx";
        exchange.mic(ExchangeMic::Difx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Difx";
        exchange.mic(ExchangeMic::Dumx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dumx";
        exchange.mic(ExchangeMic::Xads);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xads";
        exchange.mic(ExchangeMic::Xdfm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xdfm";
        exchange.mic(ExchangeMic::Aqxe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Aqxe";
        exchange.mic(ExchangeMic::Balt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Balt";
        exchange.mic(ExchangeMic::Bltx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bltx";
        exchange.mic(ExchangeMic::Bcxe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bcxe";
        exchange.mic(ExchangeMic::Batd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Batd";
        exchange.mic(ExchangeMic::Bate);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bate";
        exchange.mic(ExchangeMic::Batf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Batf";
        exchange.mic(ExchangeMic::Batp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Batp";
        exchange.mic(ExchangeMic::Botc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Botc";
        exchange.mic(ExchangeMic::Chid);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Chid";
        exchange.mic(ExchangeMic::Chio);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Chio";
        exchange.mic(ExchangeMic::Chix);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Chix";
        exchange.mic(ExchangeMic::Bgci);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bgci";
        exchange.mic(ExchangeMic::Bgcb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bgcb";
        exchange.mic(ExchangeMic::Blox);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Blox";
        exchange.mic(ExchangeMic::Bmtf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bmtf";
        exchange.mic(ExchangeMic::Boat);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Boat";
        exchange.mic(ExchangeMic::Bosc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bosc";
        exchange.mic(ExchangeMic::Brnx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Brnx";
        exchange.mic(ExchangeMic::Caze);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Caze";
        exchange.mic(ExchangeMic::Cco2);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cco2";
        exchange.mic(ExchangeMic::Cgme);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cgme";
        exchange.mic(ExchangeMic::Chev);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Chev";
        exchange.mic(ExchangeMic::Blnk);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Blnk";
        exchange.mic(ExchangeMic::Cmee);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cmee";
        exchange.mic(ExchangeMic::Cmec);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cmec";
        exchange.mic(ExchangeMic::Cmed);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cmed";
        exchange.mic(ExchangeMic::Cmmt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cmmt";
        exchange.mic(ExchangeMic::Cseu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cseu";
        exchange.mic(ExchangeMic::Cscf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cscf";
        exchange.mic(ExchangeMic::Dbix);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dbix";
        exchange.mic(ExchangeMic::Dbcr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dbcr";
        exchange.mic(ExchangeMic::Dbcx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dbcx";
        exchange.mic(ExchangeMic::Dbdc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dbdc";
        exchange.mic(ExchangeMic::Dbmo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dbmo";
        exchange.mic(ExchangeMic::Dbse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dbse";
        exchange.mic(ExchangeMic::Encl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Encl";
        exchange.mic(ExchangeMic::Eqld);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Eqld";
        exchange.mic(ExchangeMic::Exeu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Exeu";
        exchange.mic(ExchangeMic::Exbo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Exbo";
        exchange.mic(ExchangeMic::Excp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Excp";
        exchange.mic(ExchangeMic::Exmp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Exmp";
        exchange.mic(ExchangeMic::Exor);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Exor";
        exchange.mic(ExchangeMic::Exsi);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Exsi";
        exchange.mic(ExchangeMic::Exvp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Exvp";
        exchange.mic(ExchangeMic::Fair);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fair";
        exchange.mic(ExchangeMic::Gemx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gemx";
        exchange.mic(ExchangeMic::Gfic);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gfic";
        exchange.mic(ExchangeMic::Gfif);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gfif";
        exchange.mic(ExchangeMic::Gfin);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gfin";
        exchange.mic(ExchangeMic::Gfir);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gfir";
        exchange.mic(ExchangeMic::Gmeg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gmeg";
        exchange.mic(ExchangeMic::Xgcx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xgcx";
        exchange.mic(ExchangeMic::Xgdx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xgdx";
        exchange.mic(ExchangeMic::Xgsx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xgsx";
        exchange.mic(ExchangeMic::Xldx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xldx";
        exchange.mic(ExchangeMic::Grif);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Grif";
        exchange.mic(ExchangeMic::Grse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Grse";
        exchange.mic(ExchangeMic::Hsxe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hsxe";
        exchange.mic(ExchangeMic::Ibal);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ibal";
        exchange.mic(ExchangeMic::Icap);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Icap";
        exchange.mic(ExchangeMic::Btee);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Btee";
        exchange.mic(ExchangeMic::Ebsx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ebsx";
        exchange.mic(ExchangeMic::Icah);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Icah";
        exchange.mic(ExchangeMic::Icen);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Icen";
        exchange.mic(ExchangeMic::Icse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Icse";
        exchange.mic(ExchangeMic::Ictq);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ictq";
        exchange.mic(ExchangeMic::Isdx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Isdx";
        exchange.mic(ExchangeMic::Wclk);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Wclk";
        exchange.mic(ExchangeMic::Ifeu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ifeu";
        exchange.mic(ExchangeMic::Cxrt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cxrt";
        exchange.mic(ExchangeMic::Ifen);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ifen";
        exchange.mic(ExchangeMic::Ifll);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ifll";
        exchange.mic(ExchangeMic::Iflo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Iflo";
        exchange.mic(ExchangeMic::Iflx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Iflx";
        exchange.mic(ExchangeMic::Ifut);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ifut";
        exchange.mic(ExchangeMic::Iswa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Iswa";
        exchange.mic(ExchangeMic::Kleu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Kleu";
        exchange.mic(ExchangeMic::Liqu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Liqu";
        exchange.mic(ExchangeMic::Liqf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Liqf";
        exchange.mic(ExchangeMic::Liqh);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Liqh";
        exchange.mic(ExchangeMic::Lmax);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lmax";
        exchange.mic(ExchangeMic::Lmad);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lmad";
        exchange.mic(ExchangeMic::Lmae);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lmae";
        exchange.mic(ExchangeMic::Lmaf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lmaf";
        exchange.mic(ExchangeMic::Lmao);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lmao";
        exchange.mic(ExchangeMic::Lmec);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lmec";
        exchange.mic(ExchangeMic::Lotc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lotc";
        exchange.mic(ExchangeMic::Pldx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pldx";
        exchange.mic(ExchangeMic::Lppm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lppm";
        exchange.mic(ExchangeMic::Mael);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mael";
        exchange.mic(ExchangeMic::Mfgl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mfgl";
        exchange.mic(ExchangeMic::Mlxn);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mlxn";
        exchange.mic(ExchangeMic::Mlax);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mlax";
        exchange.mic(ExchangeMic::Mleu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mleu";
        exchange.mic(ExchangeMic::Mlve);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mlve";
        exchange.mic(ExchangeMic::Msip);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Msip";
        exchange.mic(ExchangeMic::Mytr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mytr";
        exchange.mic(ExchangeMic::N2Ex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "N2Ex";
        exchange.mic(ExchangeMic::Ndcm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ndcm";
        exchange.mic(ExchangeMic::Noff);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Noff";
        exchange.mic(ExchangeMic::Nuro);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nuro";
        exchange.mic(ExchangeMic::Nurd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nurd";
        exchange.mic(ExchangeMic::Xnlx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnlx";
        exchange.mic(ExchangeMic::Nxeu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nxeu";
        exchange.mic(ExchangeMic::Peel);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Peel";
        exchange.mic(ExchangeMic::Xphx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xphx";
        exchange.mic(ExchangeMic::Xrsp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xrsp";
        exchange.mic(ExchangeMic::Pieu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pieu";
        exchange.mic(ExchangeMic::Pirm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pirm";
        exchange.mic(ExchangeMic::Qwix);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Qwix";
        exchange.mic(ExchangeMic::Rbce);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Rbce";
        exchange.mic(ExchangeMic::Rbsx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Rbsx";
        exchange.mic(ExchangeMic::Rtsl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Rtsl";
        exchange.mic(ExchangeMic::Secf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Secf";
        exchange.mic(ExchangeMic::Sgmx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Sgmx";
        exchange.mic(ExchangeMic::Shar);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Shar";
        exchange.mic(ExchangeMic::Spec);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Spec";
        exchange.mic(ExchangeMic::Sprz);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Sprz";
        exchange.mic(ExchangeMic::Ssex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ssex";
        exchange.mic(ExchangeMic::Swap);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Swap";
        exchange.mic(ExchangeMic::Tfsv);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tfsv";
        exchange.mic(ExchangeMic::Tpie);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tpie";
        exchange.mic(ExchangeMic::Trde);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Trde";
        exchange.mic(ExchangeMic::Dbvx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dbvx";
        exchange.mic(ExchangeMic::Parx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Parx";
        exchange.mic(ExchangeMic::Tcds);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tcds";
        exchange.mic(ExchangeMic::Tfsg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tfsg";
        exchange.mic(ExchangeMic::Trdx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Trdx";
        exchange.mic(ExchangeMic::Vola);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Vola";
        exchange.mic(ExchangeMic::Treu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Treu";
        exchange.mic(ExchangeMic::Trqx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Trqx";
        exchange.mic(ExchangeMic::Trqm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Trqm";
        exchange.mic(ExchangeMic::Ubsl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ubsl";
        exchange.mic(ExchangeMic::Ubse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ubse";
        exchange.mic(ExchangeMic::Ukgd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ukgd";
        exchange.mic(ExchangeMic::Ukpx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ukpx";
        exchange.mic(ExchangeMic::Vega);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Vega";
        exchange.mic(ExchangeMic::Wins);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Wins";
        exchange.mic(ExchangeMic::Xalt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xalt";
        exchange.mic(ExchangeMic::Xcor);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcor";
        exchange.mic(ExchangeMic::Xgcl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xgcl";
        exchange.mic(ExchangeMic::Xlbm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlbm";
        exchange.mic(ExchangeMic::Xlch);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlch";
        exchange.mic(ExchangeMic::Xlme);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlme";
        exchange.mic(ExchangeMic::Xlon);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlon";
        exchange.mic(ExchangeMic::Xlod);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlod";
        exchange.mic(ExchangeMic::Xmts);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmts";
        exchange.mic(ExchangeMic::Amts);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Amts";
        exchange.mic(ExchangeMic::Bvuk);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bvuk";
        exchange.mic(ExchangeMic::Eacm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Eacm";
        exchange.mic(ExchangeMic::Emts);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Emts";
        exchange.mic(ExchangeMic::Gmts);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gmts";
        exchange.mic(ExchangeMic::Hung);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hung";
        exchange.mic(ExchangeMic::Imts);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Imts";
        exchange.mic(ExchangeMic::Mczk);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mczk";
        exchange.mic(ExchangeMic::Mtsa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtsa";
        exchange.mic(ExchangeMic::Mtsg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtsg";
        exchange.mic(ExchangeMic::Mtss);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtss";
        exchange.mic(ExchangeMic::Mtsw);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtsw";
        exchange.mic(ExchangeMic::Port);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Port";
        exchange.mic(ExchangeMic::Prme);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Prme";
        exchange.mic(ExchangeMic::Rmts);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Rmts";
        exchange.mic(ExchangeMic::Smts);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Smts";
        exchange.mic(ExchangeMic::Vmts);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Vmts";
        exchange.mic(ExchangeMic::Xsga);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsga";
        exchange.mic(ExchangeMic::Xsmp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsmp";
        exchange.mic(ExchangeMic::Xswb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xswb";
        exchange.mic(ExchangeMic::Xtup);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtup";
        exchange.mic(ExchangeMic::Tben);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tben";
        exchange.mic(ExchangeMic::Tbla);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tbla";
        exchange.mic(ExchangeMic::Tpcd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tpcd";
        exchange.mic(ExchangeMic::Tpeq);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tpeq";
        exchange.mic(ExchangeMic::Tpfd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tpfd";
        exchange.mic(ExchangeMic::Tpre);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tpre";
        exchange.mic(ExchangeMic::Tpsd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tpsd";
        exchange.mic(ExchangeMic::Tpsp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tpsp";
        exchange.mic(ExchangeMic::Xtpe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xtpe";
        exchange.mic(ExchangeMic::Xubs);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xubs";
        exchange.mic(ExchangeMic::Aats);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Aats";
        exchange.mic(ExchangeMic::Aqua);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Aqua";
        exchange.mic(ExchangeMic::Atdf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Atdf";
        exchange.mic(ExchangeMic::Core);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Core";
        exchange.mic(ExchangeMic::Baml);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Baml";
        exchange.mic(ExchangeMic::Mlco);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mlco";
        exchange.mic(ExchangeMic::Mlvx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mlvx";
        exchange.mic(ExchangeMic::Barx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Barx";
        exchange.mic(ExchangeMic::Bard);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bard";
        exchange.mic(ExchangeMic::Barl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Barl";
        exchange.mic(ExchangeMic::Bcdx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bcdx";
        exchange.mic(ExchangeMic::Bats);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bats";
        exchange.mic(ExchangeMic::Bato);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bato";
        exchange.mic(ExchangeMic::Baty);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Baty";
        exchange.mic(ExchangeMic::Byxd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Byxd";
        exchange.mic(ExchangeMic::Bzxd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bzxd";
        exchange.mic(ExchangeMic::Bbsf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bbsf";
        exchange.mic(ExchangeMic::Bgcf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bgcf";
        exchange.mic(ExchangeMic::Bgcd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bgcd";
        exchange.mic(ExchangeMic::Bids);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bids";
        exchange.mic(ExchangeMic::Bltd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bltd";
        exchange.mic(ExchangeMic::Bpol);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bpol";
        exchange.mic(ExchangeMic::Bndd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bndd";
        exchange.mic(ExchangeMic::Bnyc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bnyc";
        exchange.mic(ExchangeMic::Nyfx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nyfx";
        exchange.mic(ExchangeMic::Vtex);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Vtex";
        exchange.mic(ExchangeMic::Btec);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Btec";
        exchange.mic(ExchangeMic::Icsu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Icsu";
        exchange.mic(ExchangeMic::Cded);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cded";
        exchange.mic(ExchangeMic::Cgmi);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cgmi";
        exchange.mic(ExchangeMic::Cblc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cblc";
        exchange.mic(ExchangeMic::Cgmu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cgmu";
        exchange.mic(ExchangeMic::Cicx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cicx";
        exchange.mic(ExchangeMic::Lqfi);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lqfi";
        exchange.mic(ExchangeMic::Cmsf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cmsf";
        exchange.mic(ExchangeMic::Cred);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cred";
        exchange.mic(ExchangeMic::Caes);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Caes";
        exchange.mic(ExchangeMic::Cslp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cslp";
        exchange.mic(ExchangeMic::Dbsx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dbsx";
        exchange.mic(ExchangeMic::Deal);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Deal";
        exchange.mic(ExchangeMic::Edge);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Edge";
        exchange.mic(ExchangeMic::Eddp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Eddp";
        exchange.mic(ExchangeMic::Edga);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Edga";
        exchange.mic(ExchangeMic::Edgd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Edgd";
        exchange.mic(ExchangeMic::Edgo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Edgo";
        exchange.mic(ExchangeMic::Edgx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Edgx";
        exchange.mic(ExchangeMic::Eris);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Eris";
        exchange.mic(ExchangeMic::Fast);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fast";
        exchange.mic(ExchangeMic::Finr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Finr";
        exchange.mic(ExchangeMic::Finn);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Finn";
        exchange.mic(ExchangeMic::Fino);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fino";
        exchange.mic(ExchangeMic::Finy);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Finy";
        exchange.mic(ExchangeMic::Ootc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ootc";
        exchange.mic(ExchangeMic::Xadf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xadf";
        exchange.mic(ExchangeMic::Fxal);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fxal";
        exchange.mic(ExchangeMic::Fxcm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fxcm";
        exchange.mic(ExchangeMic::G1xx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "G1xx";
        exchange.mic(ExchangeMic::Gllc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gllc";
        exchange.mic(ExchangeMic::Glps);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Glps";
        exchange.mic(ExchangeMic::Govx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Govx";
        exchange.mic(ExchangeMic::Gree);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gree";
        exchange.mic(ExchangeMic::Gsef);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gsef";
        exchange.mic(ExchangeMic::Gtco);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gtco";
        exchange.mic(ExchangeMic::Hegx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hegx";
        exchange.mic(ExchangeMic::Hppo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hppo";
        exchange.mic(ExchangeMic::Hsfx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hsfx";
        exchange.mic(ExchangeMic::Icel);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Icel";
        exchange.mic(ExchangeMic::Iexg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Iexg";
        exchange.mic(ExchangeMic::Ifus);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ifus";
        exchange.mic(ExchangeMic::Ices);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ices";
        exchange.mic(ExchangeMic::Iepa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Iepa";
        exchange.mic(ExchangeMic::Ifed);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ifed";
        exchange.mic(ExchangeMic::Imag);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Imag";
        exchange.mic(ExchangeMic::Imbd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Imbd";
        exchange.mic(ExchangeMic::Imcc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Imcc";
        exchange.mic(ExchangeMic::Imcg);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Imcg";
        exchange.mic(ExchangeMic::Imco);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Imco";
        exchange.mic(ExchangeMic::Imcr);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Imcr";
        exchange.mic(ExchangeMic::Imen);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Imen";
        exchange.mic(ExchangeMic::Imeq);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Imeq";
        exchange.mic(ExchangeMic::Imfx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Imfx";
        exchange.mic(ExchangeMic::Imir);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Imir";
        exchange.mic(ExchangeMic::Isda);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Isda";
        exchange.mic(ExchangeMic::Itgi);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Itgi";
        exchange.mic(ExchangeMic::Jefx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Jefx";
        exchange.mic(ExchangeMic::Jpmx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Jpmx";
        exchange.mic(ExchangeMic::Jsef);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Jsef";
        exchange.mic(ExchangeMic::Jses);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Jses";
        exchange.mic(ExchangeMic::Jsjx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Jsjx";
        exchange.mic(ExchangeMic::Knig);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Knig";
        exchange.mic(ExchangeMic::Kncm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Kncm";
        exchange.mic(ExchangeMic::Knem);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Knem";
        exchange.mic(ExchangeMic::Knli);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Knli";
        exchange.mic(ExchangeMic::Knmx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Knmx";
        exchange.mic(ExchangeMic::Lasf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lasf";
        exchange.mic(ExchangeMic::Levl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Levl";
        exchange.mic(ExchangeMic::Lius);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lius";
        exchange.mic(ExchangeMic::Lifi);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lifi";
        exchange.mic(ExchangeMic::Liuh);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Liuh";
        exchange.mic(ExchangeMic::Lqed);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lqed";
        exchange.mic(ExchangeMic::Ltaa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ltaa";
        exchange.mic(ExchangeMic::Lmnx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Lmnx";
        exchange.mic(ExchangeMic::Mihi);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mihi";
        exchange.mic(ExchangeMic::Mprl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mprl";
        exchange.mic(ExchangeMic::Xmio);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmio";
        exchange.mic(ExchangeMic::Msco);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Msco";
        exchange.mic(ExchangeMic::Mslp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mslp";
        exchange.mic(ExchangeMic::Mspl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mspl";
        exchange.mic(ExchangeMic::Msrp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Msrp";
        exchange.mic(ExchangeMic::Mstx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mstx";
        exchange.mic(ExchangeMic::Mtus);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtus";
        exchange.mic(ExchangeMic::Bvus);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bvus";
        exchange.mic(ExchangeMic::Mtsb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtsb";
        exchange.mic(ExchangeMic::Mtxx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtxx";
        exchange.mic(ExchangeMic::Mtxa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtxa";
        exchange.mic(ExchangeMic::Mtxc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtxc";
        exchange.mic(ExchangeMic::Mtxm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtxm";
        exchange.mic(ExchangeMic::Mtxs);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mtxs";
        exchange.mic(ExchangeMic::Nblx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nblx";
        exchange.mic(ExchangeMic::Nfsc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nfsc";
        exchange.mic(ExchangeMic::Nfsa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nfsa";
        exchange.mic(ExchangeMic::Nfsd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nfsd";
        exchange.mic(ExchangeMic::Xstm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xstm";
        exchange.mic(ExchangeMic::Nmra);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nmra";
        exchange.mic(ExchangeMic::Nodx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nodx";
        exchange.mic(ExchangeMic::Nxus);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nxus";
        exchange.mic(ExchangeMic::Nypc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nypc";
        exchange.mic(ExchangeMic::Ollc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ollc";
        exchange.mic(ExchangeMic::Opra);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Opra";
        exchange.mic(ExchangeMic::Otcm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Otcm";
        exchange.mic(ExchangeMic::Cave);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cave";
        exchange.mic(ExchangeMic::Otcb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Otcb";
        exchange.mic(ExchangeMic::Otcq);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Otcq";
        exchange.mic(ExchangeMic::Pinc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pinc";
        exchange.mic(ExchangeMic::Pini);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pini";
        exchange.mic(ExchangeMic::Pinl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pinl";
        exchange.mic(ExchangeMic::Pinx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pinx";
        exchange.mic(ExchangeMic::Psgm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Psgm";
        exchange.mic(ExchangeMic::Pdqx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pdqx";
        exchange.mic(ExchangeMic::Pdqd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pdqd";
        exchange.mic(ExchangeMic::Pipe);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pipe";
        exchange.mic(ExchangeMic::Prse);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Prse";
        exchange.mic(ExchangeMic::Pulx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Pulx";
        exchange.mic(ExchangeMic::Ricx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ricx";
        exchange.mic(ExchangeMic::Ricd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ricd";
        exchange.mic(ExchangeMic::Sgma);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Sgma";
        exchange.mic(ExchangeMic::Shaw);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Shaw";
        exchange.mic(ExchangeMic::Shad);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Shad";
        exchange.mic(ExchangeMic::Soho);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Soho";
        exchange.mic(ExchangeMic::Sstx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Sstx";
        exchange.mic(ExchangeMic::Tera);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tera";
        exchange.mic(ExchangeMic::Tfsu);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tfsu";
        exchange.mic(ExchangeMic::Trck);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Trck";
        exchange.mic(ExchangeMic::Trux);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Trux";
        exchange.mic(ExchangeMic::Tru1);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tru1";
        exchange.mic(ExchangeMic::Tru2);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tru2";
        exchange.mic(ExchangeMic::Trwb);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Trwb";
        exchange.mic(ExchangeMic::Dwsf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Dwsf";
        exchange.mic(ExchangeMic::Twsf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Twsf";
        exchange.mic(ExchangeMic::Tsbx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tsbx";
        exchange.mic(ExchangeMic::Tsef);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Tsef";
        exchange.mic(ExchangeMic::Ubsa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ubsa";
        exchange.mic(ExchangeMic::Ubsp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ubsp";
        exchange.mic(ExchangeMic::Welx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Welx";
        exchange.mic(ExchangeMic::Wsag);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Wsag";
        exchange.mic(ExchangeMic::Xaqs);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xaqs";
        exchange.mic(ExchangeMic::Xbox);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbox";
        exchange.mic(ExchangeMic::Xcbo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcbo";
        exchange.mic(ExchangeMic::C2Ox);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "C2Ox";
        exchange.mic(ExchangeMic::Cbsx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cbsx";
        exchange.mic(ExchangeMic::Xcbf);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcbf";
        exchange.mic(ExchangeMic::Xcbt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcbt";
        exchange.mic(ExchangeMic::Fcbt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fcbt";
        exchange.mic(ExchangeMic::Xkbt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkbt";
        exchange.mic(ExchangeMic::Xcff);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcff";
        exchange.mic(ExchangeMic::Xchi);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xchi";
        exchange.mic(ExchangeMic::Xcis);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcis";
        exchange.mic(ExchangeMic::Xcme);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcme";
        exchange.mic(ExchangeMic::Cbts);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cbts";
        exchange.mic(ExchangeMic::Cecs);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cecs";
        exchange.mic(ExchangeMic::Cmes);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Cmes";
        exchange.mic(ExchangeMic::Fcme);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Fcme";
        exchange.mic(ExchangeMic::Glbx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Glbx";
        exchange.mic(ExchangeMic::Nyms);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nyms";
        exchange.mic(ExchangeMic::Ximm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Ximm";
        exchange.mic(ExchangeMic::Xiom);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xiom";
        exchange.mic(ExchangeMic::Xcur);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcur";
        exchange.mic(ExchangeMic::Xelx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xelx";
        exchange.mic(ExchangeMic::Xfci);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xfci";
        exchange.mic(ExchangeMic::Xgmx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xgmx";
        exchange.mic(ExchangeMic::Xins);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xins";
        exchange.mic(ExchangeMic::Iblx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Iblx";
        exchange.mic(ExchangeMic::Icbx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Icbx";
        exchange.mic(ExchangeMic::Icro);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Icro";
        exchange.mic(ExchangeMic::Iidx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Iidx";
        exchange.mic(ExchangeMic::Mocx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mocx";
        exchange.mic(ExchangeMic::Rcbx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Rcbx";
        exchange.mic(ExchangeMic::Xisx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xisx";
        exchange.mic(ExchangeMic::Gmni);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gmni";
        exchange.mic(ExchangeMic::Mcry);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Mcry";
        exchange.mic(ExchangeMic::Xisa);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xisa";
        exchange.mic(ExchangeMic::Xise);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xise";
        exchange.mic(ExchangeMic::Xmer);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmer";
        exchange.mic(ExchangeMic::Xmge);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmge";
        exchange.mic(ExchangeMic::Xnas);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnas";
        exchange.mic(ExchangeMic::Bosd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bosd";
        exchange.mic(ExchangeMic::Espd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Espd";
        exchange.mic(ExchangeMic::Nasd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nasd";
        exchange.mic(ExchangeMic::Xbos);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbos";
        exchange.mic(ExchangeMic::Xbrt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbrt";
        exchange.mic(ExchangeMic::Xbxo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xbxo";
        exchange.mic(ExchangeMic::Xncm);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xncm";
        exchange.mic(ExchangeMic::Xndq);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xndq";
        exchange.mic(ExchangeMic::Xngs);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xngs";
        exchange.mic(ExchangeMic::Xnim);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnim";
        exchange.mic(ExchangeMic::Xnms);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnms";
        exchange.mic(ExchangeMic::Xpbt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpbt";
        exchange.mic(ExchangeMic::Xphl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xphl";
        exchange.mic(ExchangeMic::Xpho);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpho";
        exchange.mic(ExchangeMic::Xpor);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpor";
        exchange.mic(ExchangeMic::Xpsx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xpsx";
        exchange.mic(ExchangeMic::Xnym);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnym";
        exchange.mic(ExchangeMic::Xcec);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcec";
        exchange.mic(ExchangeMic::Xnye);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnye";
        exchange.mic(ExchangeMic::Xnyl);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnyl";
        exchange.mic(ExchangeMic::Xnys);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnys";
        exchange.mic(ExchangeMic::Aldp);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Aldp";
        exchange.mic(ExchangeMic::Amxo);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Amxo";
        exchange.mic(ExchangeMic::Arcd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Arcd";
        exchange.mic(ExchangeMic::Arco);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Arco";
        exchange.mic(ExchangeMic::Arcx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Arcx";
        exchange.mic(ExchangeMic::Nysd);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Nysd";
        exchange.mic(ExchangeMic::Xase);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xase";
        exchange.mic(ExchangeMic::Xnli);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xnli";
        exchange.mic(ExchangeMic::Xoch);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xoch";
        exchange.mic(ExchangeMic::Xotc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xotc";
        exchange.mic(ExchangeMic::Xsef);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xsef";
        exchange.mic(ExchangeMic::Xwee);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xwee";
        exchange.mic(ExchangeMic::Bvur);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bvur";
        exchange.mic(ExchangeMic::Xmnt);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xmnt";
        exchange.mic(ExchangeMic::Xcet);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcet";
        exchange.mic(ExchangeMic::Xcue);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xcue";
        exchange.mic(ExchangeMic::Xkce);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xkce";
        exchange.mic(ExchangeMic::Xste);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xste";
        exchange.mic(ExchangeMic::Xuni);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xuni";
        exchange.mic(ExchangeMic::Gxma);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Gxma";
        exchange.mic(ExchangeMic::Bvca);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Bvca";
        exchange.mic(ExchangeMic::Hstc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Hstc";
        exchange.mic(ExchangeMic::Xhnx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xhnx";
        exchange.mic(ExchangeMic::Xstc);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xstc";
        exchange.mic(ExchangeMic::Xlus);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xlus";
        exchange.mic(ExchangeMic::Xzim);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xzim";
        exchange.mic(ExchangeMic::Xoff);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xoff";
        exchange.mic(ExchangeMic::Xxxx);
        ASSERT_EQUAL(oth, exchange.euronextMepNumber()) << "Xxxx";
    }

    TESTCASE("euronextToMic() returns correct value")
    {
        ASSERT_EQUAL(ExchangeMic::Xbru, Exchange::euronextToMic(EuronextMic::Xbru)) << "Xbru";
        ASSERT_EQUAL(ExchangeMic::Alxb, Exchange::euronextToMic(EuronextMic::Alxb)) << "Alxb";
        ASSERT_EQUAL(ExchangeMic::Enxb, Exchange::euronextToMic(EuronextMic::Enxb)) << "Enxb";
        ASSERT_EQUAL(ExchangeMic::Mlxb, Exchange::euronextToMic(EuronextMic::Mlxb)) << "Mlxb";
        ASSERT_EQUAL(ExchangeMic::Tnlb, Exchange::euronextToMic(EuronextMic::Tnlb)) << "Tnlb";
        ASSERT_EQUAL(ExchangeMic::Vpxb, Exchange::euronextToMic(EuronextMic::Vpxb)) << "Vpxb";
        ASSERT_EQUAL(ExchangeMic::Xbrd, Exchange::euronextToMic(EuronextMic::Xbrd)) << "Xbrd";
        ASSERT_EQUAL(ExchangeMic::Xpar, Exchange::euronextToMic(EuronextMic::Xpar)) << "Xpar";
        ASSERT_EQUAL(ExchangeMic::Alxp, Exchange::euronextToMic(EuronextMic::Alxp)) << "Alxp";
        ASSERT_EQUAL(ExchangeMic::Xmat, Exchange::euronextToMic(EuronextMic::Xmat)) << "Xmat";
        ASSERT_EQUAL(ExchangeMic::Xmli, Exchange::euronextToMic(EuronextMic::Xmli)) << "Xmli";
        ASSERT_EQUAL(ExchangeMic::Xmon, Exchange::euronextToMic(EuronextMic::Xmon)) << "Xmon";
        ASSERT_EQUAL(ExchangeMic::Xlis, Exchange::euronextToMic(EuronextMic::Xlis)) << "Xlis";
        ASSERT_EQUAL(ExchangeMic::Alxl, Exchange::euronextToMic(EuronextMic::Alxl)) << "Alxl";
        ASSERT_EQUAL(ExchangeMic::Enxl, Exchange::euronextToMic(EuronextMic::Enxl)) << "Enxl";
        ASSERT_EQUAL(ExchangeMic::Mfox, Exchange::euronextToMic(EuronextMic::Mfox)) << "Mfox";
        ASSERT_EQUAL(ExchangeMic::Wqxl, Exchange::euronextToMic(EuronextMic::Wqxl)) << "Wqxl";
        ASSERT_EQUAL(ExchangeMic::Xams, Exchange::euronextToMic(EuronextMic::Xams)) << "Xams";
        ASSERT_EQUAL(ExchangeMic::Alxa, Exchange::euronextToMic(EuronextMic::Alxa)) << "Alxa";
        ASSERT_EQUAL(ExchangeMic::Tnla, Exchange::euronextToMic(EuronextMic::Tnla)) << "Tnla";
        ASSERT_EQUAL(ExchangeMic::Xeuc, Exchange::euronextToMic(EuronextMic::Xeuc)) << "Xeuc";
        ASSERT_EQUAL(ExchangeMic::Xeue, Exchange::euronextToMic(EuronextMic::Xeue)) << "Xeue";
        ASSERT_EQUAL(ExchangeMic::Xeui, Exchange::euronextToMic(EuronextMic::Xeui)) << "Xeui";
        ASSERT_EQUAL(ExchangeMic::Xldn, Exchange::euronextToMic(EuronextMic::Xldn)) << "Xldn";
        ASSERT_EQUAL(ExchangeMic::Xxxx, Exchange::euronextToMic(EuronextMic::Xxxx)) << "Xxxx"; 
    }
}

}
